<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[《关键对话》读书笔记]]></title>
      <url>http://yoursite.com/2017/03/09/%E3%80%8A%E5%85%B3%E9%94%AE%E5%AF%B9%E8%AF%9D%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="掌握关键对话"><a href="#掌握关键对话" class="headerlink" title="掌握关键对话"></a>掌握关键对话</h1><h2 id="对话"><a href="#对话" class="headerlink" title="对话"></a>对话</h2><blockquote>
<p>成功的对话关键在于相关信息的自由交流，即双方愿意公开坦诚地表达自己的看法、分享自己的感受、说出自己的猜测。即使要表达的观点充满争议或不受欢迎的，他们仍愿意并且能够积极和对方分享。</p>
</blockquote>
<h2 id="营造共同观点库"><a href="#营造共同观点库" class="headerlink" title="营造共同观点库"></a>营造共同观点库</h2><blockquote>
<p>对话高手的做法是努力营建一种安全氛围，让双方都愿意向共享观点库中添加信息，哪怕这些观点乍一看多么富有争议、多么离谱、多么不符合对话者的想法。<br>当管理团队中的每个人都能表达自己的看法时，大家就会对整个问题形成更明确、更完整的看法，而不是盲人摸象般固守残缺的认识。在此过程中，随着大家对各自不同方案理解的加深，他们会在彼此之间建立信任感。</p>
</blockquote>
<h1 id="如何确定目标"><a href="#如何确定目标" class="headerlink" title="如何确定目标"></a>如何确定目标</h1><blockquote>
<p>对话高手在展开高风险对话时，他们总是首先明确目的和动机，无论出现什么情况对这个目的都不会动摇。他们对目标的关注表现在两个方面。首先，他们非常清楚自己希望通过对话获得什么。其次，对话高手从来不做“傻瓜式选择”（即非此即彼、非黑即白式的选择）。<br>我希望通过这次对话为自己、为对方、为我们之间的关系实现怎样的目标。</p>
</blockquote>
<h1 id="如何判断对话氛围是否安全"><a href="#如何判断对话氛围是否安全" class="headerlink" title="如何判断对话氛围是否安全"></a>如何判断对话氛围是否安全</h1><blockquote>
<p>关注对话陷入危机的时刻、对方失去安全感的信号（即表现出沉默或暴力倾向）以及你应对压力的方式。</p>
</blockquote>
<h1 id="如何让对方畅所欲言"><a href="#如何让对方畅所欲言" class="headerlink" title="如何让对方畅所欲言"></a>如何让对方畅所欲言</h1><blockquote>
<p>对话启动因素——共同目的：你应当让对方感到你们在对话中是朝着同一个方向努力的，感到你关心他们的目标、利益和价值。<br>对话持续因素——相互尊重</p>
</blockquote>
<h3 id="对话暂停后的做法："><a href="#对话暂停后的做法：" class="headerlink" title="对话暂停后的做法："></a>对话暂停后的做法：</h3><blockquote>
<p>道歉：牺牲才能换来回报，当你放弃一些立场时，往往会得到更有价值的回报——健康的对话和理想的结果。<br>对比说明：1.打消对方认为你不尊重他们或抱有不轨企图的误解（否定部分）。2.确认你对他们的尊重，明确你的准确目的（肯定部分）。</p>
</blockquote>
<h3 id="创建共同目的的步骤："><a href="#创建共同目的的步骤：" class="headerlink" title="创建共同目的的步骤："></a>创建共同目的的步骤：</h3><blockquote>
<p>1.积极寻找共同目的。<br>2.识别策略背后的目的。<br>3.开发共同目的。<br>4.和对方共同构思新策略。</p>
</blockquote>
<h1 id="如何在愤怒、恐惧的情况下展开对话"><a href="#如何在愤怒、恐惧的情况下展开对话" class="headerlink" title="如何在愤怒、恐惧的情况下展开对话"></a>如何在愤怒、恐惧的情况下展开对话</h1><h3 id="情绪并非无中生有："><a href="#情绪并非无中生有：" class="headerlink" title="情绪并非无中生有："></a>情绪并非无中生有：</h3><blockquote>
<p>1、情绪不是别人请加给你的，是你制造了自己的情绪，是你让自己感到害怕、烦恼或气愤。<br>2、产生负面情绪后有两个选择，要么控制它，要么被控制。</p>
</blockquote>
<h3 id="感受是由你的想法创造的："><a href="#感受是由你的想法创造的：" class="headerlink" title="感受是由你的想法创造的："></a>感受是由你的想法创造的：</h3><blockquote>
<p>所见所闻-主观臆断-形成感受-展开行为</p>
</blockquote>
<h3 id="控制想法的技巧："><a href="#控制想法的技巧：" class="headerlink" title="控制想法的技巧："></a>控制想法的技巧：</h3><blockquote>
<p>行为：我是否表现出沉默或暴力应对的方式？<br>感受：是什么情绪导致我做出这种行为的？<br>想法：产生这种情绪的想法是什么？<br>见闻：这种想法的形成有何根据？</p>
</blockquote>
<h3 id="不要为错误行为辩护或者面对严重后为自己摆脱干系，警惕三种“小聪明-”："><a href="#不要为错误行为辩护或者面对严重后为自己摆脱干系，警惕三种“小聪明-”：" class="headerlink" title="不要为错误行为辩护或者面对严重后为自己摆脱干系，警惕三种“小聪明 ”："></a>不要为错误行为辩护或者面对严重后为自己摆脱干系，警惕三种“小聪明 ”：</h3><blockquote>
<p>1.受害者想法–“这可不是我的错！”<br>2.大反派想法–“这都是你造成的！”<br>3.无助者想法–“这事我也没办法！”<br>这些错误想法的产生常源自我们言行不一的举止。</p>
</blockquote>
<h1 id="改变主观臆断："><a href="#改变主观臆断：" class="headerlink" title="改变主观臆断："></a>改变主观臆断：</h1><blockquote>
<p>把受害者变成参与者–“我是否故意忽略自己在这个问题中的责任？”<br>把大反派变成正常人–“一个理智而正常的人为什么会这样做？”<br>把无助者变成行动者–“我的真实目的是什么？希望为自己、为他人、为我们的关系实现什么目的？”</p>
</blockquote>
<h1 id="如何循循善诱而非独断而行"><a href="#如何循循善诱而非独断而行" class="headerlink" title="如何循循善诱而非独断而行"></a>如何循循善诱而非独断而行</h1><blockquote>
<p>“综合式陈述法”：<br>分享事实经过：从事实谈起可以为你的对话提供安全的出发点。事实是最不会引起争议的地方。要想成功的说出内心的想法而不招致对方的反感，你应当引导对方了解你的行为模式，让他从头至尾了解你的分析问题的思路，而不是从行为结果出发的。<br>说出你的想法：事实外加个人观点才构成面对面沟通的基础。自信。不要堆积问题。注意安全问题。<br>征询对方观点：<br>做出试探表述：在自信和谦逊之间找一个平衡点。<br>鼓励做出尝试：鼓励对方说出不同的看法。不要虚张声势。抛砖引玉。</p>
</blockquote>
<h1 id="如何帮助对方走出沉默或暴力状态：了解对方的动机"><a href="#如何帮助对方走出沉默或暴力状态：了解对方的动机" class="headerlink" title="如何帮助对方走出沉默或暴力状态：了解对方的动机"></a>如何帮助对方走出沉默或暴力状态：了解对方的动机</h1><blockquote>
<p>自我审视——做好倾听的准备（真诚、好奇、坚持、耐心）<br>鼓励对方探索行为模式：帮助对方探索其行为模式（所见所闻-主观臆断-形成感受-展开行为 ）</p>
</blockquote>
<h3 id="四种倾听手段："><a href="#四种倾听手段：" class="headerlink" title="四种倾听手段："></a>四种倾听手段：</h3><blockquote>
<p>1、询问观点<br>2、确认感受<br>3、重新描述<br>4、主动引导</p>
<p>应对方式：赞同→补充→比较</p>
</blockquote>
<h1 id="如何把关键对话转变成行动和结果"><a href="#如何把关键对话转变成行动和结果" class="headerlink" title="如何把关键对话转变成行动和结果"></a>如何把关键对话转变成行动和结果</h1><blockquote>
<p>获得更多信息甚至掌握丰富的观点，并不能保证我们接下来的做法是正确的。</p>
</blockquote>
<h3 id="决策的四种方式："><a href="#决策的四种方式：" class="headerlink" title="决策的四种方式："></a>决策的四种方式：</h3><blockquote>
<p>1.命令式（外部力量对我们施加命令；我们主动把决策权交给别人）；<br>2、顾问式：倾听别人的意见；<br>3、投票式；<br>4、共识式：它能带来巨大的统一性和高质量的决策方案。</p>
</blockquote>
<p>###决策时需要考虑：</p>
<blockquote>
<p>关注者：哪些人想参与，哪些人会受到影响；<br>知情者：具备做出最佳决策的人；<br>支持者；<br>参与者：最少的人决策，同时获得足够的支持做出高质量的决策。</p>
</blockquote>
<h3 id="决策执行环节："><a href="#决策执行环节：" class="headerlink" title="决策执行环节："></a>决策执行环节：</h3><blockquote>
<p>行动人：明确行动人的姓名，不至于大家推卸责任。<br>行动目标：可以以常见的错误为例说明自己不希望实现的目标。<br>行动时间：<br>检查方法：</p>
<p>在决策执行环节，你必须说明行动人、行动时间和截止时间等要素。明确行为目标，设定检查时间，记录人物细节并按时进行检查。最后，你应当督促人们对其作出的承诺负责。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> other </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端知识点]]></title>
      <url>http://yoursite.com/2017/03/09/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<p>前端的一些知识点<br><a id="more"></a></p>
<h4 id="一些开放性题目"><a href="#一些开放性题目" class="headerlink" title="一些开放性题目"></a>一些开放性题目</h4><pre><code>1.自我介绍：除了基本个人信息以外，面试官更想听的是你与众不同的地方和你的优势。

2.项目介绍

3.如何看待前端开发？

4.平时是如何学习前端开发的？

5.未来三到五年的规划是怎样的？
</code></pre><p><br></p>
<h4 id="position的值，-relative和absolute分别是相对于谁进行定位的？"><a href="#position的值，-relative和absolute分别是相对于谁进行定位的？" class="headerlink" title="position的值， relative和absolute分别是相对于谁进行定位的？"></a>position的值， relative和absolute分别是相对于谁进行定位的？</h4><ul>
<li><p><code>absolute</code> :生成绝对定位的元素， 相对于最近一级的 定位不是 static 的父元素来进行定位。</p>
</li>
<li><p><code>fixed</code> （老IE不支持）生成绝对定位的元素，通常相对于浏览器窗口或 frame 进行定位。</p>
</li>
<li><p><code>relative</code> 生成相对定位的元素，相对于其在普通流中的位置进行定位。</p>
</li>
<li><p><code>static</code>  默认值。没有定位，元素出现在正常的流中</p>
</li>
<li><p><code>sticky</code> 生成粘性定位的元素，容器的位置根据正常文档流计算得出</p>
</li>
</ul>
<p><br></p>
<h4 id="如何解决跨域问题"><a href="#如何解决跨域问题" class="headerlink" title="如何解决跨域问题"></a>如何解决跨域问题</h4><blockquote>
<p>JSONP：</p>
</blockquote>
<p>原理是：动态插入<code>script</code>标签，通过<code>script</code>标签引入一个<code>js</code>文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的<code>json</code>数据作为参数传入。</p>
<p>由于同源策略的限制，<code>XmlHttpRequest</code>只允许请求当前源（域名、协议、端口）的资源，为了实现跨域请求，可以通过<code>script</code>标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求。</p>
<p>优点是兼容性好，简单易用，支持浏览器与服务器双向通信。缺点是只支持GET请求。</p>
<p><code>JSONP</code>：<code>json+padding</code>（内填充），顾名思义，就是把JSON填充到一个盒子里</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createJs</span>(<span class="params">sUrl</span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> oScript = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</div><div class="line">        oScript.type = <span class="string">'text/javascript'</span>;</div><div class="line">        oScript.src = sUrl;</div><div class="line">        <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(oScript);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    createJs(<span class="string">'jsonp.js'</span>);</div><div class="line"></div><div class="line">    box(&#123;</div><div class="line">       <span class="string">'name'</span>: <span class="string">'test'</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">box</span>(<span class="params">json</span>)</span>&#123;</div><div class="line">        alert(json.name);</div><div class="line">    &#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>CORS</p>
</blockquote>
<p>服务器端对于<code>CORS</code>的支持，主要就是通过设置<code>Access-Control-Allow-Origin</code>来进行的。如果浏览器检测到相应的设置，就可以允许<code>Ajax</code>进行跨域的访问。</p>
<blockquote>
<p>通过修改document.domain来跨子域</p>
</blockquote>
<p>将子域和主域的<code>document.domain</code>设为同一个主域.前提条件：这两个域名必须属于同一个基础域名!而且所用的协议，端口都要一致，否则无法利用<code>document.domain</code>进行跨域</p>
<p>主域相同的使用<code>document.domain</code></p>
<blockquote>
<p>使用window.name来进行跨域</p>
</blockquote>
<p><code>window</code>对象有个<code>name</code>属性，该属性有个特征：即在一个窗口(window)的生命周期内,窗口载入的所有的页面都是共享一个<code>window.name</code>的，每个页面对<code>window.name</code>都有读写的权限，<code>window.name</code>是持久存在一个窗口载入过的所有页面中的</p>
<blockquote>
<p>使用HTML5中新引进的<code>window.postMessage</code>方法来跨域传送数据</p>
</blockquote>
<p>还有flash、在服务器上设置代理页面等跨域方式。个人认为<code>window.name</code>的方法既不复杂，也能兼容到几乎所有浏览器，这真是极好的一种跨域方法。</p>
<h4 id="XML和JSON的区别？"><a href="#XML和JSON的区别？" class="headerlink" title="XML和JSON的区别？"></a><code>XML</code>和<code>JSON</code>的区别？</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(1).数据体积方面。</div><div class="line"></div><div class="line">JSON相对于XML来讲，数据的体积小，传递的速度更快些。</div><div class="line"></div><div class="line">(2).数据交互方面。</div><div class="line"></div><div class="line">JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互。</div><div class="line"></div><div class="line">(3).数据描述方面。</div><div class="line"></div><div class="line">JSON对数据的描述性比XML较差。</div><div class="line"></div><div class="line">(4).传输速度方面。</div><div class="line"></div><div class="line">JSON的速度要远远快于XML。</div></pre></td></tr></table></figure>
<h4 id="谈谈你对webpack的看法"><a href="#谈谈你对webpack的看法" class="headerlink" title="谈谈你对webpack的看法"></a>谈谈你对webpack的看法</h4><p><code>WebPack</code> 是一个模块打包工具，你可以使用<code>WebPack</code>管理你的模块依赖，并编绎输出模块们所需的静态文件。它能够很好地管理、打包Web开发中所用到的<code>HTML、Javascript、CSS</code>以及各种静态文件（图片、字体等），让开发过程更加高效。对于不同类型的资源，<code>webpack</code>有对应的模块加载器。<code>webpack</code>模块打包器会分析模块间的依赖关系，最后 生成了优化且合并后的静态资源。</p>
<p><code>webpack</code>的两大特色：</p>
<pre><code>1.code splitting（可以自动完成）

2.loader 可以处理各种类型的静态文件，并且支持串联操作
</code></pre><p><code>webpack</code> 是以<code>commonJS</code>的形式来书写脚本滴，但对 <code>AMD/CMD</code> 的支持也很全面，方便旧项目进行代码迁移。</p>
<p><code>webpack</code>具有<code>requireJs</code>和<code>browserify</code>的功能，但仍有很多自己的新特性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">1. 对 CommonJS 、 AMD 、ES6的语法做了兼容</div><div class="line"></div><div class="line">2. 对js、css、图片等资源文件都支持打包</div><div class="line"></div><div class="line">3. 串联式模块加载器以及插件机制，让其具有更好的灵活性和扩展性，例如提供对CoffeeScript、ES6的支持</div><div class="line"></div><div class="line">4. 有独立的配置文件webpack.config.js</div><div class="line"></div><div class="line">5. 可以将代码切割成不同的chunk，实现按需加载，降低了初始化时间</div><div class="line"></div><div class="line">6. 支持 SourceUrls 和 SourceMaps，易于调试</div><div class="line"></div><div class="line">7. 具有强大的Plugin接口，大多是内部插件，使用起来比较灵活</div><div class="line"></div><div class="line">8.webpack 使用异步 IO 并具有多级缓存。这使得 webpack 很快且在增量编译上更加快</div></pre></td></tr></table></figure>
<h4 id="说说TCP传输的三次握手四次挥手策略"><a href="#说说TCP传输的三次握手四次挥手策略" class="headerlink" title="说说TCP传输的三次握手四次挥手策略"></a>说说TCP传输的三次握手四次挥手策略</h4><p> 为了准确无误地把数据送达目标处，<code>TCP</code>协议采用了三次握手策略。用TCP协议把数据包送出去后，<code>TCP</code>不会对传送    后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了TCP的标志：<code>SYN</code>和<code>ACK</code>。</p>
<p>发送端首先发送一个带<code>SYN</code>标志的数据包给对方。接收端收到后，回传一个带有<code>SYN/ACK</code>标志的数据包以示传达确认信息。<br>最后，发送端再回传一个带<code>ACK</code>标志的数据包，代表“握手”结束。<br>若在握手过程中某个阶段莫名中断，<code>TCP</code>协议会再次以相同的顺序发送相同的数据包。</p>
<p><br></p>
<blockquote>
<p>断开一个TCP连接则需要“四次握手”：</p>
</blockquote>
<ul>
<li><p>第一次挥手：主动关闭方发送一个<code>FIN</code>，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但是，此时主动关闭方还可 以接受数据。</p>
</li>
<li><p>第二次挥手：被动关闭方收到<code>FIN</code>包后，发送一个<code>ACK</code>给对方，确认序号为收到序号<code>+1</code>（与<code>SYN</code>相同，一个<code>FIN</code>占用一个序号）。</p>
</li>
<li><p>第三次挥手：被动关闭方发送一个<code>FIN</code>，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</p>
</li>
<li><p>第四次挥手：主动关闭方收到<code>FIN</code>后，发送一个<code>ACK</code>给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。</p>
</li>
</ul>
<h4 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h4><p><code>TCP</code>（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个<code>TCP</code>连接必须要经过三次“对话”才能建立起来</p>
<p><code>UDP</code>（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！<br>  UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境。</p>
<h4 id="说说你对作用域链的理解"><a href="#说说你对作用域链的理解" class="headerlink" title="说说你对作用域链的理解"></a>说说你对作用域链的理解</h4><p>作用域链的作用是保证执行环境里有权访问的变量和函数是有序的，作用域链的变量只能向上访问，变量访问到<code>window</code>对象即被终止，作用域链向下访问变量是不被允许的。</p>
<h4 id="创建ajax过程"><a href="#创建ajax过程" class="headerlink" title="创建ajax过程"></a>创建ajax过程</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1</span>)创建XMLHttpRequest对象,也就是创建一个异步调用对象.</div><div class="line"></div><div class="line">(<span class="number">2</span>)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.</div><div class="line"></div><div class="line">(<span class="number">3</span>)设置响应HTTP请求状态变化的函数.</div><div class="line"></div><div class="line">(<span class="number">4</span>)发送HTTP请求.</div><div class="line"></div><div class="line">(<span class="number">5</span>)获取异步调用返回的数据.</div><div class="line"></div><div class="line">(<span class="number">6</span>)使用JavaScript和DOM实现局部刷新.</div></pre></td></tr></table></figure>
<h4 id="渐进增强和优雅降级"><a href="#渐进增强和优雅降级" class="headerlink" title="渐进增强和优雅降级"></a>渐进增强和优雅降级</h4><p>渐进增强 ：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p>
<p>优雅降级 ：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p>
<h4 id="常见web安全及防护原理"><a href="#常见web安全及防护原理" class="headerlink" title="常见web安全及防护原理"></a>常见web安全及防护原理</h4><blockquote>
<p>sql注入原理</p>
</blockquote>
<p>就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。</p>
<p>总的来说有以下几点：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">1.永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双&quot;-&quot;进行转换等。</div><div class="line"></div><div class="line">2.永远不要使用动态拼装SQL，可以使用参数化的SQL或者直接使用存储过程进行数据查询存取。</div><div class="line"></div><div class="line">3.永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</div><div class="line"></div><div class="line">4.不要把机密信息明文存放，请加密或者hash掉密码和敏感的信息。</div></pre></td></tr></table></figure>
<blockquote>
<p>XSS原理及防范</p>
</blockquote>
<p>Xss(cross-site scripting)攻击指的是攻击者往Web页面里插入恶意 <code>html</code>标签或者<code>javascript</code>代码。比如：攻击者在论坛中放一个</p>
<p>看似安全的链接，骗取用户点击后，窃取<code>cookie</code>中的用户私密信息；或者攻击者在论坛中加一个恶意表单，</p>
<p>当用户提交表单的时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点。</p>
<blockquote>
<p>XSS防范方法</p>
</blockquote>
<p>首先代码里对用户输入的地方和变量都需要仔细检查长度和对<code>”&lt;”,”&gt;”,”;”,”’”</code>等字符做过滤；其次任何内容写到页面之前都必须加以<code>encode</code>，避免不小心把<code>html tag</code> 弄出来。这一个层面做好，至少可以堵住超过一半的<code>XSS</code> 攻击。</p>
<p>首先，避免直接在<code>cookie</code> 中泄露用户隐私，例如email、密码等等。</p>
<p>其次，通过使<code>cookie</code> 和系统<code>ip</code> 绑定来降低<code>cookie</code> 泄露后的危险。这样攻击者得到的<code>cookie</code> 没有实际价值，不可能拿来重放。</p>
<p>如果网站不需要再浏览器端对<code>cookie</code> 进行操作，可以在<code>Set-Cookie</code> 末尾加上<code>HttpOnly</code> 来防止<code>javascript</code> 代码直接获取<code>cookie</code> 。</p>
<p>尽量采用<code>POST</code> 而非<code>GET</code> 提交表单</p>
<blockquote>
<p>XSS与CSRF有什么区别吗？</p>
</blockquote>
<p><code>XSS</code>是获取信息，不需要提前知道其他用户页面的代码和数据包。<code>CSRF</code>是代替用户完成指定的动作，需要知道其他用户页面的代码和数据包。</p>
<p>要完成一次<code>CSRF</code>攻击，受害者必须依次完成两个步骤：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">登录受信任网站A，并在本地生成Cookie。</div><div class="line"></div><div class="line">在不登出A的情况下，访问危险网站B。</div></pre></td></tr></table></figure>
<blockquote>
<p>CSRF的防御</p>
</blockquote>
<ul>
<li><p>服务端的<code>CSRF</code>方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数。</p>
</li>
<li><p>通过验证码的方法</p>
</li>
</ul>
<h4 id="Web-Worker-和webSocket"><a href="#Web-Worker-和webSocket" class="headerlink" title="Web Worker 和webSocket"></a>Web Worker 和webSocket</h4><blockquote>
<p>worker主线程:</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span>通过 worker = <span class="keyword">new</span> Worker( url ) 加载一个JS文件来创建一个worker，同时返回一个worker实例。</div><div class="line"></div><div class="line"><span class="number">2.</span>通过worker.postMessage( data ) 方法来向worker发送数据。</div><div class="line"></div><div class="line"><span class="number">3.</span>绑定worker.onmessage方法来接收worker发送过来的数据。</div><div class="line"></div><div class="line"><span class="number">4.</span>可以使用 worker.terminate() 来终止一个worker的执行。</div></pre></td></tr></table></figure>
<p><code>WebSocket</code>是<code>Web</code>应用程序的传输协议，它提供了双向的，按序到达的数据流。他是一个<code>HTML5</code>协议，<code>WebSocket</code>的连接是持久的，他通过在客户端和服务器之间保持双工连接，服务器的更新可以被及时推送给客户端，而不需要客户端以一定时间间隔去轮询。</p>
<h4 id="HTTP和HTTPS"><a href="#HTTP和HTTPS" class="headerlink" title="HTTP和HTTPS"></a>HTTP和HTTPS</h4><p><code>HTTP</code>协议通常承载于TCP协议之上，在<code>HTTP</code>和<code>TCP</code>之间添加一个安全协议层（<code>SSL</code>或<code>TSL</code>），这个时候，就成了我们常说的HTTPS。</p>
<p>默认HTTP的端口号为80，<code>HTTPS</code>的端口号为443。</p>
<h4 id="为什么HTTPS安全"><a href="#为什么HTTPS安全" class="headerlink" title="为什么HTTPS安全"></a>为什么<code>HTTPS</code>安全</h4><p>因为网络请求需要中间有很多的服务器路由器的转发。中间的节点都可能篡改信息，而如果使用<code>HTTPS</code>，密钥在你和终点站才有。<code>https</code>之所以比<code>http</code>安全，是因为他利用<code>ssl/tls</code>协议传输。它包含证书，卸载，流量转发，负载均衡，页面适配，浏览器适配，refer传递等。保障了传输过程的安全性</p>
<h4 id="对前端模块化的认识"><a href="#对前端模块化的认识" class="headerlink" title="对前端模块化的认识"></a>对前端模块化的认识</h4><blockquote>
<p>AMD 是 <code>RequireJS</code> 在推广过程中对模块定义的规范化产出。</p>
<p>CMD 是 <code>SeaJS</code> 在推广过程中对模块定义的规范化产出。</p>
</blockquote>
<p><code>AMD</code> 是提前执行，<code>CMD</code> 是延迟执行。</p>
<p><code>AMD</code>推荐的风格通过返回一个对象做为模块对象，<code>CommonJS</code>的风格通过对<code>module.exports</code>或<code>exports</code>的属性赋值来达到暴露模块对象的目的。</p>
<blockquote>
<p>CMD模块方式</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 模块代码</span></div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="Javascript垃圾回收方法"><a href="#Javascript垃圾回收方法" class="headerlink" title="Javascript垃圾回收方法"></a>Javascript垃圾回收方法</h4><blockquote>
<p>标记清除（mark and sweep）</p>
</blockquote>
<p>这是JavaScript最常见的垃圾回收方式，当变量进入执行环境的时候，比如函数中声明一个变量，垃圾回收器将其标记为“进入环境”，当变量离开环境的时候（函数执行结束）将其标记为“离开环境”。</p>
<p>垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被环境中变量所引用的变量（闭包），在这些完成之后仍存在标记的就是要删除的变量了</p>
<blockquote>
<p>引用计数(reference counting)</p>
</blockquote>
<p>在低版本IE中经常会出现内存泄露，很多时候就是因为其采用引用计数方式进行垃圾回收。引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个 变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加1，如果该变量的值变成了另外一个，则这个值得引用次数减1，当这个值的引用次数变为0的时 候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为0的值占用的空间。</p>
<p>在IE中虽然<code>JavaScript</code>对象通过标记清除的方式进行垃圾回收，但BOM与DOM对象却是通过引用计数回收垃圾的，<br>也就是说只要涉及<code>BOM</code>及DOM就会出现循环引用问题。</p>
<h4 id="你觉得前端工程的价值体现在哪"><a href="#你觉得前端工程的价值体现在哪" class="headerlink" title="你觉得前端工程的价值体现在哪"></a>你觉得前端工程的价值体现在哪</h4><pre><code>为简化用户使用提供技术支持（交互部分）

为多个浏览器兼容性提供支持

为提高用户浏览速度（浏览器性能）提供支持

为跨平台或者其他基于webkit或其他渲染引擎的应用提供支持

为展示数据提供支持（数据接口）
</code></pre><h4 id="谈谈性能优化问题"><a href="#谈谈性能优化问题" class="headerlink" title="谈谈性能优化问题"></a>谈谈性能优化问题</h4><p>代码层面：避免使用css表达式，避免使用高级选择器，通配选择器。</p>
<p>缓存利用：缓存Ajax，使用CDN，使用外部js和css文件以便缓存，添加Expires头，服务端配置Etag，减少DNS查找等</p>
<p>请求数量：合并样式和脚本，使用css图片精灵，初始首屏之外的图片资源按需加载，静态资源延迟加载。</p>
<p>请求带宽：压缩文件，开启GZIP，</p>
<blockquote>
<p>代码层面的优化</p>
</blockquote>
<ul>
<li><p>用<code>hash-table</code>来优化查找</p>
</li>
<li><p>少用全局变量</p>
</li>
<li><p>用<code>innerHTML</code>代替<code>DOM</code>操作，减少<code>DOM</code>操作次数，优化<code>javascript</code>性能</p>
</li>
<li><p>用<code>setTimeout</code>来避免页面失去响应</p>
</li>
<li><p>缓存DOM节点查找的结果</p>
</li>
<li><p>避免使用CSS Expression</p>
</li>
<li><p>避免全局查询</p>
</li>
<li><p>避免使用with(with会创建自己的作用域，会增加作用域链长度)</p>
</li>
<li><p>多个变量声明合并</p>
</li>
<li><p>避免图片和iFrame等的空Src。空Src会重新加载当前页面，影响速度和效率</p>
</li>
<li>尽量避免写在HTML标签中写Style属性</li>
</ul>
<h4 id="移动端性能优化"><a href="#移动端性能优化" class="headerlink" title="移动端性能优化"></a>移动端性能优化</h4><ul>
<li>尽量使用css3动画，开启硬件加速。</li>
<li>适当使用<code>touch</code>事件代替<code>click</code>事件。</li>
<li>避免使用<code>css3</code>渐变阴影效果。</li>
<li>可以用<code>transform: translateZ(0)</code>来开启硬件加速。</li>
<li>不滥用Float。Float在渲染时计算量比较大，尽量减少使用</li>
<li>不滥用Web字体。Web字体需要下载，解析，重绘当前页面，尽量减少使用。</li>
<li>合理使用requestAnimationFrame动画代替setTimeout</li>
<li>CSS中的属性（CSS3 transitions、CSS3 3D transforms、Opacity、Canvas、WebGL、Video）会触发GPU渲染，请合理使用。过渡使用会引发手机过耗电增加</li>
<li>PC端的在移动端同样适用</li>
</ul>
<blockquote>
<p>相关阅读：<a href="https://github.com/cssmagic/blog/issues/20" target="_blank" rel="external">如何做到一秒渲染一个移动页面</a></p>
</blockquote>
<h4 id="什么是Etag？"><a href="#什么是Etag？" class="headerlink" title="什么是Etag？"></a>什么是Etag？</h4><p>当发送一个服务器请求时，浏览器首先会进行缓存过期判断。浏览器根据缓存过期时间判断缓存文件是否过期。<br></p>
<p>情景一：若没有过期，则不向服务器发送请求，直接使用缓存中的结果，此时我们在浏览器控制台中可以看到  <code>200 OK</code>(from cache) ，此时的情况就是完全使用缓存，浏览器和服务器没有任何交互的。</p>
<p>情景二：若已过期，则向服务器发送请求，此时请求中会带上①中设置的文件修改时间，和<code>Etag</code></p>
<p>然后，进行资源更新判断。服务器根据浏览器传过来的文件修改时间，判断自浏览器上一次请求之后，文件是不是没有被修改过；根据<code>Etag</code>，判断文件内容自上一次请求之后，有没有发生变化</p>
<p>情形一：若两种判断的结论都是文件没有被修改过，则服务器就不给浏览器发<code>index.html</code>的内容了，直接告诉它，文件没有被修改过，你用你那边的缓存吧—— <code>304 Not Modified</code>，此时浏览器就会从本地缓存中获取<code>index.html</code>的内容。此时的情况叫协议缓存，浏览器和服务器之间有一次请求交互。<br></p>
<p>情形二：若修改时间和文件内容判断有任意一个没有通过，则服务器会受理此次请求，之后的操作同①</p>
<p><br></p>
<p>① 只有get请求会被缓存，post请求不会</p>
<h4 id="Expires和Cache-Control"><a href="#Expires和Cache-Control" class="headerlink" title="Expires和Cache-Control"></a>Expires和Cache-Control</h4><p><code>Expires</code>要求客户端和服务端的时钟严格同步。<code>HTTP1.1</code>引入<code>Cache-Control</code>来克服Expires头的限制。如果max-age和Expires同时出现，则max-age有更高的优先级。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Cache-Control: no-cache, private, max-age=<span class="number">0</span></div><div class="line"></div><div class="line">ETag: abcde</div><div class="line"></div><div class="line">Expires: Thu, <span class="number">15</span> Apr <span class="number">2014</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">00</span> GMT</div><div class="line"></div><div class="line">Pragma: private</div><div class="line"></div><div class="line">Last-Modified: $now <span class="comment">// RFC1123 format</span></div></pre></td></tr></table></figure>
<h4 id="ETag应用"><a href="#ETag应用" class="headerlink" title="ETag应用:"></a>ETag应用:</h4><p><code>Etag</code>由服务器端生成，客户端通过<code>If-Match</code>或者说<code>If-None-Match</code>这个条件判断请求来验证资源是否修改。常见的是使用<code>If-None-Match</code>。请求一个文件的流程可能如下：</p>
<p>====第一次请求===</p>
<pre><code>1.客户端发起 HTTP GET 请求一个文件；

2.服务器处理请求，返回文件内容和一堆Header，当然包括Etag(例如&quot;2e681a-6-5d044840&quot;)(假设服务器支持Etag生成和已经开启了Etag).状态码200
</code></pre><p>====第二次请求===</p>
<pre><code>客户端发起 HTTP GET 请求一个文件，注意这个时候客户端同时发送一个If-None-Match头，这个头的内容就是第一次请求时服务器返回的Etag：2e681a-6-5d0448402.服务器判断发送过来的Etag和计算出来的Etag匹配，因此If-None-Match为False，不返回200，返回304，客户端继续使用本地缓存；流程很简单，问题是，如果服务器又设置了Cache-Control:max-age和Expires呢，怎么办
</code></pre><p>答案是同时使用，也就是说在完全匹配<code>If-Modified-Since</code>和<code>If-None-Match</code>即检查完修改时间和<code>Etag</code>之后，</p>
<p>服务器才能返回304.(不要陷入到底使用谁的问题怪圈)</p>
<p>为什么使用Etag请求头?</p>
<p>Etag 主要为了解决 <code>Last-Modified</code> 无法解决的一些问题。</p>
<h4 id="栈和队列的区别"><a href="#栈和队列的区别" class="headerlink" title="栈和队列的区别?"></a>栈和队列的区别?</h4><pre><code>栈的插入和删除操作都是在一端进行的，而队列的操作却是在两端进行的。

队列先进先出，栈先进后出。

栈只允许在表尾一端进行插入和删除，而队列只允许在表尾一端进行插入，在表头一端进行删除
</code></pre><h4 id="栈和堆的区别？"><a href="#栈和堆的区别？" class="headerlink" title="栈和堆的区别？"></a>栈和堆的区别？</h4><pre><code>栈区（stack）—   由编译器自动分配释放   ，存放函数的参数值，局部变量的值等。

堆区（heap）   —   一般由程序员分配释放，   若程序员不释放，程序结束时可能由OS回收。

堆（数据结构）：堆可以被看成是一棵树，如：堆排序；

栈（数据结构）：一种先进后出的数据结构。
</code></pre><h4 id="快速-排序的思想并实现一个快排？"><a href="#快速-排序的思想并实现一个快排？" class="headerlink" title="快速 排序的思想并实现一个快排？"></a>快速 排序的思想并实现一个快排？</h4><p>“快速排序”的思想很简单，整个排序过程只需要三步：</p>
<p>　　（1）在数据集之中，找一个基准点</p>
<p>　　（2）建立两个数组，分别存储左边和右边的数组</p>
<p>　　（3）利用递归进行下次比较</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(arr.length&lt;=<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">return</span> arr;<span class="comment">//如果数组只有一个数，就直接返回；</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> num = <span class="built_in">Math</span>.floor(arr.length/<span class="number">2</span>);<span class="comment">//找到中间数的索引值，如果是浮点数，则向下取整</span></div><div class="line"></div><div class="line">        <span class="keyword">var</span> numValue = arr.splice(num,<span class="number">1</span>);<span class="comment">//找到中间数的值</span></div><div class="line">        <span class="keyword">var</span> left = [];</div><div class="line">        <span class="keyword">var</span> right = [];</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(arr[i]&lt;numValue)&#123;</div><div class="line">                left.push(arr[i]);<span class="comment">//基准点的左边的数传到左边数组</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">               right.push(arr[i]);<span class="comment">//基准点的右边的数传到右边数组</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> quickSort(left).concat([numValue],quickSort(right));<span class="comment">//递归不断重复比较</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    alert(quickSort([<span class="number">32</span>,<span class="number">45</span>,<span class="number">37</span>,<span class="number">16</span>,<span class="number">2</span>,<span class="number">87</span>]));<span class="comment">//弹出“2,16,32,37,45,87”</span></div><div class="line"></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h4 id="你觉得jQuery或zepto源码有哪些写的好的地方"><a href="#你觉得jQuery或zepto源码有哪些写的好的地方" class="headerlink" title="你觉得jQuery或zepto源码有哪些写的好的地方"></a>你觉得jQuery或zepto源码有哪些写的好的地方</h4><p>(答案仅供参考)</p>
<p><code>jquery</code>源码封装在一个匿名函数的自执行环境中，有助于防止变量的全局污染，然后通过传入window对象参数，可以使window对象作为局部变量使用，好处是当<code>jquery</code>中访问window对象的时候，就不用将作用域链退回到顶层作用域了，从而可以更快的访问<code>window</code>对象。同样，传入<code>undefined</code>参数，可以缩短查找undefined时的作用域链。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"> window, undefined </span>) </span>&#123;</div><div class="line"></div><div class="line">     <span class="comment">//用一个函数域包起来，就是所谓的沙箱</span></div><div class="line"></div><div class="line">     <span class="comment">//在这里边var定义的变量，属于这个函数域内的局部变量，避免污染全局</span></div><div class="line"></div><div class="line">     <span class="comment">//把当前沙箱需要的外部变量通过函数参数引入进来</span></div><div class="line"></div><div class="line">     <span class="comment">//只要保证参数对内提供的接口的一致性，你还可以随意替换传进来的这个参数</span></div><div class="line"></div><div class="line">    <span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</div><div class="line"></div><div class="line">&#125;)( <span class="built_in">window</span> );</div></pre></td></tr></table></figure>
<p>jquery将一些原型属性和方法封装在了<code>jquery.prototype</code>中，为了缩短名称，又赋值给了<code>jquery.fn</code>，这是很形象的写法。</p>
<p>有一些数组或对象的方法经常能使用到，jQuery将其保存为局部变量以提高访问速度。</p>
<p><code>jquery</code>实现的链式调用可以节约代码，所返回的都是同一个对象，可以提高代码效率。</p>
<h4 id="ES6的了解"><a href="#ES6的了解" class="headerlink" title="ES6的了解"></a>ES6的了解</h4><p>新增模板字符串（为JavaScript提供了简单的字符串插值功能）、箭头函数（操作符左边为输入的参数，而右边则是进行的操作以及返回的值<code>Inputs=&gt;outputs</code>。）、<code>for-of</code>（用来遍历数据—例如数组中的值。）<code>arguments</code>对象可被不定参数和默认参数完美代替。<code>ES6</code>将<code>promise</code>对象纳入规范，提供了原生的<code>Promise</code>对象。增加了<code>let</code>和<code>const</code>命令，用来声明变量。增加了块级作用域。let命令实际上就增加了块级作用域。ES6规定，<code>var</code>命令和<code>function</code>命令声明的全局变量，属于全局对象的属性；<code>let</code>命令、<code>const</code>命令、<code>class</code>命令声明的全局变量，不属于全局对象的属性。。还有就是引入<code>module</code>模块的概念</p>
<h4 id="js继承方式及其优缺点"><a href="#js继承方式及其优缺点" class="headerlink" title="js继承方式及其优缺点"></a>js继承方式及其优缺点</h4><blockquote>
<p>原型链继承的缺点</p>
</blockquote>
<pre><code>一是字面量重写原型会中断关系，使用引用类型的原型，并且子类型还无法给超类型传递参数。
</code></pre><blockquote>
<p>借用构造函数（类式继承）</p>
</blockquote>
<pre><code>借用构造函数虽然解决了刚才两种问题，但没有原型，则复用无从谈起。所以我们需要原型链+借用构造函数的模式，这种模式称为组合继承
</code></pre><blockquote>
<p>组合式继承</p>
</blockquote>
<pre><code>组合式继承是比较常用的一种继承方法，其背后的思路是 使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，既通过在原型上定义方法实现了函数复用，又保证每个实例都有它自己的属性。
</code></pre><p>具体请看：<a href="http://segmentfault.com/a/1190000002440502" target="_blank" rel="external">JavaScript继承方式详解</a></p>
<h4 id="关于Http-2-0-你知道多少？"><a href="#关于Http-2-0-你知道多少？" class="headerlink" title="关于Http 2.0 你知道多少？"></a>关于Http 2.0 你知道多少？</h4><p><code>HTTP/2</code>引入了“服务端推（server push）”的概念，它允许服务端在客户端需要数据之前就主动地将数据发送到客户端缓存中，从而提高性能。</p>
<p><code>HTTP/2</code>提供更多的加密支持</p>
<p><code>HTTP/2</code>使用多路技术，允许多个消息在一个连接上同时交差。</p>
<p>它增加了头压缩（header compression），因此即使非常小的请求，其请求和响应的<code>header</code>都只会占用很小比例的带宽。</p>
<p><br></p>
<h4 id="defer和async"><a href="#defer和async" class="headerlink" title="defer和async"></a>defer和async</h4><blockquote>
<p>defer并行加载js文件，会按照页面上script标签的顺序执行<br>async并行加载js文件，下载完成立即执行，不会按照页面上script标签的顺序执行</p>
</blockquote>
<h4 id="谈谈浮动和清除浮动"><a href="#谈谈浮动和清除浮动" class="headerlink" title="谈谈浮动和清除浮动"></a>谈谈浮动和清除浮动</h4><p>浮动的框可以向左或向右移动，直到他的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档的普通流中，所以文档的普通流的块框表现得就像浮动框不存在一样。浮动的块框会漂浮在文档普通流的块框上。</p>
<h4 id="如何评价AngularJS和BackboneJS"><a href="#如何评价AngularJS和BackboneJS" class="headerlink" title="如何评价AngularJS和BackboneJS"></a>如何评价AngularJS和BackboneJS</h4><p><code>backbone</code>具有依赖性，依赖<code>underscore.js</code>。<code>Backbone + Underscore + jQuery(or Zepto)</code> 就比一个<code>AngularJS</code> 多出了2 次HTTP请求.</p>
<p><br></p>
<p><code>Backbone</code>的<code>Model</code>没有与UI视图数据绑定，而是需要在View中自行操作DOM来更新或读取UI数据。<code>AngularJS</code>与此相反，Model直接与UI视图绑定，<code>Model</code>与UI视图的关系，通过<code>directive</code>封装，<code>AngularJS</code>内置的通用<code>directive</code>，就能实现大部分操作了，也就是说，基本不必关心<code>Model</code>与UI视图的关系，直接操作Model就行了，UI视图自动更新。</p>
<p><br></p>
<p><code>AngularJS</code>的<code>directive</code>，你输入特定数据，他就能输出相应UI视图。是一个比较完善的前端MVW框架，包含模板，数据双向绑定，路由，模块化，服务，依赖注入等所有功能，模板功能强大丰富，并且是声明式的，自带了丰富的 Angular 指令。</p>
<h4 id="用过哪些设计模式？"><a href="#用过哪些设计模式？" class="headerlink" title="用过哪些设计模式？"></a>用过哪些设计模式？</h4><blockquote>
<p>工厂模式：</p>
</blockquote>
<pre><code>主要好处就是可以消除对象间的耦合，通过使用工程方法而不是new关键字。将所有实例化的代码集中在一个位置防止代码重复。

    工厂模式解决了重复实例化的问题 ，但还有一个问题,那就是识别问题，因为根本无法 搞清楚他们到底是哪个对象的实例。


function createObject(name,age,profession){//集中实例化的函数var obj = new Object();
    obj.name = name;
    obj.age = age;
    obj.profession = profession;
    obj.move = function () {
        return this.name + &apos; at &apos; + this.age + &apos; engaged in &apos; + this.profession;
    };
    return obj;
}
var test1 = createObject(&apos;trigkit4&apos;,22,&apos;programmer&apos;);//第一个实例var test2 = createObject(&apos;mike&apos;,25,&apos;engineer&apos;);//第二个实例
</code></pre><p><br></p>
<blockquote>
<p>构造函数模式</p>
</blockquote>
<p>使用构造函数的方法 ，即解决了重复实例化的问题 ，又解决了对象识别的问题，该模式与工厂模式的不同之处在于：</p>
<pre><code>1.构造函数方法没有显示的创建对象 (new Object());

2.直接将属性和方法赋值给 this 对象;

3.没有 renturn 语句。
</code></pre><h4 id="说说你对闭包的理解"><a href="#说说你对闭包的理解" class="headerlink" title="说说你对闭包的理解"></a>说说你对闭包的理解</h4><p>使用闭包主要是为了设计私有的方法和变量。闭包的优点是可以避免全局变量的污染，缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。在js中，函数即闭包，只有函数才会产生作用域的概念</p>
<p>闭包有三个特性：</p>
<blockquote>
<p>1.函数嵌套函数</p>
<p>2.函数内部可以引用外部的参数和变量</p>
<p>3.参数和变量不会被垃圾回收机制回收</p>
</blockquote>
<p> 具体请看：<a href="http://segmentfault.com/a/1190000000652891" target="_blank" rel="external">详解js闭包</a></p>
<h4 id="请你谈谈Cookie的弊端"><a href="#请你谈谈Cookie的弊端" class="headerlink" title="请你谈谈Cookie的弊端"></a>请你谈谈Cookie的弊端</h4><p><code>cookie</code>虽然在持久保存客户端数据提供了方便，分担了服务器存储的负担，但还是有很多局限性的。</p>
<p>第一：每个特定的域名下最多生成20个<code>cookie</code></p>
<pre><code>1.IE6或更低版本最多20个cookie

2.IE7和之后的版本最后可以有50个cookie。

3.Firefox最多50个cookie

4.chrome和Safari没有做硬性限制
</code></pre><p><code>IE</code>和<code>Opera</code> 会清理近期最少使用的<code>cookie</code>，<code>Firefox</code>会随机清理<code>cookie</code>。</p>
<p><code>cookie</code>的最大大约为<code>4096</code>字节，为了兼容性，一般不能超过<code>4095</code>字节。</p>
<p>IE 提供了一种存储可以持久化用户数据，叫做<code>userdata</code>，从<code>IE5.0</code>就开始支持。每个数据最多128K，每个域名下最多1M。这个持久化数据放在缓存中，如果缓存没有清理，那么会一直存在。</p>
<blockquote>
<p>优点：极高的扩展性和可用性</p>
</blockquote>
<pre><code>1.通过良好的编程，控制保存在cookie中的session对象的大小。

2.通过加密和安全传输技术（SSL），减少cookie被破解的可能性。

3.只在cookie中存放不敏感数据，即使被盗也不会有重大损失。

4.控制cookie的生命期，使之不会永远有效。偷盗者很可能拿到一个过期的cookie。
</code></pre><blockquote>
<p>缺点：</p>
</blockquote>
<pre><code>1.`Cookie`数量和长度的限制。每个domain最多只能有20条cookie，每个cookie长度不能超过4KB，否则会被截掉.


2.安全性问题。如果cookie被人拦截了，那人就可以取得所有的session信息。即使加密也与事无补，因为拦截者并不需要知道cookie的意义，他只要原样转发cookie就可以达到目的了。

3.有些状态不可能保存在客户端。例如，为了防止重复提交表单，我们需要在服务器端保存一个计数器。如果我们把这个计数器保存在客户端，那么它起不到任何作用。
</code></pre><h4 id="浏览器本地存储"><a href="#浏览器本地存储" class="headerlink" title="浏览器本地存储"></a>浏览器本地存储</h4><p>在较高版本的浏览器中，<code>js</code>提供了<code>sessionStorage</code>和<code>globalStorage</code>。在<code>HTML5</code>中提供了<code>localStorage</code>来取代<code>globalStorage</code>。</p>
<p><code>html5</code>中的<code>Web Storage</code>包括了两种存储方式：<code>sessionStorage</code>和<code>localStorage</code>。</p>
<p><code>sessionStorage</code>用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此<code>sessionStorage</code>不是一种持久化的本地存储，仅仅是会话级别的存储。</p>
<p>而<code>localStorage</code>用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</p>
<h4 id="web-storage和cookie的区别"><a href="#web-storage和cookie的区别" class="headerlink" title="web storage和cookie的区别"></a>web storage和cookie的区别</h4><p><code>Web Storage</code>的概念和<code>cookie</code>相似，区别是它是为了更大容量存储设计的。<code>Cookie</code>的大小是受限的，并且每次你请求一个新的页面的时候<code>Cookie</code>都会被发送过去，这样无形中浪费了带宽，另外<code>cookie</code>还需要指定作用域，不可以跨域调用。</p>
<p>除此之外，<code>Web Storage</code>拥有<code>setItem,getItem,removeItem,clear</code>等方法，不像<code>cookie</code>需要前端开发者自己封装<code>setCookie，getCookie</code>。</p>
<p>但是<code>cookie</code>也是不可以或缺的：<code>cookie</code>的作用是与服务器进行交互，作为<code>HTTP</code>规范的一部分而存在 ，而<code>Web Storage</code>仅仅是为了在本地“存储”数据而生</p>
<p>浏览器的支持除了<code>IE７</code>及以下不支持外，其他标准浏览器都完全支持(ie及FF需在web服务器里运行)，值得一提的是IE总是办好事，例如IE7、IE6中的<code>userData</code>其实就是<code>javascript</code>本地存储的解决方案。通过简单的代码封装可以统一到所有的浏览器都支持<code>web storage</code>。</p>
<p><code>localStorage</code>和<code>sessionStorage</code>都具有相同的操作方法，例如<code>setItem、getItem</code>和<code>removeItem</code>等</p>
<h4 id="cookie-和session-的区别："><a href="#cookie-和session-的区别：" class="headerlink" title="cookie 和session 的区别："></a>cookie 和session 的区别：</h4><pre><code>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。

2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗

   考虑到安全应当使用session。

3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能

    考虑到减轻服务器性能方面，应当使用COOKIE。

4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。

5、所以个人建议：

   将登陆信息等重要信息存放为SESSION

   其他信息如果需要保留，可以放在COOKIE中
</code></pre><blockquote>
<p><code>display:none</code>和<code>visibility:hidden</code>的区别？</p>
</blockquote>
<pre><code>display:none  隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，就当他从来不存在。

visibility:hidden  隐藏对应的元素，但是在文档布局中仍保留原来的空间。
</code></pre><blockquote>
<p>CSS中<code>link</code> 和<code>@import</code>的区别是？</p>
</blockquote>
<pre><code>(1) link属于HTML标签，而@import是CSS提供的;

(2) 页面被加载的时，link会同时被加载，而@import被引用的CSS会等到引用它的CSS文件被加载完再加载;

(3) import只在IE5以上才能识别，而link是HTML标签，无兼容问题;

(4) link方式的样式的权重 高于@import的权重.
</code></pre><blockquote>
<p><code>position:absolute</code>和<code>float</code>属性的异同</p>
</blockquote>
<ul>
<li>共同点：对内联元素设置<code>float</code>和<code>absolute</code>属性，可以让元素脱离文档流，并且可以设置其宽高。</li>
</ul>
<ul>
<li>不同点：<code>float</code>仍会占据位置，<code>absolute</code>会覆盖文档流中的其他元素。</li>
</ul>
<blockquote>
<p>介绍一下box-sizing属性？</p>
</blockquote>
<p><code>box-sizing</code>属性主要用来控制元素的盒模型的解析模式。默认值是<code>content-box</code>。</p>
<ul>
<li><p><code>content-box</code>：让元素维持W3C的标准盒模型。元素的宽度/高度由<code>border + padding + content</code>的宽度/高度决定，设置<code>width/height</code>属性指的是<code>content</code>部分的宽/高</p>
</li>
<li><p><code>border-box</code>：让元素维持IE传统盒模型（IE6以下版本和IE6~7的怪异模式）。设置<code>width/height</code>属性指的是<code>border + padding + content</code></p>
</li>
</ul>
<p>标准浏览器下，按照W3C规范对盒模型解析，一旦修改了元素的边框或内距，就会影响元素的盒子尺寸，就不得不重新计算元素的盒子尺寸，从而影响整个页面的布局。</p>
<blockquote>
<p>CSS 选择符有哪些？哪些属性可以继承？优先级算法如何计算？ CSS3新增伪类有那些？</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">1<span class="selector-class">.id</span>选择器（ # <span class="selector-tag">myid</span>）</div><div class="line"></div><div class="line">2.类选择器（<span class="selector-class">.myclassname</span>）</div><div class="line"></div><div class="line">3.标签选择器（<span class="selector-tag">div</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">p</span>）</div><div class="line"></div><div class="line">4.相邻选择器（<span class="selector-tag">h1</span> + <span class="selector-tag">p</span>）</div><div class="line"></div><div class="line">5.子选择器（<span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span>）</div><div class="line"></div><div class="line">6.后代选择器（<span class="selector-tag">li</span> <span class="selector-tag">a</span>）</div><div class="line"></div><div class="line">7.通配符选择器（ * ）</div><div class="line"></div><div class="line">8.属性选择器（<span class="selector-tag">a</span><span class="selector-attr">[rel = "external"]</span>）</div><div class="line"></div><div class="line">9.伪类选择器（<span class="selector-tag">a</span>: <span class="selector-tag">hover</span>, <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>）</div></pre></td></tr></table></figure>
<p><strong>优先级为:</strong></p>
<p><code>!important &gt;  id &gt; class &gt; tag</code></p>
<p><code>important</code> 比 内联优先级高,但内联比 <code>id</code> 要高</p>
<blockquote>
<p>CSS3新增伪类举例：</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:first-of-type</span> 选择属于其父元素的首个 &lt;<span class="selector-tag">p</span>&gt; 元素的每个 &lt;<span class="selector-tag">p</span>&gt; 元素。</div><div class="line"></div><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:last-of-type</span>  选择属于其父元素的最后 &lt;<span class="selector-tag">p</span>&gt; 元素的每个 &lt;<span class="selector-tag">p</span>&gt; 元素。</div><div class="line"></div><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:only-of-type</span>  选择属于其父元素唯一的 &lt;<span class="selector-tag">p</span>&gt; 元素的每个 &lt;<span class="selector-tag">p</span>&gt; 元素。</div><div class="line"></div><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:only-child</span>    选择属于其父元素的唯一子元素的每个 &lt;<span class="selector-tag">p</span>&gt; 元素。</div><div class="line"></div><div class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(2)</span>  选择属于其父元素的第二个子元素的每个 &lt;<span class="selector-tag">p</span>&gt; 元素。</div><div class="line"></div><div class="line"><span class="selector-pseudo">:enabled</span>  <span class="selector-pseudo">:disabled</span> 控制表单控件的禁用状态。</div><div class="line"></div><div class="line"><span class="selector-pseudo">:checked</span>        单选框或复选框被选中。</div></pre></td></tr></table></figure>
<blockquote>
<p>CSS3有哪些新特性？</p>
</blockquote>
<pre><code>CSS3实现圆角（border-radius），阴影（box-shadow），

对文字加特效（text-shadow、），线性渐变（gradient），旋转（transform）

transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);//旋转,缩放,定位,倾斜

增加了更多的CSS选择器  多背景 rgba

在CSS3中唯一引入的伪元素是::selection.

媒体查询，多栏布局

border-image
</code></pre><p>CSS3中新增了一种盒模型计算方式：<code>box-sizing</code>。盒模型默认的值是<code>content-box</code>, 新增的值是<code>padding-box</code>和<code>border-box</code>，几种盒模型计算元素宽高的区别如下：</p>
<h4 id="content-box（默认）"><a href="#content-box（默认）" class="headerlink" title="content-box（默认）"></a><code>content-box（默认）</code></h4><p>布局所占宽度Width：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Width = width + padding-left + padding-right + border-left + border-right</div></pre></td></tr></table></figure>
<p>布局所占高度Height:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Height = height + padding-top + padding-bottom + border-top + border-bottom</div></pre></td></tr></table></figure>
<h4 id="padding-box"><a href="#padding-box" class="headerlink" title="padding-box"></a><code>padding-box</code></h4><p>布局所占宽度Width：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Width = width(包含padding-left + padding-right) + border-top + border-bottom</div></pre></td></tr></table></figure>
<p>布局所占高度Height:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Height = height(包含padding-top + padding-bottom) + border-top + border-bottom</div></pre></td></tr></table></figure>
<h4 id="border-box"><a href="#border-box" class="headerlink" title="border-box"></a><code>border-box</code></h4><p>布局所占宽度Width：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Width = width(包含padding-left + padding-right + border-left + border-right)</div></pre></td></tr></table></figure>
<p>布局所占高度Height:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Height = height(包含padding-top + padding-bottom + border-top + border-bottom)</div></pre></td></tr></table></figure>
<blockquote>
<p>对BFC规范的理解？</p>
</blockquote>
<pre><code>  BFC，块级格式化上下文，一个创建了新的BFC的盒子是独立布局的，盒子里面的子元素的样式不会影响到外面的元素。在同一个BFC中的两个毗邻的块级盒在垂直方向（和布局方向有关系）的margin会发生折叠。

（W3C CSS 2.1 规范中的一个概念，它决定了元素如何对其内容进行布局，以及与其他元素的关系和相互作用。
</code></pre><h4 id="说说你对语义化的理解？"><a href="#说说你对语义化的理解？" class="headerlink" title="说说你对语义化的理解？"></a>说说你对语义化的理解？</h4><pre><code>1，去掉或者丢失样式的时候能够让页面呈现出清晰的结构

2，有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；

3，方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；

4，便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化。
</code></pre><h4 id="Doctype作用-严格模式与混杂模式如何区分？它们有何意义"><a href="#Doctype作用-严格模式与混杂模式如何区分？它们有何意义" class="headerlink" title="Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?"></a>Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?</h4><p>1）、<code>&lt;!DOCTYPE&gt;</code> 声明位于文档中的最前面，处于 <code>&lt;html&gt;</code> 标签之前。告知浏览器以何种模式来渲染文档。</p>
<p>2）、严格模式的排版和 <code>JS</code> 运作模式是  以该浏览器支持的最高标准运行。</p>
<p>3）、在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。</p>
<p>4）、<code>DOCTYPE</code>不存在或格式不正确会导致文档以混杂模式呈现。</p>
<h4 id="你知道多少种Doctype文档类型？"><a href="#你知道多少种Doctype文档类型？" class="headerlink" title="你知道多少种Doctype文档类型？"></a>你知道多少种<code>Doctype</code>文档类型？</h4><pre><code> 该标签可声明三种 DTD 类型，分别表示严格版本、过渡版本以及基于框架的 HTML 文档。

 HTML 4.01 规定了三种文档类型：Strict、Transitional 以及 Frameset。

 XHTML 1.0 规定了三种 XML 文档类型：Strict、Transitional 以及 Frameset。

Standards （标准）模式（也就是严格呈现模式）用于呈现遵循最新标准的网页，而 Quirks

 （包容）模式（也就是松散呈现模式或者兼容模式）用于呈现为传统浏览器而设计的网页。
</code></pre><h4 id="HTML与XHTML——二者有什么区别"><a href="#HTML与XHTML——二者有什么区别" class="headerlink" title="HTML与XHTML——二者有什么区别"></a>HTML与XHTML——二者有什么区别</h4><pre><code>区别：

1.所有的标记都必须要有一个相应的结束标记

2.所有标签的元素和属性的名字都必须使用小写

3.所有的XML标记都必须合理嵌套

4.所有的属性必须用引号&quot;&quot;括起来

5.把所有&lt;和&amp;特殊符号用编码表示

6.给所有属性赋一个值

7.不要在注释内容中使“--”

8.图片必须有说明文字
</code></pre><h4 id="常见兼容性问题？"><a href="#常见兼容性问题？" class="headerlink" title="常见兼容性问题？"></a>常见兼容性问题？</h4><pre><code>png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.也可以引用一段脚本处理.

浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。

IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。

浮动ie产生的双倍距离（IE6双边距问题：在IE6下，如果对元素设置了浮动，同时又设置了margin-left或margin-right，margin值会加倍。）

#box{ float:left; width:10px; margin:0 0 0 100px;}

这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入
_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)

渐进识别的方式，从总体中逐渐排除局部。


  首先，巧妙的使用“\9”这一标记，将IE游览器从所有情况中分离出来。

  接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。

  css

      .bb{

       background-color:#f1ee18;/*所有识别*/

      .background-color:#00deff\9; /*IE6、7、8识别*/

      +background-color:#a200ff;/*IE6、7识别*/

      _background-color:#1e0bd1;/*IE6识别*/

      }


怪异模式问题：漏写DTD声明，Firefox仍然会按照标准模式来解析网页，但在IE中会触发
怪异模式。为避免怪异模式给我们带来不必要的麻烦，最好养成书写DTD声明的好习惯。现在
可以使用[html5](http://www.w3.org/TR/html5/single-page.html)推荐的写法：`&lt;doctype html&gt;`
</code></pre><blockquote>
<p>上下margin重合问题</p>
</blockquote>
<pre><code>ie和ff都存在，相邻的两个div的margin-left和margin-right不会重合，但是margin-top和margin-bottom却会发生重合。

解决方法，养成良好的代码编写习惯，同时采用margin-top或者同时采用margin-bottom。
</code></pre><h4 id="解释下浮动和它的工作原理？清除浮动的技巧"><a href="#解释下浮动和它的工作原理？清除浮动的技巧" class="headerlink" title="解释下浮动和它的工作原理？清除浮动的技巧"></a>解释下浮动和它的工作原理？清除浮动的技巧</h4><pre><code>浮动元素脱离文档流，不占据空间。浮动元素碰到包含它的边框或者浮动元素的边框停留。


1.使用空标签清除浮动。

   这种方法是在所有浮动标签后面添加一个空标签 定义css clear:both. 弊端就是增加了无意义标签。

2.使用overflow。

   给包含浮动元素的父标签添加css属性 overflow:auto; zoom:1; zoom:1用于兼容IE6。

3.使用after伪对象清除浮动。

   该方法只适用于非IE浏览器。具体写法可参照以下示例。使用中需注意以下几点。一、该方法中必须为需要清除浮动元素的伪对象中设置 height:0，否则该元素会比实际高出若干像素；
</code></pre><h4 id="浮动元素引起的问题和解决办法？"><a href="#浮动元素引起的问题和解决办法？" class="headerlink" title="浮动元素引起的问题和解决办法？"></a>浮动元素引起的问题和解决办法？</h4><pre><code>浮动元素引起的问题：

（1）父元素的高度无法被撑开，影响与父元素同级的元素

（2）与浮动元素同级的非浮动元素（内联元素）会跟随其后

（3）若非第一个元素浮动，则该元素之前的元素也需要浮动，否则会影响页面显示的结构
</code></pre><blockquote>
<p>解决方法：</p>
</blockquote>
<p>使用<code>CSS</code>中的<code>clear:both</code>;属性来清除元素的浮动可解决2、3问题，对于问题1，添加如下样式，给父元素添加<code>clearfix</code>样式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;<span class="attribute">content</span>: <span class="string">"."</span>;<span class="attribute">display</span>: block;<span class="attribute">height</span>: <span class="number">0</span>;<span class="attribute">clear</span>: both;<span class="attribute">visibility</span>: hidden;&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.clearfix</span>&#123;<span class="attribute">display</span>: inline-block;&#125; <span class="comment">/* for IE/Mac */</span></div></pre></td></tr></table></figure>
<p><strong>清除浮动的几种方法：</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">1，额外标签法，&lt;div style="clear:both;"&gt;&lt;/div&gt;（缺点：不过这个办法会增加额外的标签使HTML结构看起来不够简洁。）</div><div class="line"></div><div class="line">2，使用after伪类</div><div class="line"></div><div class="line">#parent:after&#123;</div><div class="line"></div><div class="line">    content:".";</div><div class="line"></div><div class="line">    height:0;</div><div class="line"></div><div class="line">    visibility:hidden;</div><div class="line"></div><div class="line">    display:block;</div><div class="line"></div><div class="line">    clear:both;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">3,浮动外部元素</div><div class="line"></div><div class="line">4,设置overflow为hidden或者auto</div></pre></td></tr></table></figure>
<h4 id="DOM操作——怎样添加、移除、移动、复制、创建和查找节点。"><a href="#DOM操作——怎样添加、移除、移动、复制、创建和查找节点。" class="headerlink" title="DOM操作——怎样添加、移除、移动、复制、创建和查找节点。"></a>DOM操作——怎样添加、移除、移动、复制、创建和查找节点。</h4><blockquote>
<p>1）创建新节点</p>
</blockquote>
<pre><code>createDocumentFragment()    //创建一个DOM片段

createElement()   //创建一个具体的元素

createTextNode()   //创建一个文本节点
</code></pre><blockquote>
<p>2）添加、移除、替换、插入</p>
</blockquote>
<pre><code>appendChild()

removeChild()

replaceChild()

insertBefore() //并没有insertAfter()
</code></pre><blockquote>
<p>3）查找</p>
</blockquote>
<pre><code>getElementsByTagName()    //通过标签名称

getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，
会得到一个数组，其中包括id等于name值的)

getElementById()    //通过元素Id，唯一性
</code></pre><h4 id="html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？"><a href="#html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？" class="headerlink" title="html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？"></a>html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</h4><pre><code>HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。

拖拽释放(Drag and drop) API

语义化更好的内容标签（header,nav,footer,aside,article,section）

音频、视频API(audio,video)

画布(Canvas) API

地理(Geolocation) API

本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；

sessionStorage 的数据在浏览器关闭后自动删除


表单控件，calendar、date、time、email、url、search

新的技术webworker, websocket, Geolocation
</code></pre><blockquote>
<p>移除的元素</p>
</blockquote>
<pre><code>纯表现的元素：basefont，big，center，font, s，strike，tt，u；

对可用性产生负面影响的元素：frame，frameset，noframes；
</code></pre><blockquote>
<p>支持HTML5新标签：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">IE8/IE7/IE6支持通过document.createElement方法产生的标签，</div><div class="line"></div><div class="line">可以利用这一特性让这些浏览器支持HTML5新标签，</div><div class="line"></div><div class="line">当然最好的方式是直接使用成熟的框架、使用最多的是html5shim框架</div><div class="line"></div><div class="line">   &lt;!--[if lt IE 9]&gt;</div><div class="line"></div><div class="line">   &lt;script&gt; src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&lt;/script&gt;</div><div class="line"></div><div class="line">   &lt;![endif]--&gt;</div><div class="line"></div><div class="line">如何区分： DOCTYPE声明\新增的结构元素\功能元素</div></pre></td></tr></table></figure>
<h4 id="如何实现浏览器内多个标签页之间的通信"><a href="#如何实现浏览器内多个标签页之间的通信" class="headerlink" title="如何实现浏览器内多个标签页之间的通信?"></a>如何实现浏览器内多个标签页之间的通信?</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">调用localstorge、cookies等本地存储方式</div></pre></td></tr></table></figure>
<h4 id="什么是-FOUC（无样式内容闪烁）？你如何来避免-FOUC？"><a href="#什么是-FOUC（无样式内容闪烁）？你如何来避免-FOUC？" class="headerlink" title="什么是 FOUC（无样式内容闪烁）？你如何来避免 FOUC？"></a>什么是 FOUC（无样式内容闪烁）？你如何来避免 FOUC？</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> FOUC - Flash Of Unstyled Content 文档样式闪烁</div><div class="line"></div><div class="line"> <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">media</span>=<span class="string">"all"</span>&gt;</span><span class="css">@<span class="keyword">import</span> <span class="string">"../fouc.css"</span>;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line">而引用CSS文件的@import就是造成这个问题的罪魁祸首。IE会先加载整个HTML文档的DOM，然后再去导入外部的CSS文件，因此，在页面DOM加载完成到CSS导入完成中间会有一段时间页面上的内容是没有样式的，这段时间的长短跟网速，电脑速度都有关系。</div><div class="line"></div><div class="line"> 解决方法简单的出奇，只要在<span class="tag">&lt;<span class="name">head</span>&gt;</span>之间加入一个<span class="tag">&lt;<span class="name">link</span>&gt;</span>或者<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">元素就可以了。</span></div></pre></td></tr></table></figure>
<h4 id="null和undefined的区别？"><a href="#null和undefined的区别？" class="headerlink" title="null和undefined的区别？"></a>null和undefined的区别？</h4><p><code>null</code>是一个表示”无”的对象，转为数值时为0；<code>undefined</code>是一个表示”无”的原始值，转为数值时为<code>NaN</code>。</p>
<p>当声明的变量还未被初始化时，变量的默认值为<code>undefined</code>。</p>
<p><code>null</code>用来表示尚未存在的对象，常用来表示函数企图返回一个不存在的对象。</p>
<p><code>undefined</code>表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：</p>
<pre><code>（1）变量被声明了，但没有赋值时，就等于undefined。


（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。


（3）对象没有赋值的属性，该属性的值为undefined。


（4）函数没有返回值时，默认返回undefined。
</code></pre><p><code>null</code>表示”没有对象”，即该处不应该有值。典型用法是：</p>
<pre><code>（1） 作为函数的参数，表示该函数的参数不是对象。

（2） 作为对象原型链的终点。
</code></pre><h4 id="new操作符具体干了什么呢"><a href="#new操作符具体干了什么呢" class="headerlink" title="new操作符具体干了什么呢?"></a>new操作符具体干了什么呢?</h4><pre><code>   1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。

   2、属性和方法被加入到 this 引用的对象中。

   3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。



var obj  = {};

obj.__proto__ = Base.prototype;

Base.call(obj);
</code></pre><h4 id="js延迟加载的方式有哪些？"><a href="#js延迟加载的方式有哪些？" class="headerlink" title="js延迟加载的方式有哪些？"></a>js延迟加载的方式有哪些？</h4><pre><code>defer和async、动态创建DOM方式（创建script，插入到DOM中，加载完毕后callBack）、按需异步载入js
</code></pre><h4 id="call-和-apply-的区别和作用？"><a href="#call-和-apply-的区别和作用？" class="headerlink" title="call() 和 apply() 的区别和作用？"></a><code>call()</code> 和 <code>apply()</code> 的区别和作用？</h4><p>作用：动态改变某个类的某个方法的运行环境（执行上下文）。</p>
<p>区别参见：<a href="http://segmentfault.com/blog/trigkit4/1190000000660786#articleHeader15" target="_blank" rel="external">JavaScript学习总结（四）function函数部分</a></p>
<h4 id="哪些操作会造成内存泄漏？"><a href="#哪些操作会造成内存泄漏？" class="headerlink" title="哪些操作会造成内存泄漏？"></a>哪些操作会造成内存泄漏？</h4><pre><code>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。

垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。



setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。

闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）
</code></pre><p>详见：<a href="http://segmentfault.com/blog/trigkit4/1190000000687844" target="_blank" rel="external">详解js变量、作用域及内存</a></p>
<h4 id="列举IE-与其他浏览器不一样的特性？"><a href="#列举IE-与其他浏览器不一样的特性？" class="headerlink" title="列举IE 与其他浏览器不一样的特性？"></a>列举IE 与其他浏览器不一样的特性？</h4><ul>
<li><p>IE支持<code>currentStyle</code>，FIrefox使用<code>getComputStyle</code></p>
</li>
<li><p>IE  使用<code>innerText</code>，Firefox使用<code>textContent</code></p>
</li>
<li><p>滤镜方面：IE:<code>filter:alpha(opacity= num)</code>；Firefox：<code>-moz-opacity:num</code></p>
</li>
<li><p>事件方面：IE：<code>attachEvent</code>：火狐是<code>addEventListener</code></p>
</li>
<li><p>鼠标位置：IE是<code>event.clientX</code>；火狐是<code>event.pageX</code></p>
</li>
<li><p>IE使用<code>event.srcElement</code>；Firefox使用<code>event.target</code></p>
</li>
<li><p>IE中消除list的原点仅需margin:0即可达到最终效果；FIrefox需要设置<code>margin:0;padding:0以及list-style:none</code></p>
</li>
<li><p>CSS圆角：ie7以下不支持圆角</p>
</li>
</ul>
<h4 id="WEB应用从服务器主动推送Data到客户端有那些方式？"><a href="#WEB应用从服务器主动推送Data到客户端有那些方式？" class="headerlink" title="WEB应用从服务器主动推送Data到客户端有那些方式？"></a>WEB应用从服务器主动推送Data到客户端有那些方式？</h4><p>Javascript数据推送</p>
<ul>
<li><code>Commet</code>：基于HTTP长连接的服务器推送技术</li>
</ul>
<ul>
<li>基于<code>WebSocket</code>的推送方案</li>
</ul>
<ul>
<li><code>SSE</code>（Server-Send Event）：服务器推送数据新方式</li>
</ul>
<h4 id="对前端界面工程师这个职位是怎么样理解的？它的前景会怎么样？"><a href="#对前端界面工程师这个职位是怎么样理解的？它的前景会怎么样？" class="headerlink" title="对前端界面工程师这个职位是怎么样理解的？它的前景会怎么样？"></a>对前端界面工程师这个职位是怎么样理解的？它的前景会怎么样？</h4><pre><code>前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。

    1、实现界面交互

    2、提升用户体验

    3、有了Node.js，前端可以实现服务端的一些事情


前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，



 参与项目，快速高质量完成实现效果图，精确到1px；

 与团队成员，UI设计，产品经理的沟通；

 做好的页面结构，页面重构和用户体验；

 处理hack，兼容、写出优美的代码格式；

 针对服务器的优化、拥抱最新前端技术。
</code></pre><h4 id="一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？"><a href="#一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么？" class="headerlink" title="一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？"></a>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？</h4><pre><code>    分为4个步骤：

    （1），当发送一个URL请求时，不管这个URL是Web页面的URL还是Web页面上每个资源的URL，浏览器都会开启一个线程来处理这个请求，同时在远程DNS服务器上启动一个DNS查询。这能使浏览器获得请求对应的IP地址。

    （2）， 浏览器与远程`Web`服务器通过`TCP`三次握手协商来建立一个`TCP/IP`连接。该握手包括一个同步报文，一个同步-应答报文和一个应答报文，这三个报文在 浏览器和服务器之间传递。该握手首先由客户端尝试建立起通信，而后服务器应答并接受客户端的请求，最后由客户端发出该请求已经被接受的报文。

    （3），一旦`TCP/IP`连接建立，浏览器会通过该连接向远程服务器发送`HTTP`的`GET`请求。远程服务器找到资源并使用HTTP响应返回该资源，值为200的HTTP响应状态表示一个正确的响应。

    （4），此时，`Web`服务器提供资源服务，客户端开始下载资源。



请求返回后，便进入了我们关注的前端模块

简单来说，浏览器会解析`HTML`生成`DOM Tree`，其次会根据CSS生成CSS Rule Tree，而`javascript`又可以根据`DOM API`操作`DOM`
</code></pre><p>详情：<a href="http://segmentfault.com/blog/trigkit4/1190000000697254" target="_blank" rel="external">从输入 URL 到浏览器接收的过程中发生了什么事情？</a></p>
<h4 id="javascript对象的几种创建方式"><a href="#javascript对象的几种创建方式" class="headerlink" title="javascript对象的几种创建方式"></a>javascript对象的几种创建方式</h4><pre><code>1，工厂模式

2，构造函数模式

3，原型模式

4，混合构造函数和原型模式

5，动态原型模式

6，寄生构造函数模式

7，稳妥构造函数模式
</code></pre><h4 id="javascript继承的6种方法"><a href="#javascript继承的6种方法" class="headerlink" title="javascript继承的6种方法"></a>javascript继承的6种方法</h4><pre><code>1，原型链继承

2，借用构造函数继承

3，组合继承(原型+借用构造)

4，原型式继承

5，寄生式继承

6，寄生组合式继承
</code></pre><p>详情：<a href="http://segmentfault.com/blog/trigkit4/1190000002440502" target="_blank" rel="external">JavaScript继承方式详解</a></p>
<h4 id="创建ajax的过程"><a href="#创建ajax的过程" class="headerlink" title="创建ajax的过程"></a>创建ajax的过程</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1</span>)创建<span class="string">`XMLHttpRequest`</span>对象,也就是创建一个异步调用对象.</div><div class="line"></div><div class="line">(<span class="number">2</span>)创建一个新的<span class="string">`HTTP`</span>请求,并指定该<span class="string">`HTTP`</span>请求的方法、<span class="string">`URL`</span>及验证信息.</div><div class="line"></div><div class="line">(<span class="number">3</span>)设置响应<span class="string">`HTTP`</span>请求状态变化的函数.</div><div class="line"></div><div class="line">(<span class="number">4</span>)发送<span class="string">`HTTP`</span>请求.</div><div class="line"></div><div class="line">(<span class="number">5</span>)获取异步调用返回的数据.</div><div class="line"></div><div class="line">(<span class="number">6</span>)使用JavaScript和DOM实现局部刷新.</div><div class="line"></div><div class="line"></div><div class="line">var xmlHttp = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line"></div><div class="line">xmlHttp.open(<span class="string">'GET'</span>,<span class="string">'demo.php'</span>,<span class="string">'true'</span>);</div><div class="line"></div><div class="line">xmlHttp.send()</div><div class="line"></div><div class="line">xmlHttp.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(xmlHttp.readyState === <span class="number">4</span> &amp; xmlHttp.status === <span class="number">200</span>)&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>详情：<a href="http://segmentfault.com/blog/trigkit4/1190000000691919" target="_blank" rel="external">JavaScript学习总结（七）Ajax和Http状态字</a></p>
<h4 id="异步加载和延迟加载"><a href="#异步加载和延迟加载" class="headerlink" title="异步加载和延迟加载"></a>异步加载和延迟加载</h4><pre><code>1.异步加载的方案： 动态插入script标签

2.通过ajax去获取js代码，然后通过eval执行

3.script标签上添加defer或者async属性

4.创建并插入iframe，让它异步执行js

5.延迟加载：有些 js 代码并不是页面初始化的时候就立刻需要的，而稍后的某些情况才需要的。
</code></pre><h4 id="ie各版本和chrome可以并行下载多少个资源"><a href="#ie各版本和chrome可以并行下载多少个资源" class="headerlink" title="ie各版本和chrome可以并行下载多少个资源"></a>ie各版本和chrome可以并行下载多少个资源</h4><pre><code>IE6 两个并发，iE7升级之后的6个并发，之后版本也是6个
Firefox，chrome也是6个
</code></pre><p>####<code>Flash</code>、<code>Ajax</code>各自的优缺点，在使用中如何取舍？</p>
<ul>
<li><code>Flash</code>适合处理多媒体、矢量图形、访问机器；对<code>CSS</code>、处理文本上不足，不容易被搜索。</li>
</ul>
<p>-<code>Ajax</code>对<code>CSS</code>、文本支持很好，支持搜索；多媒体、矢量图形、机器访问不足。</p>
<ul>
<li>共同点：与服务器的无刷新传递消息、用户离线和在线状态、操作DOM</li>
</ul>
<h4 id="请解释一下-JavaScript-的同源策略。"><a href="#请解释一下-JavaScript-的同源策略。" class="headerlink" title="请解释一下 JavaScript 的同源策略。"></a>请解释一下 JavaScript 的同源策略。</h4><p>概念:同源策略是客户端脚本（尤其是<code>Javascript</code>）的重要的安全度量标准。它最早出自<code>Netscape Navigator2.0</code>，其目的是防止某个文档或脚本从多个不同源装载。</p>
<p>这里的同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议。</p>
<p>指一段脚本只能读取来自同一来源的窗口和文档的属性。</p>
<h4 id="为什么要有同源限制？"><a href="#为什么要有同源限制？" class="headerlink" title="为什么要有同源限制？"></a>为什么要有同源限制？</h4><p>   我们举例说明：比如一个黑客程序，他利用<code>Iframe</code>把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名，密码登录时，他的页面就可以通过<code>Javascript</code>读取到你的表单中<code>input</code>中的内容，这样用户名，密码就轻松到手了。</p>
<p>缺点：</p>
<p>现在网站的<code>JS</code> 都会进行压缩，一些文件用了严格模式，而另一些没有。这时这些本来是严格模式的文件，被 <code>merge</code> 后，这个串就到了文件的中间，不仅没有指示严格模式，反而在压缩后浪费了字节。</p>
<h4 id="GET和POST的区别，何时使用POST？"><a href="#GET和POST的区别，何时使用POST？" class="headerlink" title="GET和POST的区别，何时使用POST？"></a>GET和POST的区别，何时使用POST？</h4><pre><code>    GET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在2000个字符

    POST：一般用于修改服务器上的资源，对所发送的信息没有限制。


    GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值，

    也就是说Get是通过地址栏来传值，而Post是通过提交表单来传值。



然而，在以下情况中，请使用 POST 请求：

无法使用缓存文件（更新服务器上的文件或数据库）

向服务器发送大量数据（POST 没有数据量限制）

发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠
</code></pre><h4 id="事件、IE与火狐的事件机制有什么区别？-如何阻止冒泡？"><a href="#事件、IE与火狐的事件机制有什么区别？-如何阻止冒泡？" class="headerlink" title="事件、IE与火狐的事件机制有什么区别？ 如何阻止冒泡？"></a>事件、IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</h4><pre><code>1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为。

2. 事件处理机制：IE是事件冒泡、firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件。；

3. `ev.stopPropagation()`;注意旧ie的方法 `ev.cancelBubble = true`;
</code></pre><h4 id="ajax的缺点和在IE下的问题？"><a href="#ajax的缺点和在IE下的问题？" class="headerlink" title="ajax的缺点和在IE下的问题？"></a>ajax的缺点和在IE下的问题？</h4><p>详情请见：<a href="http://segmentfault.com/blog/trigkit4/1190000000691919" target="_blank" rel="external">JavaScript学习总结（七）Ajax和Http状态字</a></p>
<blockquote>
<p>ajax的缺点</p>
</blockquote>
<pre><code>1、ajax不支持浏览器back按钮。

2、安全问题 AJAX暴露了与服务器交互的细节。

3、对搜索引擎的支持比较弱。

4、破坏了程序的异常机制。

5、不容易调试。
</code></pre><blockquote>
<p>IE缓存问题</p>
</blockquote>
<p>在IE浏览器下，如果请求的方法是<code>GET</code>，并且请求的<code>URL</code>不变，那么这个请求的结果就会被缓存。解决这个问题的办法可以通过实时改变请求的<code>URL</code>，只要URL改变，就不会被缓存，可以通过在URL末尾添加上随机的时间戳参数(<code>&#39;t&#39;= + new Date().getTime()</code>)</p>
<p>或者：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open(&apos;GET&apos;,&apos;demo.php?rand=+Math.random()&apos;,true);//</div></pre></td></tr></table></figure>
<blockquote>
<p>Ajax请求的页面历史记录状态问题</p>
</blockquote>
<p>可以通过锚点来记录状态，<code>location.hash</code>。让浏览器记录Ajax请求时页面状态的变化。</p>
<p>还可以通过<code>HTML5</code>的<code>history.pushState</code>，来实现浏览器地址栏的无刷新改变</p>
<h4 id="谈谈你对重构的理解"><a href="#谈谈你对重构的理解" class="headerlink" title="谈谈你对重构的理解"></a>谈谈你对重构的理解</h4><p>网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。也就是说是在不改变UI的情况下，对网站进行优化，<br>在扩展的同时保持一致的UI。</p>
<pre><code>对于传统的网站来说重构通常是：

表格(table)布局改为DIV+CSS

使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的)

对于移动平台的优化

针对于SEO进行优化

深层次的网站重构应该考虑的方面


减少代码间的耦合

让代码保持弹性

严格按规范编写代码

设计可扩展的API

代替旧有的框架、语言(如VB)

增强用户体验

通常来说对于速度的优化也包含在重构中



压缩JS、CSS、image等前端资源(通常是由服务器来解决)

程序的性能优化(如数据读写)

采用CDN来加速资源加载

对于JS DOM的优化

HTTP服务器的文件缓存
</code></pre><h4 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">100  Continue  继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息</div><div class="line"></div><div class="line">200  OK   正常返回信息</div><div class="line"></div><div class="line">201  Created  请求成功并且服务器创建了新的资源</div><div class="line"></div><div class="line">202  Accepted  服务器已接受请求，但尚未处理</div><div class="line"></div><div class="line">301  Moved Permanently  请求的网页已永久移动到新位置。</div><div class="line"></div><div class="line">302 Found  临时性重定向。</div><div class="line"></div><div class="line">303 See Other  临时性重定向，且总是使用 GET 请求新的 URI。</div><div class="line"></div><div class="line">304  Not Modified  自从上次请求后，请求的网页未修改过。</div><div class="line"></div><div class="line"></div><div class="line">400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</div><div class="line"></div><div class="line">401 Unauthorized  请求未授权。</div><div class="line"></div><div class="line">403 Forbidden  禁止访问。</div><div class="line"></div><div class="line">404 Not Found  找不到如何与 URI 相匹配的资源。</div><div class="line"></div><div class="line">500 Internal Server Error  最常见的服务器端错误。</div><div class="line"></div><div class="line">503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。</div></pre></td></tr></table></figure>
<h4 id="说说你对Promise的理解"><a href="#说说你对Promise的理解" class="headerlink" title="说说你对Promise的理解"></a>说说你对Promise的理解</h4><p>依照 <code>Promise/A+</code> 的定义，<code>Promise</code> 有四种状态：</p>
<pre><code>pending: 初始状态, 非 fulfilled 或 rejected.

fulfilled: 成功的操作.

rejected: 失败的操作.

settled: Promise已被fulfilled或rejected，且不是pending
</code></pre><p>另外， <code>fulfilled</code> 与 <code>rejected</code> 一起合称 <code>settled</code>。</p>
<p><code>Promise</code> 对象用来进行延迟(deferred) 和异步(asynchronous ) 计算。</p>
<blockquote>
<p>Promise 的构造函数</p>
</blockquote>
<p>构造一个 <code>Promise</code>，最基本的用法如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (...) &#123;  <span class="comment">// succeed</span></div><div class="line"></div><div class="line">        resolve(result);</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;   <span class="comment">// fails</span></div><div class="line"></div><div class="line">        reject(<span class="built_in">Error</span>(errMessage));</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>Promise</code> 实例拥有 <code>then</code> 方法（具有 <code>then</code> 方法的对象，通常被称为 <code>thenable</code>）。它的使用方法如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">promise.then(onFulfilled, onRejected)</div></pre></td></tr></table></figure>
<p>接收两个函数作为参数，一个在 <code>fulfilled</code> 的时候被调用，一个在 <code>rejected</code> 的时候被调用，接收参数就是 <code>future，onFulfilled</code> 对应 <code>resolve</code>, <code>onRejected</code> 对应 <code>reject</code>。</p>
<h4 id="说说你对前端架构师的理解"><a href="#说说你对前端架构师的理解" class="headerlink" title="说说你对前端架构师的理解"></a>说说你对前端架构师的理解</h4><p>负责前端团队的管理及与其他团队的协调工作，提升团队成员能力和整体效率；<br>带领团队完成研发工具及平台前端部分的设计、研发和维护；<br>带领团队进行前端领域前沿技术研究及新技术调研，保证团队的技术领先<br>负责前端开发规范制定、功能模块化设计、公共组件搭建等工作，并组织培训。</p>
<h4 id="实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制"><a href="#实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制" class="headerlink" title="实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制"></a>实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.clone = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> o = <span class="keyword">this</span>.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> e <span class="keyword">in</span> <span class="keyword">this</span>)&#123;</div><div class="line"></div><div class="line">                o[e] = <span class="keyword">typeof</span> <span class="keyword">this</span>[e] === <span class="string">"object"</span> ? <span class="keyword">this</span>[e].clone() : <span class="keyword">this</span>[e];</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> o;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="说说严格模式的限制"><a href="#说说严格模式的限制" class="headerlink" title="说说严格模式的限制"></a>说说严格模式的限制</h4><p>严格模式主要有以下限制：</p>
<pre><code>变量必须声明后再使用

函数的参数不能有同名属性，否则报错

不能使用with语句

不能对只读属性赋值，否则报错

不能使用前缀0表示八进制数，否则报错

不能删除不可删除的属性，否则报错

不能删除变量delete prop，会报错，只能删除属性delete global[prop]

eval不会在它的外层作用域引入变量

eval和arguments不能被重新赋值

arguments不会自动反映函数参数的变化

不能使用arguments.callee

不能使用arguments.caller

禁止this指向全局对象

不能使用fn.caller和fn.arguments获取函数调用的堆栈

增加了保留字（比如protected、static和interface）
</code></pre><p>设立”严格模式”的目的，主要有以下几个：</p>
<ul>
<li><p>消除<code>Javascript</code>语法的一些不合理、不严谨之处，减少一些怪异行为;</p>
</li>
<li><p>消除代码运行的一些不安全之处，保证代码运行的安全；</p>
</li>
<li><p>提高编译器效率，增加运行速度；</p>
</li>
<li><p>为未来新版本的<code>Javascript</code>做好铺垫。</p>
</li>
</ul>
<p>注：经过测试<code>IE6,7,8,9</code>均不支持严格模式。</p>
<h4 id="如何删除一个cookie"><a href="#如何删除一个cookie" class="headerlink" title="如何删除一个cookie"></a>如何删除一个cookie</h4><blockquote>
<p>1.将时间设为当前时间往前一点。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"></div><div class="line">date.setDate(date.getDate() - <span class="number">1</span>);<span class="comment">//真正的删除</span></div></pre></td></tr></table></figure>
<p><code>setDate()</code>方法用于设置一个月的某一天。</p>
<blockquote>
<p>2.expires的设置</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie = <span class="string">'user='</span>+ <span class="built_in">encodeURIComponent</span>(<span class="string">'name'</span>)  + <span class="string">';expires = '</span> + <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>)</div></pre></td></tr></table></figure>
<h4 id="lt-strong-gt-，-lt-em-gt-和-lt-b-gt-，-lt-i-gt-标签"><a href="#lt-strong-gt-，-lt-em-gt-和-lt-b-gt-，-lt-i-gt-标签" class="headerlink" title="&lt;strong&gt;，&lt;em&gt;和&lt;b&gt;，&lt;i&gt;标签"></a><code>&lt;strong&gt;</code>，<code>&lt;em&gt;</code>和<code>&lt;b&gt;</code>，<code>&lt;i&gt;</code>标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span> 标签和 <span class="tag">&lt;<span class="name">em</span>&gt;</span> 标签一样，用于强调文本，但它强调的程度更强一些。</div><div class="line"></div><div class="line">em 是 斜体强调标签，更强烈强调，表示内容的强调点。相当于html元素中的 <span class="tag">&lt;<span class="name">i</span>&gt;</span>...<span class="tag">&lt;/<span class="name">i</span>&gt;</span>;</div><div class="line"></div><div class="line"><span class="tag">&lt; <span class="attr">b</span> &gt;</span> <span class="tag">&lt; <span class="attr">i</span> &gt;</span>是视觉要素，分别表示无意义的加粗，无意义的斜体。</div><div class="line"></div><div class="line">em 和 strong 是表达要素(phrase elements)。</div></pre></td></tr></table></figure>
<h4 id="说说你对AMD和Commonjs的理解"><a href="#说说你对AMD和Commonjs的理解" class="headerlink" title="说说你对AMD和Commonjs的理解"></a>说说你对AMD和Commonjs的理解</h4><p><code>CommonJS</code>是服务器端模块的规范，Node.js采用了这个规范。<code>CommonJS</code>规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数。</p>
<p><code>AMD</code>推荐的风格通过返回一个对象做为模块对象，<code>CommonJS</code>的风格通过对<code>module.exports</code>或<code>exports</code>的属性赋值来达到暴露模块对象的目的。</p>
<blockquote>
<p>详情：<a href="https://segmentfault.com/a/1190000004888589" target="_blank" rel="external">也谈webpack及其开发模式</a></p>
</blockquote>
<h4 id="document-write-的用法"><a href="#document-write-的用法" class="headerlink" title="document.write()的用法"></a>document.write()的用法</h4><p><code>document.write()</code>方法可以用在两个方面：页面载入过程中用实时脚本创建页面内容，以及用延时脚本创建本窗口或新窗口的内容。</p>
<p><code>document.write</code>只能重绘整个页面。<code>innerHTML</code>可以重绘页面的一部分</p>
<h4 id="编写一个方法-求一个字符串的字节长度"><a href="#编写一个方法-求一个字符串的字节长度" class="headerlink" title="编写一个方法 求一个字符串的字节长度"></a>编写一个方法 求一个字符串的字节长度</h4><p>假设：一个英文字符占用一个字节，一个中文字符占用两个字节</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">GetBytes</span>(<span class="params">str</span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> len = str.length;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> bytes = len;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (str.charCodeAt(i) &gt; <span class="number">255</span>) bytes++;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> bytes;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">alert(GetBytes(<span class="string">"你好,as"</span>));</div></pre></td></tr></table></figure>
<h3 id="git-fetch和git-pull的区别"><a href="#git-fetch和git-pull的区别" class="headerlink" title="git fetch和git pull的区别"></a>git fetch和git pull的区别</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git pull：相当于是从远程获取最新版本并merge到本地</div><div class="line"></div><div class="line">git fetch：相当于是从远程获取最新版本到本地，不会自动merge</div></pre></td></tr></table></figure>
<h4 id="说说你对MVC和MVVM的理解"><a href="#说说你对MVC和MVVM的理解" class="headerlink" title="说说你对MVC和MVVM的理解"></a>说说你对MVC和MVVM的理解</h4><blockquote>
<p><code>MVC</code></p>
</blockquote>
<pre><code>View 传送指令到 Controller

Controller 完成业务逻辑后，要求 Model 改变状态

Model 将新的数据发送到 View，用户得到反馈
</code></pre><p>所有通信都是单向的。</p>
<p><code>Angular</code>它采用双向绑定（data-binding）：<code>View</code>的变动，自动反映在 <code>ViewModel</code>，反之亦然。</p>
<pre><code>组成部分Model、View、ViewModel

View：UI界面

ViewModel：它是View的抽象，负责View与Model之间信息转换，将View的Command传送到Model；

Model：数据访问层
</code></pre><h4 id="请解释什么是事件代理"><a href="#请解释什么是事件代理" class="headerlink" title="请解释什么是事件代理"></a>请解释什么是事件代理</h4><p>事件代理（Event Delegation），又称之为事件委托。是 <code>JavaScript</code> 中常用绑定事件的常用技巧。顾名思义，“事件代理”即是把原本需要绑定的事件委托给父元素，让父元素担当事件监听的职务。事件代理的原理是<code>DOM</code>元素的事件冒泡。使用事件代理的好处是可以提高性能。</p>
<h4 id="attribute和property的区别是什么？"><a href="#attribute和property的区别是什么？" class="headerlink" title="attribute和property的区别是什么？"></a>attribute和property的区别是什么？</h4><p><code>attribute</code>是<code>dom</code>元素在文档中作为<code>html</code>标签拥有的属性；</p>
<p><code>property</code>就是<code>dom</code>元素在<code>js</code>中作为对象拥有的属性。</p>
<p>所以：</p>
<p>对于<code>html</code>的标准属性来说，<code>attribute</code>和<code>property</code>是同步的，是会自动更新的，</p>
<p>但是对于自定义的属性来说，他们是不同步的，</p>
<h4 id="说说网络分层里七层模型是哪七层"><a href="#说说网络分层里七层模型是哪七层" class="headerlink" title="说说网络分层里七层模型是哪七层"></a>说说网络分层里七层模型是哪七层</h4><ul>
<li><p>应用层：应用层、表示层、会话层（从上往下）（<code>HTTP、FTP、SMTP、DNS</code>）</p>
</li>
<li><p>传输层（<code>TCP</code>和<code>UDP</code>）</p>
</li>
<li><p>网络层（<code>IP</code>）</p>
</li>
<li><p>物理和数据链路层（以太网）</p>
</li>
</ul>
<blockquote>
<p>每一层的作用如下：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">物理层：通过媒介传输比特,确定机械及电气规范（比特Bit）</div><div class="line">数据链路层：将比特组装成帧和点到点的传递（帧Frame）</div><div class="line">网络层：负责数据包从源到宿的传递和网际互连（包PackeT）</div><div class="line">传输层：提供端到端的可靠报文传递和错误恢复（段Segment）</div><div class="line">会话层：建立、管理和终止会话（会话协议数据单元SPDU）</div><div class="line">表示层：对数据进行翻译、加密和压缩（表示协议数据单元PPDU）</div><div class="line">应用层：允许访问OSI环境的手段（应用协议数据单元APDU）</div></pre></td></tr></table></figure>
<blockquote>
<p>各种协议</p>
</blockquote>
<p><code>ICMP协议</code>： 因特网控制报文协议。它是TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。<br><code>TFTP协议</code>： 是TCP/IP协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，提供不复杂、开销不大的文件传输服务。<br><code>HTTP协议</code>： 超文本传输协议，是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。<br><code>DHCP协议</code>： 动态主机配置协议，是一种让系统得以连接到网络上，并获取所需要的配置参数手段。</p>
<h4 id="说说mongoDB和MySQL的区别"><a href="#说说mongoDB和MySQL的区别" class="headerlink" title="说说mongoDB和MySQL的区别"></a>说说mongoDB和MySQL的区别</h4><p><code>MySQL</code>是传统的关系型数据库，<code>MongoDB</code>则是非关系型数据库</p>
<p> <code>mongodb</code>以<code>BSON</code>结构（二进制）进行存储，对海量数据存储有着很明显的优势。</p>
<p>对比传统关系型数据库,NoSQL有着非常显著的性能和扩展性优势，与关系型数据库相比，MongoDB的优点有：<br>①弱一致性（最终一致），更能保证用户的访问速度：<br>②文档结构的存储方式，能够更便捷的获取数据。</p>
<h4 id="讲讲304缓存的原理"><a href="#讲讲304缓存的原理" class="headerlink" title="讲讲304缓存的原理"></a>讲讲304缓存的原理</h4><p>服务器首先产生<code>ETag</code>，服务器可在稍后使用它来判断页面是否已经被修改。本质上，客户端通过将该记号传回服务器要求服务器验证其（客户端）缓存。</p>
<p><br></p>
<p>304是HTTP状态码，服务器用来标识这个文件没修改，不返回内容，浏览器在接收到个状态码后，会使用浏览器已缓存的文件</p>
<p><br></p>
<p>客户端请求一个页面（A）。 服务器返回页面A，并在给<code>A</code>加上一个<code>ETag</code>。 客户端展现该页面，并将页面连同<code>ETag</code>一起缓存。 客户再次请求页面<code>A</code>，并将上次请求时服务器返回的<code>ETag</code>一起传递给服务器。 服务器检查该<code>ETag</code>，并判断出该页面自上次客户端请求之后还未被修改，直接返回响应<code>304</code>（未修改——<code>Not Modified</code>）和一个空的响应体。</p>
<p><br></p>
<h4 id="什么样的前端代码是好的"><a href="#什么样的前端代码是好的" class="headerlink" title="什么样的前端代码是好的"></a>什么样的前端代码是好的</h4><p>高复用低耦合，这样文件小，好维护，而且好扩展。</p>
<h4 id="代码题"><a href="#代码题" class="headerlink" title="代码题"></a>代码题</h4><ul>
<li><a href="./readme.html">css代码题</a></li>
<li><a href="./readme.js">js代码题</a></li>
</ul>
<hr>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[I am back]]></title>
      <url>http://yoursite.com/2017/03/09/I-am-back/</url>
      <content type="html"><![CDATA[<p>重新回到hexo博客。<br><a id="more"></a><br>其实第一次接触hexo博客也有一段时间了，但是没有坚持下去，偶然发现github上面的主页需要翻墙才能访问了。上次重装系统，文件又没有备份，因此干脆重新搭建了个人技术博客，这次主要部署在coding.net和github上。后续会将之前的文章再找回来，本篇主要记录hexo博客中md文件的格式。</p>
<h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new &quot;new article&quot;</div></pre></td></tr></table></figure>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><table>
<thead>
<tr>
<th>Setting</th>
<th style="text-align:center">Description</th>
<th style="text-align:center">Default</th>
</tr>
</thead>
<tbody>
<tr>
<td>layout</td>
<td style="text-align:center">Layout</td>
<td style="text-align:center">post或page</td>
</tr>
<tr>
<td>title</td>
<td style="text-align:center">文章的标题</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>date</td>
<td style="text-align:center">创建日期</td>
<td style="text-align:center">文件的创建日期</td>
</tr>
<tr>
<td>updated</td>
<td style="text-align:center">修改日期</td>
<td style="text-align:center">文件的修改日期</td>
</tr>
<tr>
<td>comments</td>
<td style="text-align:center">是否开启评论</td>
<td style="text-align:center">true</td>
</tr>
<tr>
<td>tags</td>
<td style="text-align:center">标签</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>categories</td>
<td style="text-align:center">分类</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>permalink</td>
<td style="text-align:center">url中的名字</td>
<td style="text-align:center">文件名</td>
</tr>
</tbody>
</table>
<p>建议添加keywords和description 有利于搜索引擎搜索。</p>
<h3 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h3><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">categories:</div><div class="line">- 日记</div><div class="line">tags:</div><div class="line">- Hexo</div><div class="line">- node.js</div></pre></td></tr></table></figure></p>
<h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><p>草稿相当于很多博客都有的“私密文章”功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new draft &quot;new draft&quot;</div></pre></td></tr></table></figure></p>
<p>会在source/_drafts目录下生成一个new-draft.md文件。但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到_drafts目录之中。<br>如果你希望强行预览草稿，更改配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">render_drafts: true</div></pre></td></tr></table></figure></p>
<p>或者，如下方式启动server：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server --drafts</div></pre></td></tr></table></figure></p>
<p>下面这条命令可以把草稿变成文章，或者页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo publish [layout] &lt;filename&gt;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> other </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[齐材实习工作期间笔记]]></title>
      <url>http://yoursite.com/2016/06/23/%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="项目笔记"><a href="#项目笔记" class="headerlink" title="项目笔记"></a>项目笔记</h1><a id="more"></a>
<p></p><h2 id="供应商App"><a href="#供应商App" class="headerlink" title="供应商App"></a>供应商App</h2><p></p>
<p></p><h4 id="供应商类型"><a href="#供应商类型" class="headerlink" title="供应商类型"></a>供应商类型</h4><p></p>
<p></p><h5 id="配送类"><a href="#配送类" class="headerlink" title="配送类"></a>配送类</h5><pre><code>送仓配送类（采购单）<br>出库配送类（用户下单）<br></code></pre><h5 id="安装类"><a href="#安装类" class="headerlink" title="安装类"></a>安装类</h5><pre><code>测量安装类<br>安装类<br></code></pre><h3 id="模块："><a href="#模块：" class="headerlink" title="模块："></a>模块：</h3><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><pre><code>注册<br>登入<br>获取验证码<br>设置密码<br></code></pre><h4 id="订单模块（状态变更）"><a href="#订单模块（状态变更）" class="headerlink" title="订单模块（状态变更）"></a>订单模块（状态变更）</h4><pre><code>接单功能<br>订单分类（待配货、待发货、待收货、已完成、已取消）<br>待发货（选择司机）<br>待收货 （收货确认信息）<br>订单详情<br>     注：送仓类订单：到待发货，待发货不会选择司机<br></code></pre><h4 id="我的"><a href="#我的" class="headerlink" title="我的"></a>我的</h4><pre><code>司机模块管理（增删改查）<br>退出登入<br></code></pre><h2 id="司机端App"><a href="#司机端App" class="headerlink" title="司机端App"></a>司机端App</h2><h3 id="模块：-1"><a href="#模块：-1" class="headerlink" title="模块："></a>模块：</h3><h4 id="注册模块"><a href="#注册模块" class="headerlink" title="注册模块"></a>注册模块</h4><pre><code>登入<br>注册<br>获取验证码<br>设置密码<br>忘记密码（重复3、4步骤）<br></code></pre><h4 id="扫码"><a href="#扫码" class="headerlink" title="扫码"></a>扫码</h4><pre><code>二维码扫码（后台check这个订单是否在送货中状态）<br></code></pre><h4 id="签收模块"><a href="#签收模块" class="headerlink" title="签收模块"></a>签收模块</h4><pre><code>订单信息<br>上传图片<br>确认签收<br></code></pre><h4 id="我的-1"><a href="#我的-1" class="headerlink" title="我的"></a>我的</h4><pre><code>司机信息<br>当前版本<br>退出登入<br></code></pre><p></p>
<h2 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">–driver/</div><div class="line">   –mvc/</div><div class="line">       –controllers/（控制器文件夹）数据的请求和Dom节点的操作等</div><div class="line">       –models/</div><div class="line">           –Model.js 接口</div><div class="line">           –Store.js 缓存</div><div class="line">       –resources/</div><div class="line">           –common/(公用js)存放一些公用的js文件</div><div class="line">       –templates/（模板文件夹）存放插入html节点的模板</div><div class="line">       –config.js（requireJs的配置文件）模块的url等信息</div><div class="line">   –resource/（页面相关的资源文件）</div><div class="line">       –css/</div><div class="line">       –fonts/</div><div class="line">       –images/</div><div class="line">       –javascript/</div><div class="line">           –turtle.js(基础文件)封装了requireJS和underscore的一些必要方法</div><div class="line">           –zepto.js类似jQuery的js库，针对移动端设计的</div><div class="line">   –views/(视图)html文件</div></pre></td></tr></table></figure>
<h2 id="views-html模板（包含引入的文件）"><a href="#views-html模板（包含引入的文件）" class="headerlink" title="views html模板（包含引入的文件）"></a>views html模板（包含引入的文件）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;!– index.html –&gt;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=“utf-8”&gt;</div><div class="line">        &lt;meta name=“appBaseUrl” content=“../“ /&gt;</div><div class="line">        &lt;meta name=“viewport” content=“width=device-width, initial-scale=1,maximum-scale=1, user-scalable=no”&gt;</div><div class="line">        &lt;meta name=“apple-mobile-web-app-capable” content=“yes”&gt;</div><div class="line">        &lt;meta name=“apple-mobile-web-app-status-bar-style” content=“black”&gt;</div><div class="line">        &lt;meta name=“format-detection” content=“telephone=no, email=no”/&gt;</div><div class="line">        &lt;title&gt;&lt;/title&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;script type=“text/javascript” src=“../resource/javascript/mui.js” &gt;&lt;/script&gt;</div><div class="line">        &lt;script type=“text/turtle-config” data-config=“mvc/config.js” data-src=“mvc/controllers/index.js”&gt;&lt;/script&gt;</div><div class="line">        //配置文件的位置和controller的位置，不同页面中后者一般不同</div><div class="line">        &lt;script type=“text/javascript” src=“../resource/javascript/turtle.js?v=1458115342408”&gt;&lt;/script&gt;</div><div class="line">        //基础js文件</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p></p><h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;!– index.js –&gt;</div><div class="line">    define([‘BaseView’, ‘Model’, ‘util’], </div><div class="line">    &lt;!– 模块依赖的其他模块 –&gt;</div><div class="line">    function(BaseView, models, util) &#123;</div><div class="line">    &lt;!– 回调函数，参数为前面列出的依赖的其他模块的别名 –&gt;</div><div class="line">    var view = BaseView.extend(&#123;</div><div class="line">    &lt;!– 初始化模块 –&gt;</div><div class="line">        viewName: ‘index’,</div><div class="line">        events: &#123;</div><div class="line">            ‘click #id’: ‘fun’</div><div class="line">            &lt;!– ‘时间名 选择器’:’执行方法’ –&gt;</div><div class="line">        &#125;,</div><div class="line">        openView: function() &#123;</div><div class="line">        &lt;!– 模块定义的方法 –&gt;</div><div class="line">            &#125;,</div><div class="line">        androidBack: function() &#123;</div><div class="line">            &#125;,</div><div class="line">        onShow: function() &#123;</div><div class="line">            this.androidBack(); //安卓按回退</div><div class="line">            this.openView(); // 启动页面</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    this.viewIntance = view.getIntance();</div><div class="line">    &lt;!– 实例化模块 –&gt;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p></p>
<h2 id="templates的使用"><a href="#templates的使用" class="headerlink" title="templates的使用"></a>templates的使用</h2><h3 id="controller里面调用template模块"><a href="#controller里面调用template模块" class="headerlink" title="controller里面调用template模块"></a>controller里面调用template模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define([text!TemplatesMe’],function(tplMe) &#123;</div><div class="line">    &lt;!– text!为requireJS的插件，引用TemplatesMe里面的文本内容 –&gt;</div><div class="line">    ……</div><div class="line">    _.template(tplMe)(&#123;’info’: info&#125;);</div><div class="line">    &lt;!– 传入参数info，带到tplMe里面，生成字符串 –&gt;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="template文件"><a href="#template文件" class="headerlink" title="template文件"></a>template文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;section class=“me-warp”&gt;</div><div class="line">    &lt;div class=“user-warp”&gt;</div><div class="line">        &lt;div class=“me-state”&gt;</div><div class="line">            &lt;i class=“icon-me”&gt;&lt;/i&gt;</div><div class="line">            &lt;p&gt;王师傅 &lt;%= info.realName %&gt;&lt;/p&gt;</div><div class="line">            &lt;p&gt;工号：&lt;%= info.driverNo %&gt;&lt;/p&gt;</div><div class="line">            &lt;p&gt;车牌：&lt;%= info.carNumber %&gt;&lt;/p&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=“notice” id=“js_driver”&gt;</div><div class="line">        &lt;span&gt;当前版本&lt;%= plus.runtime.version %&gt;&lt;/span&gt;</div><div class="line">        &lt;i class=“list-more”&gt;&lt;/i&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=“btn-singout”&gt;</div><div class="line">        &lt;button class=“input-none” id=“js_singout”&gt;退出登录&lt;/button&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/section&gt;</div><div class="line"></div><div class="line">&lt;%= name%&gt; 插入值</div><div class="line">&lt;% var i = 0 %&gt; 执行括号内的代码</div><div class="line">&lt;%- %&gt; 转义</div></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">setPwd.setParam(&#123;</div><div class="line">    &apos;phone&apos; : phoneno,</div><div class="line">    &apos;pwd&apos;: pwd</div><div class="line">&#125;);</div><div class="line">&lt;!– 接口名称.setParam(&#123;&apos;name&apos;:value&#125;)传入参数进行数据请求 –&gt;</div><div class="line">setPwd.excute(function(data)&#123;</div><div class="line">&lt;!– 请求数据完毕后的操作 –&gt;</div><div class="line">    this.jump(&apos;views/login.html?&apos;)</div><div class="line">&#125;,function(err)&#123;</div><div class="line">&lt;!– 请求失败的操作 –&gt;</div><div class="line">    if(!err.msg)&#123;</div><div class="line">        err.msg = &apos;网络异常!&apos;;</div><div class="line">    &#125;</div><div class="line">    this.showToast(err.msg);</div><div class="line">&#125;,false,this);</div><div class="line">&lt;!– false（不对数据进行缓存），this执行上下文 –&gt;</div></pre></td></tr></table></figure>
<p>###<br>1.common文件夹里面的文件都是什么作用</p>
<blockquote>
<p>full.page.js:关于移动端页面滑动的一些方法<br>input.clear.js:输入框的清空（右侧X按钮），输入框的状态改变<br>iscroll.lite.js:页面滚动相关<br>md5.js:密码加密<br>mobiscroll.js:页面滚动、滑动相关<br>util.js:项目相关的一些方法</p>
</blockquote>
<h3 id="2-index-js"><a href="#2-index-js" class="headerlink" title="2.index.js"></a>2.index.js</h3><blockquote>
<p>mui.fire()：该方法可以触发目标窗口的自定义事件<br>mui.fire(目标窗口的webview,&apos;自定义事件名&apos;,{参数列表});<br><em>目标webview必须触发loaded事件后才能使用自定义事件</em><br>但是我并没有找到自定义事件是在哪定义的，在哪执行的。<br>androidBack:本来没有这个方法的时候，也可以实现双击返回键退出应用。为什么这里默认的没有了，而需要调用这个方法实现。</p>
</blockquote>
<h3 id="3-login-js"><a href="#3-login-js" class="headerlink" title="3.login.js"></a>3.login.js</h3><blockquote>
<p>$(e.currentTarget):e.currentTarget 本来已经表示触发事件的节点，$取出的是什么？要了解一下$()内容是不同类型的时候所代表的意义。</p>
</blockquote>
<p>*如果传入的本身就是选择器，则返回的是他本身。<br>以下来自官方文档中的例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">$(selector, [context])   ⇒ collection</div><div class="line">&lt;!– context为选择器的上下文，可选 –&gt;</div><div class="line">$(&lt;Zepto collection&gt;)   ⇒ same collection</div><div class="line">$(&lt;DOM nodes&gt;)   ⇒ collection</div><div class="line">$(htmlString)   ⇒ collection</div><div class="line">$(htmlString, attributes)   ⇒ collection v1.0+</div><div class="line">Zepto(function($)&#123; … &#125;) </div><div class="line">$(‘div’)  //=&gt; 所有页面中得div元素</div><div class="line">$(‘#foo’) //=&gt; ID 为 “foo” 的元素</div><div class="line"></div><div class="line">// 创建元素:</div><div class="line">$(“&lt;p&gt;Hello&lt;/p&gt;“) //=&gt; 新的p元素</div><div class="line">// 创建带有属性的元素:</div><div class="line">$(“&lt;p /&gt;“, &#123; text:”Hello”, id:”greeting”, css:&#123;color:’darkblue’&#125; &#125;)</div><div class="line">//=&gt; &lt;p id=greeting style=“color:darkblue”&gt;Hello&lt;/p&gt;</div><div class="line"></div><div class="line">// 当页面ready的时候，执行回调:</div><div class="line">Zepto(function($)&#123;</div><div class="line">  alert(‘Ready to Zepto!’)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>$.trim()去除字符串两端的空格。</p>
<h3 id="4-choose-driver-js"><a href="#4-choose-driver-js" class="headerlink" title="4.choose_driver.js"></a>4.choose_driver.js</h3><blockquote>
<p>接口名称.excute() 详细用法，特别注意this的作用（与上下文有关）。<br>$el.find(&apos;i&apos;).addClass(CLASS_CURR);<br>    $.el默认表示什么？<br>    find()用法。</p>
</blockquote>
<p>关于excute(),在turtle.js里面是这样定义的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">    取model数据</div><div class="line">    @param &#123;Function&#125; onComplete 取完的回调函</div><div class="line">    传入的第一个参数为model的数第二个数据为元数据，元数据为ajax下发时的ServerCode,Message等数</div><div class="line">    @param &#123;Function&#125; onError 发生错误时的回调</div><div class="line">    @param &#123;Boolean&#125; ajaxOnly 可选，默认为false当为true时只使用ajax调取数据</div><div class="line">     @param &#123;Boolean&#125; scope 可选，设定回调函数this指向的对象</div><div class="line">     @param &#123;Function&#125; onAbort 可选，但取消时会调用的函数</div><div class="line"> */</div><div class="line">excute: function (onComplete, onError, ajaxOnly, scope, onAbort)&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>定义在Baseview.extend()里面的方法customEvents 和在外面定义有什么区别。<br>extend():将两个对象合并成一个对象。</p>
<p>createdriver:这个应该没用</p>
<h3 id="5-distribution-order-js"><a href="#5-distribution-order-js" class="headerlink" title="5.distribution_order.js"></a>5.distribution_order.js</h3><blockquote>
<p>ws.evalJS(&quot;mui(&apos;#js_pullrefresh&apos;).pullRefresh().scrollTo(0,0,100)&quot;);<br>evalJS()是啥？scrollTo()是干啥的？</p>
</blockquote>
<p>evalJS:在Webview窗口中执行JS脚本<br>将JS脚本发送到Webview窗口中运行，可用于实现Webview窗口间的数据通讯</p>
<p>scrollTo():<br>1、把内容滚动到指定的坐标，第三个参数我猜是时间（单位毫秒）。<br>2、然后我猜是参数写错了，应该是两个参数。(y坐标，时间)(然后我猜错了，应该是第一种解释)</p>
<h3 id="6-driver-list-js"><a href="#6-driver-list-js" class="headerlink" title="6.driver_list.js"></a>6.driver_list.js</h3><blockquote>
<p>e.stopImmediatePropagation();<br>阻止事件冒泡<br>stopImmediatePropagation 的功能比stopPropagation 多一些，除了可以阻止事件冒泡之外，还可以把这个元素绑定的同类型事件也阻止了。</p>
</blockquote>
<h3 id="7-add-driver-js"><a href="#7-add-driver-js" class="headerlink" title="7.add_driver.js"></a>7.add_driver.js</h3><blockquote>
<p>var wc = plus.webview.currentWebview().opener();<br>currentWebview:获取当前页面所属的Webview窗口对象。<br>opener:获取当前窗口的创建者，通过open/create 创建者<br>create：创建新的Webview窗口<br>plus.webview.create( url, id, styles, extras );<br>    url: ( String ) 可选 新窗口加载的HTML页面地址<br>    id: ( String ) 可选 新窗口的标识<br>    styles: ( WebviewStyles ) 可选 创建Webview窗口的样式<br>    extras: ( JSON ) 可选 创建Webview窗口的额外扩展参数</p>
</blockquote>
<h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><blockquote>
<p>confirm:弹出系统确认对话框<br>plus.nativeUI.confirm( message, confirmCB, title, buttons );<br>message: ( String ) 必选 确认对话框上显示的内容<br>confirmCB: ( ConfirmCallback ) 可选 确认对话框关闭后的回调函数<br>回调函数中包括Event参数，可通过其index属性（Number类型）获取用户点击按钮的索引值。<br>title: ( String ) 可选 确认对话框上显示的标题<br>buttons: ( Array[ String ] ) 可选 确认对话框上显示的按钮<br>字符串数组，每项对应在确认对话框上显示一个按钮，用户点击后通过confirmCB返回用户点击按钮的在数组中的索引值。</p>
</blockquote>
<p>为什么事件用click 不用tap 二者有什么区别<br>项目中用了fastclick 解决延时的问题。<br><a href="http://blog.csdn.net/fengwizard/article/details/17384949" target="_blank" rel="external">参见CSDN博客</a></p>
<blockquote>
<p>1.两者都会在点击时触发，但是在手机WEB端，click会有 200~300 ms，所以请用tap代替click作为点击事件。<br>2.在使用zepto框架的tap来移动设备浏览器内的点击事件，来规避click事件的延迟响应时，有可能出现点透的情况，即点击会触发非当前层的点击事件。<br>3.singleTap和doubleTap 分别代表单次点击和双次点击</p>
</blockquote>
<p>调试输出的时候用console.log(JSON.stringify(target));<br>getQuery:获取url中的数据。</p>
]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
            <tag> 工作，笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[国外的前端面试题]]></title>
      <url>http://yoursite.com/2016/06/06/%E5%9B%BD%E5%A4%96%E7%9A%84%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="前端工作面试问题"><a href="#前端工作面试问题" class="headerlink" title="前端工作面试问题"></a>前端工作面试问题</h1><p>本文包含了一些用于考查候选者的前端面试问题。不建议对单个候选者问及每个问题 (那需要好几个小时)。只要从列表里挑选一些，就能帮助你考查候选者是否具备所需要的技能。</p>
<p><strong>备注：</strong> 这些问题中很多都是开放性的，可以引发有趣的讨论。这比直接的答案更能体现此人的能力。<br><a id="more"></a></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol>
<li><a href="#general-questions">常见问题</a></li>
<li><a href="#html-questions">HTML 相关问题</a></li>
<li><a href="#css-questions">CSS 相关问题</a></li>
<li><a href="#js-questions">JS 相关问题</a></li>
<li><a href="#testing-questions">测试相关问题</a></li>
<li><a href="#performance-questions">效能相关问题</a></li>
<li><a href="#network-questions">网络相关问题</a></li>
<li><a href="#coding-questions">代码相关问题</a></li>
<li><a href="#fun-questions">趣味问题</a></li>
</ol>
<h4 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h4><ul>
<li>你在昨天/本周学到了什么？</li>
<li>编写代码的哪些方面能够使你兴奋或感兴趣？</li>
<li>你最近遇到过什么技术挑战？你是如何解决的？</li>
<li>在制作一个网页应用或网站的过程中，你是如何考虑其 UI、安全性、高性能、SEO、可维护性以及技术因素的？</li>
<li>请谈谈你喜欢的开发环境。</li>
<li>你最熟悉哪一套版本控制系统？</li>
<li>你能描述当你制作一个网页的工作流程吗？</li>
<li>假若你有 5 个不同的样式文件 (stylesheets), 整合进网站的最好方式是?</li>
<li>你能描述渐进增强 (progressive enhancement) 和优雅降级 (graceful degradation) 之间的不同吗?</li>
<li>你如何对网站的文件和资源进行优化？</li>
<li>浏览器同一时间可以从一个域名下载多少资源？<ul>
<li>有什么例外吗？</li>
</ul>
</li>
<li>请说出三种减少页面加载时间的方法。(加载时间指感知的时间或者实际加载时间)</li>
<li>如果你参与到一个项目中，发现他们使用 Tab 来缩进代码，但是你喜欢空格，你会怎么做？</li>
<li>请写一个简单的幻灯效果页面。</li>
<li>如果今年你打算熟练掌握一项新技术，那会是什么？</li>
<li>请谈谈你对网页标准和标准制定机构重要性的理解。</li>
<li>什么是 FOUC (无样式内容闪烁)？你如何来避免 FOUC？</li>
<li>请解释什么是 ARIA 和屏幕阅读器 (screenreaders)，以及如何使网站实现无障碍访问 (accessible)。</li>
<li>请解释 CSS 动画和 JavaScript 动画的优缺点。</li>
<li>什么使 CORS，以及其要解决的问题？</li>
</ul>
<h4 id="HTML-相关问题："><a href="#HTML-相关问题：" class="headerlink" title="HTML 相关问题："></a>HTML 相关问题：</h4><ul>
<li><code>doctype</code>(文档类型) 的作用是什么？</li>
<li>浏览器标准模式 (standards mode) 、几乎标准模式（almost standards mode）和怪异模式 (quirks mode) 之间的区别是什么？</li>
<li>HTML 和 XHTML 有什么区别？</li>
<li>如果页面使用 ‘application/xhtml+xml’ 会有什么问题吗？</li>
<li>如果网页内容需要支持多语言，你会怎么做？</li>
<li>在设计和开发多语言网站时，有哪些问题你必须要考虑？</li>
<li>使用 <code>data-</code> 属性的好处是什么？</li>
<li>如果把 HTML5 看作做一个开放平台，那它的构建模块有哪些？</li>
<li>请描述 <code>cookies</code>、<code>sessionStorage</code> 和 <code>localStorage</code> 的区别。</li>
<li>请解释 <code>&lt;script&gt;</code>、<code>&lt;script async&gt;</code> 和 <code>&lt;script defer&gt;</code> 的区别。</li>
<li>为什么通常推荐将 CSS <code>&lt;link&gt;</code> 放置在 <code>&lt;head&gt;&lt;/head&gt;</code> 之间，而将 JS <code>&lt;script&gt;</code> 放置在 <code>&lt;/body&gt;</code> 之前？你知道有哪些例外吗？</li>
<li>什么是渐进式渲染 (progressive rendering)？</li>
<li>你用过哪些不同的 HTML 模板语言？</li>
</ul>
<h4 id="CSS-相关问题："><a href="#CSS-相关问题：" class="headerlink" title="CSS 相关问题："></a>CSS 相关问题：</h4><ul>
<li>CSS 中类 (classes) 和 ID 的区别。</li>
<li>请问 “resetting” 和 “normalizing” CSS 之间的区别？你会如何选择，为什么？</li>
<li>请解释浮动 (Floats) 及其工作原理。</li>
<li>描述<code>z-index</code>和叠加上下文是如何形成的。</li>
<li>请描述 BFC(Block Formatting Context) 及其如何工作。</li>
<li>列举不同的清除浮动的技巧，并指出它们各自适用的使用场景。</li>
<li>请解释 CSS sprites，以及你要如何在页面或网站中实现它。</li>
<li>你最喜欢的图片替换方法是什么，你如何选择使用。</li>
<li>你会如何解决特定浏览器的样式问题？</li>
<li>如何为有功能限制的浏览器提供网页？</li>
<li>你会使用哪些技术和处理方法？</li>
<li>有哪些的隐藏内容的方法 (如果同时还要保证屏幕阅读器可用呢)？</li>
<li>你用过栅格系统 (grid system) 吗？如果使用过，你最喜欢哪种？</li>
<li>你用过媒体查询，或针对移动端的布局/CSS 吗？</li>
<li>你熟悉 SVG 样式的书写吗？</li>
<li>如何优化网页的打印样式？</li>
<li>在书写高效 CSS 时会有哪些问题需要考虑？</li>
<li>使用 CSS 预处理器的优缺点有哪些？</li>
<li>请描述你曾经使用过的 CSS 预处理器的优缺点。</li>
<li>如果设计中使用了非标准的字体，你该如何去实现？</li>
<li>请解释浏览器是如何判断元素是否匹配某个 CSS 选择器？</li>
<li>请描述伪元素 (pseudo-elements) 及其用途。</li>
<li>请解释你对盒模型的理解，以及如何在 CSS 中告诉浏览器使用不同的盒模型来渲染你的布局。</li>
<li>请解释<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* &#123; box-sizing: border-box; &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>的作用, 并且说明使用它有什么好处？</p>
<ul>
<li>请罗列出你所知道的 display 属性的全部值</li>
<li>请解释 inline 和 inline-block 的区别？</li>
<li>请解释 relative、fixed、absolute 和 static 元素的区别</li>
<li>CSS 中字母 ‘C’ 的意思是叠层 (Cascading)。请问在确定样式的过程中优先级是如何决定的 (请举例)？如何有效使用此系统？</li>
<li>你在开发或生产环境中使用过哪些 CSS 框架？你觉得应该如何改善他们？</li>
<li>请问你有尝试过 CSS Flexbox 或者 Grid 标准规格吗？</li>
<li>为什么响应式设计 (responsive design) 和自适应设计 (adaptive design) 不同？</li>
<li>你有兼容 retina 屏幕的经历吗？如果有，在什么地方使用了何种技术？</li>
<li>请问为何要使用 <code>translate()</code> 而非 <em>absolute positioning</em>，或反之的理由？为什么？</li>
</ul>
<h4 id="JS-相关问题："><a href="#JS-相关问题：" class="headerlink" title="JS 相关问题："></a>JS 相关问题：</h4><ul>
<li>请解释事件代理 (event delegation)。</li>
<li>请解释 JavaScript 中 <code>this</code> 是如何工作的。</li>
<li>请解释原型继承 (prototypal inheritance) 的原理。</li>
<li>你怎么看 AMD vs. CommonJS？</li>
<li>请解释为什么接下来这段代码不是 IIFE (立即调用的函数表达式)：<code>function foo(){ }();</code>.<ul>
<li>要做哪些改动使它变成 IIFE?</li>
</ul>
</li>
<li>描述以下变量的区别：<code>null</code>，<code>undefined</code> 或 <code>undeclared</code>？<ul>
<li>该如何检测它们？</li>
</ul>
</li>
<li>什么是闭包 (closure)，如何使用它，为什么要使用它？</li>
<li>请举出一个匿名函数的典型用例？</li>
<li>你是如何组织自己的代码？是使用模块模式，还是使用经典继承的方法？</li>
<li>请指出 JavaScript 宿主对象 (host objects) 和原生对象 (native objects) 的区别？</li>
<li>请指出以下代码的区别：<code>function Person(){}</code>、<code>var person = Person()</code>、<code>var person = new Person()</code>？</li>
<li><code>.call</code> 和 <code>.apply</code> 的区别是什么？</li>
<li>请解释 <code>Function.prototype.bind</code>？</li>
<li>在什么时候你会使用 <code>document.write()</code>？</li>
<li>请指出浏览器特性检测，特性推断和浏览器 UA 字符串嗅探的区别？</li>
<li>请尽可能详尽的解释 Ajax 的工作原理。</li>
<li>使用 Ajax 都有哪些优劣？</li>
<li>请解释 JSONP 的工作原理，以及它为什么不是真正的 Ajax。</li>
<li>你使用过 JavaScript 模板系统吗？<ul>
<li>如有使用过，请谈谈你都使用过哪些库？</li>
</ul>
</li>
<li>请解释变量声明提升 (hoisting)。</li>
<li>请描述事件冒泡机制 (event bubbling)。</li>
<li>“attribute” 和 “property” 的区别是什么？</li>
<li>为什么扩展 JavaScript 内置对象不是好的做法？</li>
<li>请指出 document load 和 document DOMContentLoaded 两个事件的区别。</li>
<li><code>==</code> 和 <code>===</code> 有什么不同？</li>
<li>请解释 JavaScript 的同源策略 (same-origin policy)。</li>
<li><p>如何实现下列代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].duplicator(); <span class="comment">// [1,2,3,4,5,1,2,3,4,5]</span></div></pre></td></tr></table></figure>
</li>
<li><p>什么是三元表达式 (Ternary expression)？“三元 (Ternary)” 表示什么意思？</p>
</li>
<li>什么是 <code>&quot;use strict&quot;;</code> ? 使用它的好处和坏处分别是什么？</li>
<li>请实现一个遍历至 <code>100</code> 的 for loop 循环，在能被 <code>3</code> 整除时输出 <strong>“fizz”</strong>，在能被 <code>5</code> 整除时输出 <strong>“buzz”</strong>，在能同时被 <code>3</code> 和 <code>5</code> 整除时输出 <strong>“fizzbuzz”</strong>。</li>
<li>为何通常会认为保留网站现有的全局作用域 (global scope) 不去改变它，是较好的选择？</li>
<li>为何你会使用 <code>load</code> 之类的事件 (event)？此事件有缺点吗？你是否知道其他替代品，以及为何使用它们？</li>
<li>请解释什么是单页应用 (single page app), 以及如何使其对搜索引擎友好 (SEO-friendly)。</li>
<li>What is the extent of your experience with Promises and/or their polyfills?</li>
<li>使用 Promises 而非回调 (callbacks) 优缺点是什么？</li>
<li>使用一种可以编译成 JavaScript 的语言来写 JavaScript 代码有哪些优缺点？</li>
<li>你使用哪些工具和技术来调试 JavaScript 代码？</li>
<li>你会使用怎样的语言结构来遍历对象属性 (object properties) 和数组内容？</li>
<li>请解释可变 (mutable) 和不变 (immutable) 对象的区别。<ul>
<li>请举出 JavaScript 中一个不变性对象 (immutable object) 的例子？</li>
<li>不变性 (immutability) 有哪些优缺点？</li>
<li>如何用你自己的代码来实现不变性 (immutability)？</li>
</ul>
</li>
<li>请解释同步 (synchronous) 和异步 (asynchronous) 函数的区别。</li>
<li>什么是事件循环 (event loop)？<ul>
<li>请问调用栈 (call stack) 和任务队列 (task queue) 的区别是什么？</li>
</ul>
</li>
<li>解释 <code>function foo() {}</code> 与 <code>var foo = function() {}</code> 用法的区别</li>
</ul>
<h4 id="测试相关问题："><a href="#测试相关问题：" class="headerlink" title="测试相关问题："></a>测试相关问题：</h4><ul>
<li>对代码进行测试的有什么优缺点？</li>
<li>你会用什么工具测试你的代码功能？</li>
<li>单元测试与功能/集成测试的区别是什么？</li>
<li>代码风格 linting 工具的作用是什么？</li>
</ul>
<h4 id="效能相关问题："><a href="#效能相关问题：" class="headerlink" title="效能相关问题："></a>效能相关问题：</h4><ul>
<li>你会用什么工具来查找代码中的性能问题？</li>
<li>你会用什么方式来增强网站的页面滚动效能？</li>
<li>请解释 layout、painting 和 compositing 的区别。</li>
</ul>
<h4 id="网络相关问题："><a href="#网络相关问题：" class="headerlink" title="网络相关问题："></a>网络相关问题：</h4><ul>
<li>为什么传统上利用多个域名来提供网站资源会更有效？</li>
<li>请尽可能完整得描述从输入 URL 到整个网页加载完毕及显示在屏幕上的整个流程。</li>
<li>Long-Polling、Websockets 和 Server-Sent Event 之间有什么区别？</li>
<li>请描述以下 request 和 response headers：<ul>
<li>Diff. between Expires, Date, Age and If-Modified-…</li>
<li>Do Not Track</li>
<li>Cache-Control</li>
<li>Transfer-Encoding</li>
<li>ETag</li>
<li>X-Frame-Options</li>
</ul>
</li>
<li>什么是 HTTP method？请罗列出你所知道的所有 HTTP method，并给出解释。</li>
</ul>
<h4 id="代码相关的问题："><a href="#代码相关的问题：" class="headerlink" title="代码相关的问题："></a>代码相关的问题：</h4><p><em>问题：<code>foo</code>的值是什么？</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="number">10</span> + <span class="string">'20'</span>;</div></pre></td></tr></table></figure></p>
<p><em>问题：如何实现以下函数？</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">add(<span class="number">2</span>, <span class="number">5</span>); <span class="comment">// 7</span></div><div class="line">add(<span class="number">2</span>)(<span class="number">5</span>); <span class="comment">// 7</span></div></pre></td></tr></table></figure></p>
<p><em>问题：下面的语句的返回值是什么？</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"i'm a lasagna hog"</span>.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</div></pre></td></tr></table></figure></p>
<p><em>问题：<code>window.foo</code>的值是什么？</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">( <span class="built_in">window</span>.foo || ( <span class="built_in">window</span>.foo = <span class="string">"bar"</span> ) );</div></pre></td></tr></table></figure></p>
<p><em>问题：下面两个 alert 的结果是什么？</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="string">"Hello"</span>;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> bar = <span class="string">" World"</span>;</div><div class="line">  alert(foo + bar);</div><div class="line">&#125;)();</div><div class="line">alert(foo + bar);</div></pre></td></tr></table></figure></p>
<p><em>问题：<code>foo.length</code>的值是什么？</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = [];</div><div class="line">foo.push(<span class="number">1</span>);</div><div class="line">foo.push(<span class="number">2</span>);</div></pre></td></tr></table></figure></p>
<p><em>问题：<code>foo.x</code>的值是什么？</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = &#123;<span class="attr">n</span>: <span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">var</span> bar = foo;</div><div class="line">foo.x = foo = &#123;<span class="attr">n</span>: <span class="number">2</span>&#125;;</div></pre></td></tr></table></figure></p>
<p><em>问题：下面代码的输出是什么？</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'one'</span>);</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'two'</span>);</div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'three'</span>);</div></pre></td></tr></table></figure></p>
<h4 id="趣味问题："><a href="#趣味问题：" class="headerlink" title="趣味问题："></a>趣味问题：</h4><ul>
<li>你最近写过什么的很酷的项目吗？</li>
<li>在你使用的开发工具中，最喜欢哪些方面？</li>
<li>谁使你踏足了前端开发领域？</li>
<li>你有什么业余项目吗？是哪种类型的？</li>
<li>你最爱的 IE 特性是什么？</li>
<li>你对咖啡有没有什么喜好？</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 面试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> web </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[面试题]]></title>
      <url>http://yoursite.com/2016/06/06/%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>#前端开发面试题</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a><a name="preface">前言</a></h2><p>本文由我收集总结了一些前端面试题，初学者阅后也要用心钻研其中的原理，重要知识需要系统学习、透彻学习，形成自己的知识链。万不可投机取巧，临时抱佛脚只求面试侥幸混过关是错误的！也是不可能的！不可能的！不可能的！</p>
<p>前端还是一个年轻的行业，新的行业标准， 框架， 库都不断在更新和新增，正如赫门在2015深JS大会上的《前端服务化之路》主题演讲中说的一句话：“每18至24个月，前端都会难一倍”，这些变化使前端的能力更加丰富、创造的应用也会更加完美。所以关注各种前端技术，跟上快速变化的节奏，也是身为一个前端程序员必备的技能之一。</p>
<p>最近也收到许多微博私信的鼓励和更正题目信息，后面会经常更新题目和答案到<a href="http://markyun.github.io/" target="_blank" rel="external">github博客</a>。希望前端er达到既能使用也会表达，对理论知识有自己的理解。可根据下面的知识点一个一个去进阶学习，形成自己的职业技能链。<br><a id="more"></a></p>
<p><strong>面试有几点需注意：(来源<a href="http://weibo.com/wintercn" title="微博：寒冬winter" target="_blank" rel="external">寒冬winter</a> 老师，github:@wintercn)</strong></p>
<ol>
<li><p>面试题目： 根据你的等级和职位的变化，入门级到专家级，广度和深度都会有所增加。</p>
</li>
<li><p>题目类型： 理论知识、算法、项目细节、技术视野、开放性题、工作案例。</p>
</li>
<li><p>细节追问： 可以确保问到你开始不懂或面试官开始不懂为止，这样可以大大延展题目的区分度和深度，知道你的实际能力。因为这种知识关联是长时期的学习，临时抱佛脚绝对是记不住的。</p>
</li>
<li><p>回答问题再棒，面试官（可能是你面试职位的直接领导），会考虑我要不要这个人做我的同事？所以态度很重要、除了能做事，还要会做人。（感觉更像是相亲( •̣̣̣̣̣̥́௰•̣̣̣̣̣̥̀ )）</p>
</li>
<li><p>资深的前端开发能把absolute和relative弄混，这样的人不要也罢，因为团队需要的是：你这个人具有可以依靠的才能（靠谱）。</p>
</li>
</ol>
<p><strong>前端开发知识点：</strong></p>
<pre><code>HTML&amp;CSS：
    对Web标准的理解、浏览器内核差异、兼容性、hack、CSS基本功：布局、盒子模型、选择器优先级、HTML5、CSS3、Flexbox

JavaScript：
    数据类型、运算、对象、Function、继承、闭包、作用域、原型链、事件、RegExp、JSON、Ajax、DOM、BOM、内存泄漏、跨域、异步装载、模板引擎、前端MVC、路由、模块化、Canvas、ECMAScript 6、Nodejs

其他：
    移动端、响应式、自动化构建、HTTP、离线存储、WEB安全、优化、重构、团队协作、可维护、易用性、SEO、UED、架构、职业生涯、快速学习能力
</code></pre><p>作为一名前端工程师，<strong>无论工作年头长短都应该掌握的知识点</strong>：</p>
<p>此条由 王子墨 发表在 <a href="http://lab.yuanwai.wang/" target="_blank" rel="external">攻城师的实验室</a></p>
<pre><code>1、DOM结构 —— 两个节点之间可能存在哪些关系以及如何在节点之间任意移动。

2、DOM操作 —— 如何添加、移除、移动、复制、创建和查找节点等。

3、事件 —— 如何使用事件，以及IE和标准DOM事件模型之间存在的差别。

4、XMLHttpRequest —— 这是什么、怎样完整地执行一次GET请求、怎样检测错误。

5、严格模式与混杂模式 —— 如何触发这两种模式，区分它们有何意义。

6、盒模型 —— 外边距、内边距和边框之间的关系，及IE8以下版本的浏览器中的盒模型

7、块级元素与行内元素 —— 怎么用CSS控制它们、以及如何合理的使用它们

8、浮动元素 —— 怎么使用它们、它们有什么问题以及怎么解决这些问题。

9、HTML与XHTML —— 二者有什么区别，你觉得应该使用哪一个并说出理由。

10、JSON —— 作用、用途、设计结构。
</code></pre><p><strong>备注：</strong></p>
<pre><code>根据自己需要选择性阅读，面试题是对理论知识的总结，让自己学会应该如何表达。

资料答案不够正确和全面，欢迎欢迎Star和提交issues。

格式不断修改更新中。

更新记录：
2016年3月25日：新增ECMAScript6 相关问题
</code></pre><p>###更新时间:  2016-3-25</p>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a><a name="html">HTML</a></h2><ul>
<li><p>Doctype作用？标准模式与兼容模式各有什么区别?</p>
<pre><code>（1）、&lt;!DOCTYPE&gt;声明位于位于HTML文档中的第一行，处于 &lt;html&gt; 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。

（2）、标准模式的排版 和JS运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。
</code></pre></li>
<li><p>HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？</p>
<pre><code>HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为（让浏览器按照它们应该的方式来运行）；

而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型。
</code></pre></li>
<li><p>行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</p>
<pre><code>首先：CSS规范规定，每个元素都有display属性，确定该元素的类型，每个元素都有默认的display值，如div的display默认值为“block”，则为“块级”元素；span默认display属性值为“inline”，是“行内”元素。

（1）行内元素有：a b span img input select strong（强调的语气）
（2）块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p

（3）常见的空元素：
    &lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;
    鲜为人知的是：
    &lt;area&gt; &lt;base&gt; &lt;col&gt; &lt;command&gt; &lt;embed&gt; &lt;keygen&gt; &lt;param&gt; &lt;source&gt; &lt;track&gt; &lt;wbr&gt;

不同浏览器（版本）、HTML4（5）、CSS2等实际略有差异
参考: http://stackoverflow.com/questions/6867254/browsers-default-css-for-html-elements
</code></pre></li>
</ul>
<ul>
<li>页面导入样式时，使用link和@import有什么区别？</li>
</ul>
<pre><code>（1）link属于XHTML标签，除了加载CSS外，还能用于定义RSS, 定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS;

（2）页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载;

（3）import是CSS2.1 提出的，只在IE5以上才能被识别，而link是XHTML标签，无兼容问题;
</code></pre><ul>
<li><p>介绍一下你对浏览器内核的理解？</p>
<pre><code>主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎。
渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。

JS引擎则：解析和执行javascript来实现网页的动态效果。

最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。
</code></pre></li>
<li><p>常见的浏览器内核有哪些？</p>
<pre><code>  Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]
  Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等
  Presto内核：Opera7及以上。      [Opera内核原为：Presto，现为：Blink;]
  Webkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]

详细文章：[浏览器内核的解析和对比](http://www.cnblogs.com/fullhouse/archive/2011/12/19/2293455.html)
</code></pre></li>
</ul>
<ul>
<li>html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和<br>HTML5？</li>
</ul>
<pre><code>* HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。
      绘画 canvas;
      用于媒介回放的 video 和 audio 元素;
      本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失;
      sessionStorage 的数据在浏览器关闭后自动删除;
      语意化更好的内容元素，比如 article、footer、header、nav、section;
      表单控件，calendar、date、time、email、url、search;
      新的技术webworker, websocket, Geolocation;

  移除的元素：
      纯表现的元素：basefont，big，center，font, s，strike，tt，u;
      对可用性产生负面影响的元素：frame，frameset，noframes；

* 支持HTML5新标签：
     IE8/IE7/IE6支持通过document.createElement方法产生的标签，
       可以利用这一特性让这些浏览器支持HTML5新标签，
       浏览器支持新标签后，还需要添加标签默认的样式。

     当然也可以直接使用成熟的框架、比如html5shim;
     &lt;!--[if lt IE 9]&gt;
        &lt;script&gt; src=&quot;http://html5shim.googlecode.com/svn/trunk/html5.js&quot;&lt;/script&gt;
     &lt;![endif]--&gt;

* 如何区分HTML5： DOCTYPE声明\新增的结构元素\功能元素
</code></pre><ul>
<li><p>简述一下你对HTML语义化的理解？</p>
<pre><code>用正确的标签做正确的事情。
html语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;
即使在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的;
搜索引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO;
使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。
</code></pre></li>
</ul>
<ul>
<li><p>HTML5的离线储存怎么使用，工作原理能不能解释一下？</p>
<pre><code>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件。
原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示。
</code></pre></li>
</ul>
<pre><code>    如何使用：
    1、页面头部像下面一样加入一个manifest的属性；
    2、在cache.manifest文件的编写离线存储的资源；
        CACHE MANIFEST
        #v0.11
        CACHE:
        js/app.js
        css/style.css
        NETWORK:
        resourse/logo.png
        FALLBACK:
        / /offline.html
    3、在离线状态时，操作window.applicationCache进行需求实现。

详细的使用请参考：

[HTML5 离线缓存-manifest简介](http://yanhaijing.com/html/2014/12/28/html5-manifest/)

[有趣的HTML5：离线存储](http://segmentfault.com/a/1190000000732617)
</code></pre><ul>
<li><p>浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢？</p>
<pre><code>在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。
离线的情况下，浏览器就直接使用离线存储的资源。
</code></pre><p>  详细请参考：<a href="http://segmentfault.com/a/1190000000732617" target="_blank" rel="external">有趣的HTML5：离线存储</a></p>
</li>
<li><p>请描述一下 cookies，sessionStorage 和 localStorage 的区别？</p>
<pre><code>cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。
cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递。
sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。

存储大小：
    cookie数据大小不能超过4k。
    sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。

有期时间：
    localStorage    存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；
    sessionStorage  数据在当前浏览器窗口关闭后自动删除。
    cookie          设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭
</code></pre></li>
<li><p>iframe有那些缺点？</p>
<pre><code>*iframe会阻塞主页面的Onload事件；
*搜索引擎的检索程序无法解读这种页面，不利于SEO;

*iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。

使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript
动态给iframe添加src属性值，这样可以绕开以上两个问题。
</code></pre></li>
<li><p>Label的作用是什么？是怎么用的？</p>
<pre><code>label标签来定义表单控制间的关系,当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单控件上。

&lt;label for=&quot;Name&quot;&gt;Number:&lt;/label&gt;
&lt;input type=&quot;text&quot; name=&quot;Name&quot; id=&quot;Name&quot;/&gt;

&lt;label&gt;Date:&lt;input type=&quot;text&quot; name=&quot;B&quot;/&gt;&lt;/label&gt;
</code></pre></li>
<li><p>HTML5的form如何关闭自动完成功能？</p>
<pre><code>给不想要提示的 form 或某个 input 设置为 autocomplete=off。
</code></pre></li>
</ul>
<ul>
<li><p>如何实现浏览器内多个标签页之间的通信? (阿里)</p>
<pre><code>WebSocket、SharedWorker；
也可以调用localstorge、cookies等本地存储方式；

localstorge另一个浏览上下文里被添加、修改或删除时，它都会触发一个事件，
我们通过监听事件，控制它的值来进行页面信息通信；
注意quirks：Safari 在无痕模式下设置localstorge值时会抛出 QuotaExceededError 的异常；
</code></pre></li>
<li><p>webSocket如何兼容低浏览器？(阿里)</p>
<pre><code>Adobe Flash Socket 、
ActiveX HTMLFile (IE) 、
基于 multipart 编码发送 XHR 、
基于长轮询的 XHR
</code></pre></li>
<li><p>页面可见性（Page Visibility API） 可以有哪些用途？</p>
<pre><code>通过 visibilityState 的值检测页面当前是否可见，以及打开网页的时间等;
在页面被切换到其他后台进程的时候，自动暂停音乐或视频的播放；
</code></pre></li>
</ul>
<ul>
<li><p>如何在页面上实现一个圆形的可点击区域？</p>
<pre><code>1、map+area或者svg
2、border-radius
3、纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等
</code></pre></li>
<li><p>实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果。</p>
<pre><code>&lt;div style=&quot;height:1px;overflow:hidden;background:red&quot;&gt;&lt;/div&gt;
</code></pre></li>
</ul>
<ul>
<li><p>网页验证码是干嘛的，是为了解决什么安全问题。</p>
<pre><code>区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水；
有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试。
</code></pre></li>
<li><p>title与h1的区别、b与strong的区别、i与em的区别？</p>
<pre><code>title属性没有明确意义只表示是个标题，H1则表示层次明确的标题，对页面信息的抓取也有很大的影响；

strong是标明重点内容，有语气加强的含义，使用阅读设备阅读网络时：&lt;strong&gt;会重读，而&lt;B&gt;是展示强调内容。

i内容展示为斜体，em表示强调的文本；

Physical Style Elements -- 自然样式标签
b, i, u, s, pre
Semantic Style Elements -- 语义样式标签
strong, em, ins, del, code
应该准确使用语义样式标签, 但不能滥用, 如果不能确定时首选使用自然样式标签。
</code></pre></li>
</ul>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a><a name="css">CSS</a></h2><ul>
<li><p>介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</p>
<pre><code>（1）有两种， IE 盒子模型、W3C 盒子模型；
（2）盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)；
（3）区  别： IE的content部分把 border 和 padding计算了进去;
</code></pre></li>
</ul>
<ul>
<li><p>CSS选择符有哪些？哪些属性可以继承？</p>
<pre><code>*   1.id选择器（ # myid）
    2.类选择器（.myclassname）
    3.标签选择器（div, h1, p）
    4.相邻选择器（h1 + p）
    5.子选择器（ul &gt; li）
    6.后代选择器（li a）
    7.通配符选择器（ * ）
    8.属性选择器（a[rel = &quot;external&quot;]）
    9.伪类选择器（a:hover, li:nth-child）

*   可继承的样式： font-size font-family color, UL LI DL DD DT;

*   不可继承的样式：border padding margin width height ;
</code></pre></li>
</ul>
<ul>
<li><p>CSS优先级算法如何计算？</p>
<pre><code>*   优先级就近原则，同权重情况下样式定义最近者为准;
*   载入样式以最后载入的定位为准;

优先级为:
    同权重: 内联样式表（标签内部）&gt; 嵌入样式表（当前文件中）&gt; 外部样式表（外部文件中）。
    !important &gt;  id &gt; class &gt; tag
    important 比 内联优先级高
</code></pre></li>
<li><p>CSS3新增伪类有那些？</p>
<pre><code>举例：
p:first-of-type    选择属于其父元素的首个 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。
p:last-of-type    选择属于其父元素的最后 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。
p:only-of-type    选择属于其父元素唯一的 &lt;p&gt; 元素的每个 &lt;p&gt; 元素。
p:only-child    选择属于其父元素的唯一子元素的每个 &lt;p&gt; 元素。
p:nth-child(2)    选择属于其父元素的第二个子元素的每个 &lt;p&gt; 元素。

:after            在元素之前添加内容,也可以用来做清除浮动。
:before            在元素之后添加内容
 :enabled          
:disabled         控制表单控件的禁用状态。
:checked        单选框或复选框被选中。
</code></pre></li>
<li><p>如何居中div？</p>
</li>
</ul>
<pre><code>*  水平居中：给div设置一个宽度，然后添加margin:0 auto属性

        div{
            width:200px;
            margin:0 auto;
         }

*  让绝对定位的div居中

        div {
            position: absolute;
            width: 300px;
            height: 300px;
            margin: auto;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            background-color: pink;    /* 方便看效果 */
        }

*  水平垂直居中一

        确定容器的宽高 宽500 高 300 的层
        设置层的外边距

        div {
            position: relative;        /* 相对定位或绝对定位均可 */
            width:500px;
            height:300px;
            top: 50%;
            left: 50%;
            margin: -150px 0 0 -250px;         /* 外边距为自身宽高的一半 */
            background-color: pink;         /* 方便看效果 */

         }

*  水平垂直居中二

        未知容器的宽高，利用 `transform` 属性

        div {
            position: absolute;        /* 相对定位或绝对定位均可 */
            width:500px;
            height:300px;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: pink;         /* 方便看效果 */

        }

*  水平垂直居中三

        利用 flex 布局
        实际使用时应考虑兼容性

        .container {
            display: flex;
            align-items: center;         /* 垂直居中 */
            justify-content: center;    /* 水平居中 */

        }
        .container div {
            width: 100px;
            height: 100px;
            background-color: pink;        /* 方便看效果 */
        }  
</code></pre><ul>
<li><p>display有哪些值？说明他们的作用。</p>
<pre><code>block           块类型。默认宽度为父元素宽度，可设置宽高，换行显示。
none            缺省值。象行内元素类型一样显示。
inline          行内元素类型。默认宽度为内容宽度，不可设置宽高，同行显示。
inline-block  默认宽度为内容宽度，可以设置宽高，同行显示。
list-item       象块类型元素一样显示，并添加样式列表标记。
table           此元素会作为块级表格来显示。
inherit         规定应该从父元素继承 display 属性的值。
</code></pre></li>
</ul>
<ul>
<li><p>position的值relative和absolute定位原点是？</p>
<pre><code>absolute
  生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。
fixed （老IE不支持）
  生成绝对定位的元素，相对于浏览器窗口进行定位。
relative
  生成相对定位的元素，相对于其正常位置进行定位。
static
  默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。
inherit
  规定从父元素继承 position 属性的值。
</code></pre></li>
<li><p>CSS3有哪些新特性？</p>
<pre><code>新增各种CSS选择器    （: not(.input)：所有 class 不是“input”的节点）
  圆角            （border-radius:8px）
多列布局        （multi-column layout）
阴影和反射    （Shadow\Reflect）
文字特效        （text-shadow、）
文字渲染        （Text-decoration）
线性渐变        （gradient）
旋转             （transform）
缩放,定位,倾斜,动画,多背景
例如:transform:\scale(0.85,0.90)\ translate(0px,-30px)\ skew(-9deg,0deg)\Animation:
</code></pre></li>
<li><p>请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？</p>
<pre><code>一个用于页面布局的全新CSS3功能，Flexbox可以把列表放在同一个方向（从上到下排列，从左到右），并让列表能延伸到占用可用的空间。
较为复杂的布局还可以通过嵌套一个伸缩容器（flex container）来实现。
采用Flex布局的元素，称为Flex容器（flex container），简称&quot;容器&quot;。
它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称&quot;项目&quot;。
常规布局是基于块和内联流方向，而Flex布局是基于flex-flow流可以很方便的用来做局中，能对不同屏幕大小自适应。
在布局上有了比以前更加灵活的空间。

具体：http://www.w3cplus.com/css3/flexbox-basics.html
</code></pre></li>
<li><p>用纯CSS创建一个三角形的原理是什么？</p>
<pre><code>把上、左、右三条边隐藏掉（颜色设为 transparent）
#demo {
  width: 0;
  height: 0;
  border-width: 20px;
  border-style: solid;
  border-color: transparent transparent red transparent;
}
</code></pre></li>
<li><p>一个满屏 品 字布局 如何设计?</p>
<pre><code>简单的方式：
    上面的div宽100%，
    下面的两个div分别宽50%，
    然后用float或者inline使其不换行即可
</code></pre></li>
<li><p>css多列等高如何实现？</p>
<pre><code>利用padding-bottom|margin-bottom正负值相抵；
设置父容器设置超出隐藏（overflow:hidden），这样子父容器的高度就还是它里面的列没有设定padding-bottom时的高度，
当它里面的任 一列高度增加了，则父容器的高度被撑到里面最高那列的高度，
其他比这列矮的列会用它们的padding-bottom补偿这部分高度差。
</code></pre></li>
</ul>
<ul>
<li><p>经常遇到的浏览器的兼容性有哪些？原因，解决方法是什么，常用hack的技巧 ？</p>
<pre><code>* png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.

* 浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。

* IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。

  浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}

  这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——_display:inline;将其转化为行内属性。(_这个符号只有ie6会识别)

  渐进识别的方式，从总体中逐渐排除局部。

  首先，巧妙的使用“\9”这一标记，将IE游览器从所有情况中分离出来。
  接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。

  css
      .bb{
          background-color:red;/*所有识别*/
          background-color:#00deff\9; /*IE6、7、8识别*/
          +background-color:#a200ff;/*IE6、7识别*/
          _background-color:#1e0bd1;/*IE6识别*/
      }
</code></pre></li>
</ul>
<pre><code>*  IE下,可以使用获取常规属性的方法来获取自定义属性,
   也可以使用getAttribute()获取自定义属性;
   Firefox下,只能使用getAttribute()获取自定义属性。
   解决方法:统一通过getAttribute()获取自定义属性。

*  IE下,even对象有x,y属性,但是没有pageX,pageY属性;
   Firefox下,event对象有pageX,pageY属性,但是没有x,y属性。

*  解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。

*  Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,
   可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。

超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:
L-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}
</code></pre><ul>
<li><p>li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</p>
<pre><code>行框的排列会受到中间空白（回车\空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔，把字符大小设为0，就没有空格了。
</code></pre></li>
</ul>
<ul>
<li><p>为什么要初始化CSS样式。</p>
<pre><code>- 因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。

- 当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化。

最简单的初始化方法： * {padding: 0; margin: 0;} （强烈不建议）

淘宝的样式初始化代码：
body, h1, h2, h3, h4, h5, h6, hr, p, blockquote, dl, dt, dd, ul, ol, li, pre, form, fieldset, legend, button, input, textarea, th, td { margin:0; padding:0; }
body, button, input, select, textarea { font:12px/1.5tahoma, arial, \5b8b\4f53; }
h1, h2, h3, h4, h5, h6{ font-size:100%; }
address, cite, dfn, em, var { font-style:normal; }
code, kbd, pre, samp { font-family:couriernew, courier, monospace; }
small{ font-size:12px; }
ul, ol { list-style:none; }
a { text-decoration:none; }
a:hover { text-decoration:underline; }
sup { vertical-align:text-top; }
sub{ vertical-align:text-bottom; }
legend { color:#000; }
fieldset, img { border:0; }
button, input, select, textarea { font-size:100%; }
table { border-collapse:collapse; border-spacing:0; }
</code></pre></li>
</ul>
<ul>
<li><p>absolute的containing block(容器块)计算方式跟正常流有什么不同？</p>
<pre><code>无论属于哪种，都要先找到其祖先元素中最近的 position 值不为 static 的元素，然后再判断：
1、若此元素为 inline 元素，则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box 的 padding box (除 margin, border 外的区域) 的最小矩形；
2、否则,则由这个祖先元素的 padding box 构成。
如果都找不到，则为 initial containing block。

补充：
1. static(默认的)/relative：简单说就是它的父元素的内容框（即去掉padding的部分）
2. absolute: 向上找最近的定位为absolute/relative的元素
3. fixed: 它的containing block一律为根元素(html/body)，根元素也是initial containing block
</code></pre></li>
<li><p>CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？</p>
<p>  对于普通元素visibility:collapse;会将元素完全隐藏,不占据页面布局空间,与display:none;表现相同.<br>  如果目标元素为table,visibility:collapse;将table隐藏,但是会占据页面布局空间.<br>  仅在Firefox下起作用,IE会显示元素,Chrome会将元素隐藏,但是占据空间.</p>
</li>
<li><p>position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？</p>
<p>  如果元素的display为none,那么元素不被渲染,position,float不起作用,如果元素拥有position:absolute;或者position:fixed;属性那么元素将为绝对定位,float不起作用.如果元素float属性不是none,元素会脱离文档流,根据float属性值来显示.有浮动,绝对定位,inline-block属性的元素,margin不会和垂直方向上的其他元素margin折叠.</p>
</li>
<li><p>对BFC规范(块级格式化上下文：block formatting context)的理解？</p>
<pre><code>（W3C CSS 2.1 规范中的一个概念,它是一个独立容器，决定了元素如何对其内容进行定位,以及与其他元素的关系和相互作用。）
 一个页面是由很多个 Box 组成的,元素的类型和 display 属性,决定了这个 Box 的类型。
 不同类型的 Box,会参与不同的 Formatting Context（决定如何渲染文档的容器）,因此Box内的元素会以不同的方式渲染,也就是说BFC内部的元素和外部的元素不会互相影响。
</code></pre></li>
<li><p>css定义的权重</p>
<pre><code>以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100，以下例子是演示各种定义的权重值：

/*权重为1*/
div{
}
/*权重为10*/
.class1{
}
/*权重为100*/
#id1{
}
/*权重为100+1=101*/
#id1 div{
}
/*权重为10+1=11*/
.class1 div{
}
/*权重为10+10+1=21*/
.class1 .class2 div{
}

如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现
</code></pre></li>
</ul>
<ul>
<li><p>请解释一下为什么需要清除浮动？清除浮动的方式</p>
<p>  清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。</p>
<pre><code>1、父级div定义height；
2、父级div也一起浮动；
3、常规的使用一个class；
    .clearfix:before, .clearfix:after {
        content: &quot; &quot;;
        display: table;
    }
    .clearfix:after {
        clear: both;
    }
    .clearfix {
        *zoom: 1;
    }

4、SASS编译的时候，浮动元素的父级div定义伪类:after
    &amp;:after,&amp;:before{
        content: &quot; &quot;;
        visibility: hidden;
        display: block;
        height: 0;
        clear: both;
    }

解析原理：
1) display:block 使生成的元素以块级元素显示,占满剩余空间;
2) height:0 避免生成内容破坏原有布局的高度。
3) visibility:hidden 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互;
4）通过 content:&quot;.&quot;生成内容作为最后一个元素，至于content里面是点还是其他都是可以的，例如oocss里面就有经典的 content:&quot;.&quot;,有些版本可能content 里面内容为空,一丝冰凉是不推荐这样做的,firefox直到7.0 content:”&quot; 仍然会产生额外的空隙；
5）zoom：1 触发IE hasLayout。

通过分析发现，除了clear：both用来闭合浮动的，其他代码无非都是为了隐藏掉content生成的内容，这也就是其他版本的闭合浮动为什么会有font-size：0，line-height：0。
</code></pre></li>
<li><p>什么是外边距合并？</p>
<pre><code>外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。
合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。
w3school介绍网址： http://www.w3school.com.cn/css/css_margin_collapsing.asp
</code></pre></li>
<li><p>zoom:1的清除浮动原理?</p>
<pre><code>清除浮动，触发hasLayout；
Zoom属性是IE浏览器的专有属性，它可以设置或检索对象的缩放比例。解决ie下比较奇葩的bug。
譬如外边距（margin）的重叠，浮动清除，触发ie的haslayout属性等。

来龙去脉大概如下：
当设置了zoom的值之后，所设置的元素就会就会扩大或者缩小，高度宽度就会重新计算了，这里一旦改变zoom值时其实也会发生重新渲染，运用这个原理，也就解决了ie下子元素浮动时候父元素不随着自动扩大的问题。

Zoom属是IE浏览器的专有属性，火狐和老版本的webkit核心的浏览器都不支持这个属性。然而，zoom现在已经被逐步标准化，出现在 CSS 3.0 规范草案中。

目前非ie由于不支持这个属性，它们又是通过什么属性来实现元素的缩放呢？
可以通过css3里面的动画属性scale进行缩放。
</code></pre></li>
<li><p>移动端的布局用过媒体查询吗？</p>
</li>
</ul>
<pre><code>假设你现在正用一台显示设备来阅读这篇文章，同时你也想把它投影到屏幕上，或者打印出来，
而显示设备、屏幕投影和打印等这些媒介都有自己的特点，CSS就是为文档提供在不同媒介上展示的适配方法

&lt;!-- link元素中的CSS媒体查询 --&gt;
当媒体查询为真时，相关的样式表或样式规则会按照正常的级联规被应用。
当媒体查询返回假， &lt;link&gt; 标签上带有媒体查询的样式表 仍将被下载 （只不过不会被应用）。

&lt;link rel=&quot;stylesheet&quot; media=&quot;(max-width: 800px)&quot; href=&quot;example.css&quot; /&gt;

&lt;!-- 样式表中的CSS媒体查询 --&gt;
包含了一个媒体类型和至少一个使用 宽度、高度和颜色等媒体属性来限制样式表范围的表达式。
CSS3加入的媒体查询使得无需修改内容便可以使样式应用于某些特定的设备范围。

&lt;style&gt;
    @media (min-width: 700px) and (orientation: landscape){
      .sidebar {
        display: none;
      }
    }
&lt;/style&gt;
</code></pre><ul>
<li><p>使用 CSS 预处理器吗？喜欢那个？</p>
<pre><code>SASS (SASS、LESS没有本质区别，只因为团队前端都是用的SASS)
</code></pre></li>
</ul>
<ul>
<li><p>CSS优化、提高性能的方法有哪些？</p>
<pre><code>关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）；
如果规则拥有 ID 选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）；
提取项目的通用公有样式，增强可复用性，按模块编写组件；增强项目的协同开发性、可维护性和可扩展性;
使用预处理工具或构建工具（gulp对css进行语法检查、自动补前缀、打包压缩、自动优雅降级）；
</code></pre></li>
</ul>
<ul>
<li><p>浏览器是怎样解析CSS选择器的？</p>
<pre><code>样式系统从关键选择器开始匹配，然后左移查找规则选择器的祖先元素。
只要选择器的子树一直在工作，样式系统就会持续左移，直到和规则匹配，或者是因为不匹配而放弃该规则。
</code></pre></li>
</ul>
<ul>
<li><p>在网页中的应该使用奇数还是偶数的字体？为什么呢？</p>
</li>
<li><p>margin和padding分别适合什么场景使用？</p>
<pre><code>margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。
margin用于布局分开元素使元素与元素互不相干；
padding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段
</code></pre></li>
</ul>
<ul>
<li><p>抽离样式模块怎么写，说出思路，有无实践经验？[阿里航旅的面试题]</p>
</li>
<li><p>元素竖向的百分比设定是相对于容器的高度吗？</p>
</li>
<li><p>全屏滚动的原理是什么？用到了CSS的那些属性？</p>
</li>
<li><p>什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？</p>
</li>
<li><p>视差滚动效果，如何给每页做不同的动画？（回到顶部，向下滑动要再次出现，和只出现一次分别怎么做？）</p>
</li>
<li><p>::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用。</p>
<pre><code>单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。（伪元素由双冒号和伪元素名称组成）
双冒号是在当前规范中引入的，用于区分伪类和伪元素。不过浏览器需要同时支持旧的已经存在的伪元素写法，
比如:first-line、:first-letter、:before、:after等，
而新的在CSS3中引入的伪元素则不允许再支持旧的单冒号的写法。

想让插入的内容出现在其它内容前，使用::before，否者，使用::after；
在代码顺序上，::after生成的内容也比::before生成的内容靠后。
如果按堆栈视角，::after生成的内容会在::before生成的内容之上
</code></pre></li>
</ul>
<ul>
<li><p>如何修改chrome记住密码后自动填充表单的黄色背景 ？</p>
<pre><code>input:-webkit-autofill, textarea:-webkit-autofill, select:-webkit-autofill {
  background-color: rgb(250, 255, 189); /* #FAFFBD; */
  background-image: none;
  color: rgb(0, 0, 0);
}
</code></pre></li>
<li><p>你对line-height是如何理解的？</p>
</li>
<li><p>设置元素浮动后，该元素的display值是多少？</p>
<pre><code>自动变成了 display:block
</code></pre></li>
<li><p>怎么让Chrome支持小于12px 的文字？</p>
<pre><code>1、用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观。
2、使用12px及12px以上字体大小：为了兼容各大主流浏览器，建议设计美工图时候设置大于或等于12px的字体大小，如果是接单的这个时候就需要给客户讲解小于12px浏览器不兼容等事宜。
3、继续使用小于12px字体大小样式设置：如果不考虑chrome可以不用考虑兼容，同时在设置小于12px对象设置-webkit-text-size-adjust:none，做到最大兼容考虑。
4、使用12px以上字体：为了兼容、为了代码更简单 从新考虑权重下兼容性。
</code></pre></li>
<li><p>让页面里的字体变清晰，变细用CSS怎么做？</p>
<pre><code>-webkit-font-smoothing: antialiased;
</code></pre></li>
<li><p>font-style属性可以让它赋值为“oblique” oblique是什么意思？</p>
<pre><code>倾斜的字体样式
</code></pre></li>
<li><p>position:fixed;在android下无效怎么处理？</p>
<pre><code>fixed的元素是相对整个页面固定位置的，你在屏幕上滑动只是在移动这个所谓的viewport，
原来的网页还好好的在那，fixed的内容也没有变过位置，
所以说并不是iOS不支持fixed，只是fixed的元素不是相对手机屏幕固定的。
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no&quot;/&gt;
</code></pre></li>
<li><p>如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）</p>
<pre><code>多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms
</code></pre></li>
<li><p>display:inline-block 什么时候会显示间隙？(携程)</p>
<pre><code>移除空格、使用margin负值、使用font-size:0、letter-spacing、word-spacing
</code></pre></li>
<li><p>overflow: scroll时不能平滑滚动的问题怎么处理？</p>
</li>
<li><p>有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度。</p>
</li>
<li><p>png、jpg、gif 这些图片格式解释一下，分别什么时候用。有没有了解过webp？</p>
</li>
</ul>
<ul>
<li><p>什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）</p>
<pre><code>如果静态文件都放在主域名下，那静态文件请求的时候都带有的cookie的数据提交给server的，非常浪费流量，所以不如隔离开。

因为cookie有域的限制，因此不能跨域提交请求，故使用非主要域名的时候，请求头中就不会带有cookie数据，
这样可以降低请求头的大小，降低请求时间，从而达到降低整体请求延时的目的。

同时这种方式不会将cookie传入Web Server，也减少了Web Server对cookie的处理分析环节，提高了webserver的http请求的解析速度。
</code></pre></li>
</ul>
<ul>
<li>style标签写在body后与body前有什么区别？</li>
</ul>
<ul>
<li><p>什么是CSS 预处理器 / 后处理器？</p>
<pre><code>- 预处理器例如：LESS、Sass、Stylus，用来预编译Sass或less，增强了css代码的复用性，还有层级、mixin、变量、循环、函数等，具有很方便的UI组件模块化开发能力，极大的提高工作效率。

- 后处理器例如：PostCSS，通常被视为在完成的样式表中根据CSS规范处理CSS，让其更有效；目前最常做的是给CSS属性添加浏览器私有前缀，实现跨浏览器兼容性的问题。
</code></pre></li>
</ul>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a><a name="js">JavaScript</a></h2><ul>
<li><p>介绍js的基本数据类型。</p>
<pre><code>Undefined、Null、Boolean、Number、String、
ECMAScript 2015 新增:Symbol(创建后独一无二且不可变的数据类型 )
</code></pre></li>
<li><p>介绍js有哪些内置对象？</p>
<pre><code>Object 是 JavaScript 中所有对象的父对象

数据封装类对象：Object、Array、Boolean、Number 和 String
其他对象：Function、Arguments、Math、Date、RegExp、Error

参考：http://www.ibm.com/developerworks/cn/web/wa-objectsinjs-v1b/index.html
</code></pre></li>
<li><p>说几条写JavaScript的基本规范？</p>
<pre><code>1.不要在同一行声明多个变量。
2.请使用 ===/!==来比较true/false或者数值
3.使用对象字面量替代new Array这种形式
4.不要使用全局函数。
5.Switch语句必须带有default分支
6.函数不应该有时候有返回值，有时候没有返回值。
7.For循环必须使用大括号
8.If语句必须使用大括号
9.for-in循环中的变量 应该使用var关键字明确限定作用域，从而避免作用域污染。
</code></pre></li>
<li><p>JavaScript原型，原型链 ? 有什么特点？</p>
<pre><code>每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时，
如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，
于是就这样一直找下去，也就是我们平时所说的原型链的概念。
关系：instance.constructor.prototype = instance.__proto__

特点：
JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。
</code></pre></li>
</ul>
<pre><code>当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性，如果没有的话，就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象。
   function Func(){}
   Func.prototype.name = &quot;Sean&quot;;
   Func.prototype.getInfo = function() {
     return this.name;
   }
   var person = new Func();//现在可以参考var person = Object.create(oldObject);
   console.log(person.getInfo());//它拥有了Func的属性和方法
   //&quot;Sean&quot;
   console.log(Func.prototype);
   // Func { name=&quot;Sean&quot;, getInfo=function()}
</code></pre><ul>
<li><p>JavaScript有几种类型的值？，你能画一下他们的内存图吗？</p>
<pre><code>栈：原始数据类型（Undefined，Null，Boolean，Number、String）
堆：引用数据类型（对象、数组和函数）

两种类型的区别是：存储位置不同；
原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；
引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体
</code></pre><p> <img src="http://www.w3school.com.cn/i/ct_js_value.gif" alt="Stated Clearly Image"></p>
</li>
<li><p>如何将字符串转化为数字，例如’12.3b’?</p>
<pre><code>* parseFloat(&apos;12.3b&apos;);
* 正则表达式，&apos;12.3b&apos;.match(/(\d)+(\.)?(\d)+/g)[0] * 1, 但是这个不太靠谱，提供一种思路而已。
</code></pre></li>
<li><p>如何将浮点数点左边的数每三位添加一个逗号，如12000000.11转化为『12,000,000.11』?</p>
<pre><code>function commafy(num){
    return num &amp;&amp; num
        .toString()
        .replace(/(\d)(?=(\d{3})+\.)/g, function($1, $2){
            return $2 + &apos;,&apos;;
        });
}
</code></pre></li>
<li><p>如何实现数组的随机排序？</p>
<pre><code>方法一：
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">randSort1</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,len = arr.length;i &lt; len; i++ )&#123;</div><div class="line">		<span class="keyword">var</span> rand = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*len);</div><div class="line">		<span class="keyword">var</span> temp = arr[rand];</div><div class="line">		arr[rand] = arr[i];</div><div class="line">		arr[i] = temp;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(randSort1(arr));</div></pre></td></tr></table></figure>

方法二：
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">randSort2</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> mixedArray = [];</div><div class="line">	<span class="keyword">while</span>(arr.length &gt; <span class="number">0</span>)&#123;</div><div class="line">		<span class="keyword">var</span> randomIndex = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*arr.length);</div><div class="line">		mixedArray.push(arr[randomIndex]);</div><div class="line">		arr.splice(randomIndex, <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> mixedArray;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(randSort2(arr));</div></pre></td></tr></table></figure>

方法三：
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>];</div><div class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>;</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure>
</code></pre></li>
<li><p>Javascript如何实现继承？</p>
<pre><code>1、构造继承
2、原型继承
3、实例继承
4、拷贝继承

原型prototype机制或apply和call方法去实现较简单，建议使用构造函数与原型混合方式。
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      	<span class="keyword">this</span>.name = <span class="string">'wang'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">this</span>.age = <span class="number">28</span>;</div><div class="line">&#125;</div><div class="line">Child.prototype = <span class="keyword">new</span> Parent();<span class="comment">//继承了Parent，通过原型</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> demo = <span class="keyword">new</span> Child();</div><div class="line">alert(demo.age);</div><div class="line">alert(demo.name);<span class="comment">//得到被继承的属性</span></div></pre></td></tr></table></figure>
</code></pre></li>
<li><p>JavaScript继承的几种实现方式？</p>
<ul>
<li>参考：<a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html" target="_blank" rel="external">构造函数的继承</a>，<a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance_continued.html" target="_blank" rel="external">非构造函数的继承</a>；</li>
</ul>
</li>
</ul>
<ul>
<li><p>javascript创建对象的几种方式？</p>
<pre><code>javascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能混合使用。
</code></pre></li>
</ul>
<pre><code>1、对象字面量的方式

    person={firstname:&quot;Mark&quot;,lastname:&quot;Yun&quot;,age:25,eyecolor:&quot;black&quot;};

2、用function来模拟无参的构造函数

    function Person(){}
    var person=new Person();//定义一个function，如果使用new&quot;实例化&quot;,该function可以看作是一个Class
    person.name=&quot;Mark&quot;;
    person.age=&quot;25&quot;;
    person.work=function(){
    alert(person.name+&quot; hello...&quot;);
    }
    person.work();

3、用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）

    function Pet(name,age,hobby){
       this.name=name;//this作用域：当前对象
       this.age=age;
       this.hobby=hobby;
       this.eat=function(){
          alert(&quot;我叫&quot;+this.name+&quot;,我喜欢&quot;+this.hobby+&quot;,是个程序员&quot;);
       }
    }
    var maidou =new Pet(&quot;麦兜&quot;,25,&quot;coding&quot;);//实例化、创建对象
    maidou.eat();//调用eat方法


4、用工厂方式来创建（内置对象）

     var wcDog =new Object();
     wcDog.name=&quot;旺财&quot;;
     wcDog.age=3;
     wcDog.work=function(){
       alert(&quot;我是&quot;+wcDog.name+&quot;,汪汪汪......&quot;);
     }
     wcDog.work();


5、用原型方式来创建

    function Dog(){

     }
     Dog.prototype.name=&quot;旺财&quot;;
     Dog.prototype.eat=function(){
     alert(this.name+&quot;是个吃货&quot;);
     }
     var wangcai =new Dog();
     wangcai.eat();


5、用混合方式来创建

    function Car(name,price){
      this.name=name;
      this.price=price;
    }
     Car.prototype.sell=function(){
       alert(&quot;我是&quot;+this.name+&quot;，我现在卖&quot;+this.price+&quot;万元&quot;);
      }
    var camry =new Car(&quot;凯美瑞&quot;,27);
    camry.sell();
</code></pre><ul>
<li><p>Javascript作用链域?</p>
<pre><code>全局函数无法查看局部函数的内部细节，但局部函数可以查看其上层的函数细节，直至全局细节。
当需要从局部函数查找某一属性或方法时，如果当前作用域没有找到，就会上溯到上层作用域查找，直至全局函数，这种组织形式就是作用域链。
</code></pre></li>
<li><p>谈谈This对象的理解。</p>
<ul>
<li>this总是指向函数的直接调用者（而非间接调用者）；</li>
<li>如果有new关键字，this指向new出来的那个对象；</li>
<li>在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window；</li>
</ul>
</li>
<li><p>eval是做什么的？</p>
<pre><code>它的功能是把对应的字符串解析成JS代码并运行；
应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。
由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval(&apos;(&apos;+ str +&apos;)&apos;);
</code></pre></li>
<li><p>什么是window对象? 什么是document对象?</p>
<pre><code>window对象是指浏览器打开的窗口。
document对象是Documentd对象（HTML 文档对象）的一个只读引用，window对象的一个属性。
</code></pre></li>
<li><p>null，undefined 的区别？</p>
<pre><code>null         表示一个对象是“没有值”的值，也就是值为“空”；
undefined     表示一个变量声明了没有初始化(赋值)；

undefined不是一个有效的JSON，而null是；
undefined的类型(typeof)是undefined；
null的类型(typeof)是object；
</code></pre></li>
</ul>
<pre><code>    Javascript将未赋值的变量默认值设为undefined；
    Javascript从来不会将变量设为null。它是用来让程序员表明某个用var声明的变量时没有值的。

    typeof undefined
        //&quot;undefined&quot;
        undefined :是一个表示&quot;无&quot;的原始值或者说表示&quot;缺少值&quot;，就是此处应该有一个值，但是还没有定义。当尝试读取时会返回 undefined；
        例如变量被声明了，但没有赋值时，就等于undefined

    typeof null
        //&quot;object&quot;
        null : 是一个对象(空对象, 没有任何属性和方法)；
        例如作为函数的参数，表示该函数的参数不是对象；

    注意：
        在验证null时，一定要使用　=== ，因为 == 无法分别 null 和　undefined
         null == undefined // true
          null === undefined // false

    再来一个例子：

        null
        Q：有张三这个人么？
        A：有！
        Q：张三有房子么？
        A：没有！

        undefined
        Q：有张三这个人么？
        A：有！
        Q: 张三有多少岁？
        A: 不知道（没有被告诉）

参考阅读：[undefined与null的区别](http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html)
</code></pre><ul>
<li><p>写一个通用的事件侦听器函数。</p>
<pre><code>// event(事件)工具集，来源：github.com/markyun
markyun.Event = {
    // 页面加载完成后
    readyEvent : function(fn) {
        if (fn==null) {
            fn=document;
        }
        var oldonload = window.onload;
        if (typeof window.onload != &apos;function&apos;) {
            window.onload = fn;
        } else {
            window.onload = function() {
                oldonload();
                fn();
            };
        }
    },
    // 视能力分别使用dom0||dom2||IE方式 来绑定事件
    // 参数： 操作的元素,事件名称 ,事件处理程序
    addEvent : function(element, type, handler) {
        if (element.addEventListener) {
            //事件类型、需要执行的函数、是否捕捉
            element.addEventListener(type, handler, false);
        } else if (element.attachEvent) {
            element.attachEvent(&apos;on&apos; + type, function() {
                handler.call(element);
            });
        } else {
            element[&apos;on&apos; + type] = handler;
        }
    },
    // 移除事件
    removeEvent : function(element, type, handler) {
        if (element.removeEventListener) {
            element.removeEventListener(type, handler, false);
        } else if (element.datachEvent) {
            element.detachEvent(&apos;on&apos; + type, handler);
        } else {
            element[&apos;on&apos; + type] = null;
        }
    },
    // 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)
    stopPropagation : function(ev) {
        if (ev.stopPropagation) {
            ev.stopPropagation();
        } else {
            ev.cancelBubble = true;
        }
    },
    // 取消事件的默认行为
    preventDefault : function(event) {
        if (event.preventDefault) {
            event.preventDefault();
        } else {
            event.returnValue = false;
        }
    },
    // 获取事件目标
    getTarget : function(event) {
        return event.target || event.srcElement;
    },
    // 获取event对象的引用，取到事件的所有信息，确保随时能使用event；
    getEvent : function(e) {
        var ev = e || window.event;
        if (!ev) {
            var c = this.getEvent.caller;
            while (c) {
                ev = c.arguments[0];
                if (ev &amp;&amp; Event == ev.constructor) {
                    break;
                }
                c = c.caller;
            }
        }
        return ev;
    }
};
</code></pre></li>
<li><p>[“1”, “2”, “3”].map(parseInt) 答案是多少？</p>
<pre><code>parseInt() 函数能解析一个字符串，并返回一个整数，需要两个参数 (val, radix)，
其中 radix 表示要解析的数字的基数。【该值介于 2 ~ 36 之间，并且字符串中的数字不能大于radix才能正确返回数字结果值】;
但此处 map 传了 3 个 (element, index, array),我们重写parseInt函数测试一下是否符合上面的规则。

function parseInt(str, radix) {
    return str+&apos;-&apos;+radix;
};
var a=[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;];
a.map(parseInt);  // [&quot;1-0&quot;, &quot;2-1&quot;, &quot;3-2&quot;] 不能大于radix

因为二进制里面，没有数字3,导致出现超范围的radix赋值和不合法的进制解析，才会返回NaN
所以[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;].map(parseInt) 答案也就是：[1, NaN, NaN]

详细解析：http://blog.csdn.net/justjavac/article/details/19473199
</code></pre></li>
<li><p>事件是？IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</p>
<pre><code>1. 我们在网页中的某个操作（有的操作对应多个事件）。例如：当我们点击一个按钮就会产生一个事件。是可以被 JavaScript 侦测到的行为。
2. 事件处理机制：IE是事件冒泡、Firefox同时支持两种事件模型，也就是：捕获型事件和冒泡型事件；
3. ev.stopPropagation();（旧ie的方法 ev.cancelBubble = true;）
</code></pre></li>
</ul>
<ul>
<li><p>什么是闭包（closure），为什么要用它？</p>
<pre><code>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域，将函数内部的变量和方法传递到外部。

闭包的特性：

1.函数内再嵌套函数
2.内部函数可以引用外层的参数和变量
3.参数和变量不会被垃圾回收机制回收

//li节点的onclick事件都能正确的弹出当前被点击的li索引
 &lt;ul id=&quot;testUL&quot;&gt;
    &lt;li&gt; index = 0&lt;/li&gt;
    &lt;li&gt; index = 1&lt;/li&gt;
    &lt;li&gt; index = 2&lt;/li&gt;
    &lt;li&gt; index = 3&lt;/li&gt;
&lt;/ul&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
      var nodes = document.getElementsByTagName(&quot;li&quot;);
    for(i = 0;i&lt;nodes.length;i+= 1){
        nodes[i].onclick = (function(i){
                  return function() {
                     console.log(i);
                  } //不用闭包的话，值每次都是4
                })(i);
    }
&lt;/script&gt;
</code></pre></li>
</ul>
<pre><code>执行say667()后,say667()闭包内部变量会存在,而闭包内部函数的内部变量不会存在
使得Javascript的垃圾回收机制GC不会收回say667()所占用的资源
因为say667()的内部函数的执行需要依赖say667()中的变量
这是对闭包作用的非常直白的描述

  function say667() {
    // Local variable that ends up within closure
    var num = 666;
    var sayAlert = function() {
        alert(num);
    }
    num++;
    return sayAlert;
}

 var sayAlert = say667();
 sayAlert()//执行结果应该弹出的667
</code></pre><ul>
<li><p>javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？</p>
<pre><code>use strict是一种ECMAscript 5 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行,

使JS编码更加规范化的模式,消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为。
默认支持的糟糕特性都会被禁用，比如不能用with，也不能在意外的情况下给全局变量赋值;
全局变量的显示声明,函数必须声明在顶层，不允许在非函数代码块内声明函数,arguments.callee也不允许使用；
消除代码运行的一些不安全之处，保证代码运行的安全,限制函数中的arguments修改，严格模式下的eval函数的行为和非严格模式的也不相同;

提高编译器效率，增加运行速度；
为未来新版本的Javascript标准化做铺垫。
</code></pre></li>
</ul>
<ul>
<li><p>如何判断一个对象是否属于某个类？</p>
<pre><code>使用instanceof （待完善）
if(a instanceof Person){
    alert(&apos;yes&apos;);
}
</code></pre></li>
<li><p>new操作符具体干了什么呢?</p>
<pre><code>     1、创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型。
         2、属性和方法被加入到 this 引用的对象中。
      3、新创建的对象由 this 所引用，并且最后隐式的返回 this 。

var obj  = {};
obj.__proto__ = Base.prototype;
Base.call(obj);
</code></pre></li>
</ul>
<ul>
<li>用原生JavaScript的实现过什么功能吗？</li>
</ul>
<ul>
<li><p>Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？</p>
<pre><code>hasOwnProperty

javaScript中hasOwnProperty函数方法是返回一个布尔值，指出一个对象是否具有指定名称的属性。此方法无法检查该对象的原型链中是否具有该属性；该属性必须是对象本身的一个成员。
使用方法：
object.hasOwnProperty(proName)
其中参数object是必选项。一个对象的实例。
proName是必选项。一个属性名称的字符串值。

如果 object 具有指定名称的属性，那么JavaScript中hasOwnProperty函数方法返回 true，反之则返回 false。
</code></pre></li>
<li><p>JSON 的了解？</p>
<pre><code>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。
它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小
如：{&quot;age&quot;:&quot;12&quot;, &quot;name&quot;:&quot;back&quot;}

JSON字符串转换为JSON对象:
var obj =eval(&apos;(&apos;+ str +&apos;)&apos;);
var obj = str.parseJSON();
var obj = JSON.parse(str);

JSON对象转换为JSON字符串：
var last=obj.toJSONString();
var last=JSON.stringify(obj);
</code></pre></li>
<li><p><code>[].forEach.call($$(&quot;*&quot;),function(a){a.style.outline=&quot;1px solid #&quot;+(~~(Math.random()*(1&lt;&lt;24))).toString(16)})</code> 能解释一下这段代码的意思吗？</p>
</li>
</ul>
<ul>
<li><p>js延迟加载的方式有哪些？</p>
<pre><code>defer和async、动态创建DOM方式（用得最多）、按需异步载入js
</code></pre></li>
</ul>
<ul>
<li><p>Ajax 是什么? 如何创建一个Ajax？</p>
<pre><code>ajax的全称：Asynchronous Javascript And XML。
异步传输+js+xml。
所谓异步，在这里简单地解释就是：向服务器发送请求的时候，我们不必等待结果，而是可以同时做其他的事情，等到有了结果它自己会根据设定进行后续操作，与此同时，页面是不会发生整页刷新的，提高了用户体验。

(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象
(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息
(3)设置响应HTTP请求状态变化的函数
(4)发送HTTP请求
(5)获取异步调用返回的数据
(6)使用JavaScript和DOM实现局部刷新
</code></pre></li>
<li><p>Ajax 解决浏览器缓存问题？</p>
<pre><code>1、在ajax发送请求前加上 anyAjaxObj.setRequestHeader(&quot;If-Modified-Since&quot;,&quot;0&quot;)。

2、在ajax发送请求前加上 anyAjaxObj.setRequestHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;)。

3、在URL后面加上一个随机数： &quot;fresh=&quot; + Math.random();。

4、在URL后面加上时间搓：&quot;nowtime=&quot; + new Date().getTime();。

5、如果是使用jQuery，直接这样就可以了 $.ajaxSetup({cache:false})。这样页面的所有ajax都会执行这条语句就是不需要保存缓存记录。
</code></pre></li>
<li><p>同步和异步的区别?</p>
<p> 同步的概念应该是来自于OS中关于同步的概念:不同进程为协同完成某项工作而在先后次序上调整(通过阻塞,唤醒等方式).同步强调的是顺序性.谁先谁后.异步则不存在这种顺序性.</p>
</li>
</ul>
<pre><code>同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作。

异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容。



（待完善）
</code></pre><ul>
<li><p>如何解决跨域问题?</p>
<pre><code>jsonp、 iframe、window.name、window.postMessage、服务器上设置代理页面
</code></pre></li>
<li><p>页面编码和被请求的资源编码如果不一致如何处理？</p>
</li>
<li><p>模块化开发怎么做？</p>
<p>  <a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/" target="_blank" rel="external"> 立即执行函数</a>,不暴露私有成员</p>
<pre><code>var module1 = (function(){
　　　　var _count = 0;
　　　　var m1 = function(){
　　　　　　//...
　　　　};
　　　　var m2 = function(){
　　　　　　//...
　　　　};
　　　　return {
　　　　　　m1 : m1,
　　　　　　m2 : m2
　　　　};
　　})();
</code></pre><p> （待完善）</p>
</li>
<li><p>AMD（Modules/Asynchronous-Definition）、CMD（Common Module Definition）规范区别？</p>
<blockquote>
<p>AMD 规范在这里：<a href="https://github.com/amdjs/amdjs-api/wiki/AMD" target="_blank" rel="external">https://github.com/amdjs/amdjs-api/wiki/AMD</a></p>
<p>CMD 规范在这里：<a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="external">https://github.com/seajs/seajs/issues/242</a></p>
</blockquote>
<pre><code>Asynchronous Module Definition，异步模块定义，所有的模块将被异步加载，模块加载不影响后面语句运行。所有依赖某些模块的语句均放置在回调函数中。

 区别：

    1. 对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible.
    2. CMD 推崇依赖就近，AMD 推崇依赖前置。看代码：

// CMD
define(function(require, exports, module) {
    var a = require(&apos;./a&apos;)
    a.doSomething()
    // 此处略去 100 行
    var b = require(&apos;./b&apos;) // 依赖可以就近书写
    b.doSomething()
    // ...
})

// AMD 默认推荐
define([&apos;./a&apos;, &apos;./b&apos;], function(a, b) { // 依赖必须一开始就写好
    a.doSomething()
    // 此处略去 100 行
    b.doSomething()
    // ...
})
</code></pre></li>
</ul>
<ul>
<li><p>requireJS的核心原理是什么？（如何动态加载的？如何避免多次加载的？如何<br>缓存的？）</p>
<pre><code>参考：http://annn.me/how-to-realize-cmd-loader/
</code></pre></li>
<li><p>JS模块加载器的轮子怎么造，也就是如何实现一个模块加载器？</p>
</li>
<li><p>谈一谈你对ECMAScript6的了解？</p>
</li>
<li><p>ECMAScript6 怎么写class么，为什么会出现class这种东西?</p>
</li>
<li><p>异步加载JS的方式有哪些？</p>
<pre><code>(1) defer，只支持IE

(2) async：

(3) 创建script，插入到DOM中，加载完毕后callBack
</code></pre></li>
<li><p>documen.write和 innerHTML的区别</p>
<pre><code>document.write只能重绘整个页面

innerHTML可以重绘页面的一部分
</code></pre></li>
<li><p>DOM操作——怎样添加、移除、移动、复制、创建和查找节点?</p>
<pre><code>（1）创建新节点
  createDocumentFragment()    //创建一个DOM片段
  createElement()   //创建一个具体的元素
  createTextNode()   //创建一个文本节点
（2）添加、移除、替换、插入
  appendChild()
  removeChild()
  replaceChild()
  insertBefore() //在已有的子节点前插入一个新的子节点
（3）查找
  getElementsByTagName()    //通过标签名称
  getElementsByName()    //通过元素的Name属性的值(IE容错能力较强，会得到一个数组，其中包括id等于name值的)
  getElementById()    //通过元素Id，唯一性
</code></pre></li>
<li><p>.call() 和 .apply() 的区别？</p>
</li>
</ul>
<pre><code>例子中用 add 来替换 sub，add.call(sub,3,1) == add(3,1) ，所以运行结果为：alert(4);

注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。

  function add(a,b)
  {
      alert(a+b);
  }

  function sub(a,b)
  {
      alert(a-b);
  }

  add.call(sub,3,1);
</code></pre><ul>
<li><p>数组和对象有哪些原生方法，列举一下？</p>
</li>
<li><p>JS 怎么实现一个类。怎么实例化这个类</p>
</li>
<li><p>JavaScript中的作用域与变量声明提升？</p>
</li>
<li><p>如何编写高性能的Javascript？</p>
</li>
<li><p>那些操作会造成内存泄漏？</p>
</li>
<li><p>JQuery的源码看过吗？能不能简单概况一下它的实现原理？</p>
</li>
<li><p>jQuery.fn的init方法返回的this指的是什么对象？为什么要返回this？</p>
</li>
<li><p>jquery中如何将数组转化为json字符串，然后再转化回来？</p>
</li>
<li><p>jQuery 的属性拷贝(extend)的实现原理是什么，如何实现深拷贝？</p>
</li>
<li><p>jquery.extend 与 jquery.fn.extend的区别？</p>
<pre><code>* jquery.extend 为jquery类添加类方法，可以理解为添加静态方法
* jquery.fn.extend:
    源码中jquery.fn = jquery.prototype，所以对jquery.fn的扩展，就是为jquery类添加成员函数
使用：
jquery.extend扩展，需要通过jquery类来调用，而jquery.fn.extend扩展，所有jquery实例都可以直接调用。
</code></pre></li>
</ul>
<ul>
<li><p>jQuery 的队列是如何实现的？队列可以用在哪些地方？</p>
</li>
<li><p>谈一下Jquery中的bind(),live(),delegate(),on()的区别？</p>
</li>
<li><p>JQuery一个对象可以同时绑定多个事件，这是如何实现的？</p>
</li>
<li><p>是否知道自定义事件。jQuery里的fire函数是什么意思，什么时候用？</p>
</li>
<li><p>jQuery 是通过哪个方法和 Sizzle 选择器结合的？（jQuery.fn.find()进入Sizzle）</p>
</li>
<li><p>针对 jQuery性能的优化方法？</p>
</li>
<li><p>Jquery与jQuery UI 有啥区别？</p>
</li>
</ul>
<pre><code>*jQuery是一个js库，主要提供的功能是选择器，属性修改和事件绑定等等。

*jQuery UI则是在jQuery的基础上，利用jQuery的扩展性，设计的插件。
 提供了一些常用的界面元素，诸如对话框、拖动行为、改变大小行为等等
</code></pre><ul>
<li><p>JQuery的源码看过吗？能不能简单说一下它的实现原理？</p>
</li>
<li><p>jquery 中如何将数组转化为json字符串，然后再转化回来？</p>
</li>
</ul>
<p>jQuery中没有提供这个功能，所以你需要先编写两个jQuery的扩展：</p>
<pre><code>$.fn.stringifyArray = function(array) {
    return JSON.stringify(array)
}

$.fn.parseArray = function(array) {
    return JSON.parse(array)
}

然后调用：
$(&quot;&quot;).stringifyArray(array)
</code></pre><ul>
<li><p>jQuery和Zepto的区别？各自的使用场景？</p>
</li>
<li><p>针对 jQuery 的优化方法？</p>
<pre><code>*基于Class的选择性的性能相对于Id选择器开销很大，因为需遍历所有DOM元素。

*频繁操作的DOM，先缓存起来再操作。用Jquery的链式调用更好。
 比如：var str=$(&quot;a&quot;).attr(&quot;href&quot;);

*for (var i = size; i &lt; arr.length; i++) {}
 for 循环每一次循环都查找了数组 (arr) 的.length 属性，在开始循环的时候设置一个变量来存储这个数字，可以让循环跑得更快：
 for (var i = size, length = arr.length; i &lt; length; i++) {}
</code></pre></li>
</ul>
<ul>
<li><p>Zepto的点透问题如何解决？</p>
</li>
<li><p>jQueryUI如何自定义组件?</p>
</li>
<li><p>需求：实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应。给出你的技术实现方案？</p>
</li>
<li><p>如何判断当前脚本运行在浏览器还是node环境中？（阿里）</p>
<pre><code>this === window ? &apos;browser&apos; : &apos;node&apos;;

通过判断Global对象是否为window，如果不为window，当前脚本没有运行在浏览器中
</code></pre></li>
<li><p>移动端最小触控区域是多大？</p>
</li>
<li><p>jQuery 的 slideUp动画 ，如果目标元素是被外部事件驱动, 当鼠标快速地连续触发外部元素事件, 动画会滞后的反复执行，该如何处理呢?</p>
<pre><code>jquery stop(): 如：$(&quot;#div&quot;).stop().animate({width:&quot;100px&quot;},100);
</code></pre></li>
<li><p>把 Script 标签 放在页面的最底部的body封闭之前 和封闭之后有什么区别？浏览器会如何解析它们？</p>
</li>
<li><p>移动端的点击事件的有延迟，时间是多久，为什么会有？ 怎么解决这个延时？（click 有 300ms 延迟,为了实现safari的双击事件的设计，浏览器要知道你是不是要双击操作。）</p>
</li>
<li><p>知道各种JS框架(Angular, Backbone, Ember, React, Meteor, Knockout…)么? 能讲出他们各自的优点和缺点么?</p>
</li>
<li><p>Underscore 对哪些 JS 原生对象进行了扩展以及提供了哪些好用的函数方法？</p>
</li>
<li><p>解释JavaScript中的作用域与变量声明提升？</p>
</li>
<li><p>那些操作会造成内存泄漏？</p>
<pre><code>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。
垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为 0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。

setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏。
闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）
</code></pre></li>
<li><p>JQuery一个对象可以同时绑定多个事件，这是如何实现的？</p>
<pre><code>* 多个事件同一个函数：
    $(&quot;div&quot;).on(&quot;click mouseover&quot;, function(){});
* 多个事件不同函数
    $(&quot;div&quot;).on({
        click: function(){},
        mouseover: function(){}
    });
</code></pre></li>
<li><p>Node.js的适用场景？</p>
</li>
<li><p>(如果会用node)知道route, middleware, cluster, nodemon, pm2, server-side rendering么?</p>
</li>
<li><p>解释一下 Backbone 的 MVC 实现方式？</p>
</li>
<li><p>什么是“前端路由”?什么时候适合使用“前端路由”? “前端路由”有哪些优点和缺点?</p>
</li>
<li><p>知道什么是webkit么? 知道怎么用浏览器的各种工具来调试和debug代码么?</p>
<pre><code>Chrome,Safari浏览器内核。
</code></pre></li>
<li><p>如何测试前端代码么? 知道BDD, TDD, Unit Test么? 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)?</p>
</li>
<li><p>前端templating(Mustache, underscore, handlebars)是干嘛的, 怎么用?</p>
</li>
<li><p>简述一下 Handlebars 的基本用法？</p>
</li>
<li><p>简述一下 Handlerbars 的对模板的基本处理流程， 如何编译的？如何缓存的？</p>
</li>
<li><p>用js实现千位分隔符?(来源：<a href="http://div.io/topic/744" target="_blank" rel="external">前端农民工</a>，提示：正则+replace)</p>
</li>
</ul>
<pre><code>参考：http://www.tuicool.com/articles/ArQZfui
function commafy(num) {
    return num &amp;&amp; num
        .toString()
        .replace(/(\d)(?=(\d{3})+\.)/g, function($0, $1) {
            return $1 + &quot;,&quot;;
        });
}
console.log(commafy(1234567.90)); //1,234,567.90
</code></pre><ul>
<li><p>检测浏览器版本版本有哪些方式？</p>
<pre><code>功能检测、userAgent特征检测

比如：navigator.userAgent
//&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_2) AppleWebKit/537.36
  (KHTML, like Gecko) Chrome/41.0.2272.101 Safari/537.36&quot;
</code></pre></li>
</ul>
<ul>
<li><p>What is a Polyfill?</p>
<pre><code>polyfill 是“在旧版浏览器上复制标准 API 的 JavaScript 补充”,可以动态地加载 JavaScript 代码或库，在不支持这些标准 API 的浏览器中模拟它们。
例如，geolocation（地理位置）polyfill 可以在 navigator 对象上添加全局的 geolocation 对象，还能添加 getCurrentPosition 函数以及“坐标”回调对象，
所有这些都是 W3C 地理位置 API 定义的对象和函数。因为 polyfill 模拟标准 API，所以能够以一种面向所有浏览器未来的方式针对这些 API 进行开发，
一旦对这些 API 的支持变成绝对大多数，则可以方便地去掉 polyfill，无需做任何额外工作。
</code></pre></li>
<li><p>做的项目中，有没有用过或自己实现一些 polyfill 方案（兼容性处理方案）？</p>
<pre><code>比如： html5shiv、Geolocation、Placeholder
</code></pre></li>
<li><p>我们给一个dom同时绑定两个点击事件，一个用捕获，一个用冒泡。会执行几次事件，会先执行冒泡还是捕获？</p>
</li>
</ul>
<ul>
<li><p>使用JS实现获取文件扩展名？</p>
<pre><code>function getFileExtension(filename) {
  return filename.slice((filename.lastIndexOf(&quot;.&quot;) - 1 &gt;&gt;&gt; 0) + 2);
}

String.lastIndexOf() 方法返回指定值（本例中的&apos;.&apos;）在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。
对于&apos;filename&apos;和&apos;.hiddenfile&apos;，lastIndexOf的返回值分别为0和-1无符号右移操作符(»&gt;) 将-1转换为4294967295，将-2转换为4294967294，这个方法可以保证边缘情况时文件名不变。
String.prototype.slice() 从上面计算的索引处提取文件的扩展名。如果索引比文件名的长度大，结果为&quot;&quot;。
</code></pre></li>
</ul>
<h4 id="ECMAScript6-相关"><a href="#ECMAScript6-相关" class="headerlink" title="ECMAScript6 相关"></a><a name="other">ECMAScript6 相关</a></h4><ul>
<li><p>Object.is() 与原来的比较操作符“ ===”、“ ==”的区别？</p>
<pre><code>两等号判等，会在比较时进行类型转换；
三等号判等(判断严格)，比较时不进行隐式类型转换,（类型不同则会返回false）；

Object.is 在三等号判等的基础上特别处理了 NaN 、-0 和 +0 ，保证 -0 和 +0 不再相同，
但 Object.is(NaN, NaN) 会返回 true.

 Object.is 应被认为有其特殊的用途，而不能用它认为它比其它的相等对比更宽松或严格。
</code></pre></li>
</ul>
<h4 id="前端框架相关"><a href="#前端框架相关" class="headerlink" title="前端框架相关"></a><a name="other">前端框架相关</a></h4><ul>
<li><p>react-router 路由系统的实现原理？</p>
</li>
<li><p>React中如何解决第三方类库的问题?</p>
</li>
</ul>
<h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a><a name="other">其他问题</a></h2><ul>
<li><p>原来公司工作流程是怎么样的，如何与其他人协作的？如何夸部门合作的？</p>
</li>
<li><p>你遇到过比较难的技术问题是？你是如何解决的？</p>
</li>
<li><p>设计模式 知道什么是singleton, factory, strategy, decrator么?</p>
</li>
<li><p>常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？</p>
</li>
<li><p>页面重构怎么操作？</p>
<pre><code>网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。
也就是说是在不改变UI的情况下，对网站进行优化，在扩展的同时保持一致的UI。

对于传统的网站来说重构通常是：

表格(table)布局改为DIV+CSS
使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的)
对于移动平台的优化
针对于SEO进行优化
深层次的网站重构应该考虑的方面

减少代码间的耦合
让代码保持弹性
严格按规范编写代码
设计可扩展的API
代替旧有的框架、语言(如VB)
增强用户体验
通常来说对于速度的优化也包含在重构中

压缩JS、CSS、image等前端资源(通常是由服务器来解决)
程序的性能优化(如数据读写)
采用CDN来加速资源加载
对于JS DOM的优化
HTTP服务器的文件缓存
</code></pre></li>
<li><p>列举IE与其他浏览器不一样的特性？</p>
</li>
</ul>
<pre><code>1、事件不同之处：

       触发事件的元素被认为是目标（target）。而在 IE 中，目标包含在 event 对象的 srcElement 属性；

    获取字符代码、如果按键代表一个字符（shift、ctrl、alt除外），IE 的 keyCode 会返回字符代码（Unicode），DOM 中按键的代码和字符是分离的，要获取字符代码，需要使用 charCode 属性；

    阻止某个事件的默认行为，IE 中阻止某个事件的默认行为，必须将 returnValue 属性设置为 false，Mozilla 中，需要调用 preventDefault() 方法；

    停止事件冒泡，IE 中阻止事件进一步冒泡，需要设置 cancelBubble 为 true，Mozzilla 中，需要调用 stopPropagation()；
</code></pre><ul>
<li><p>99%的网站都需要被重构是那本书上写的？</p>
<pre><code>网站重构：应用web标准进行设计（第2版）
</code></pre></li>
<li><p>什么叫优雅降级和渐进增强？</p>
<pre><code>优雅降级：Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会针对旧版本的IE进行降级处理了,使之在旧式浏览器上以某种形式降级体验却不至于完全不能用。
如：border-shadow

渐进增强：从被所有浏览器支持的基本功能开始，逐步地添加那些只有新版本浏览器才支持的功能,向页面增加不影响基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。
如：默认使用flash上传，但如果浏览器支持 HTML5 的文件上传功能，则使用HTML5实现更好的体验；
</code></pre></li>
<li><p>是否了解公钥加密和私钥加密。</p>
<pre><code>一般情况下是指私钥用于对数据进行签名，公钥用于对签名进行验证;
HTTP网站在浏览器端用公钥加密敏感数据，然后在服务器端再用私钥解密。
</code></pre></li>
</ul>
<ul>
<li><p>WEB应用从服务器主动推送Data到客户端有那些方式？</p>
<pre><code>html5提供的Websocket
不可见的iframe
WebSocket通过Flash
XHR长时间连接
XHR Multipart Streaming
&lt;script&gt;标签的长时间连接(可跨域)
</code></pre></li>
<li><p>对Node的优点和缺点提出了自己的看法？</p>
</li>
</ul>
<pre><code>*（优点）因为Node是基于事件驱动和无阻塞的，所以非常适合处理并发请求，
  因此构建在Node上的代理服务器相比其他技术实现（如Ruby）的服务器表现要好得多。
  此外，与Node代理服务器交互的客户端代码是由javascript语言编写的，
  因此客户端和服务器端都用同一种语言编写，这是非常美妙的事情。

*（缺点）Node是一个相对新的开源项目，所以不太稳定，它总是一直在变，
  而且缺少足够多的第三方库支持。看起来，就像是Ruby/Rails当年的样子。
</code></pre><ul>
<li><p>你有用过哪些前端性能优化的方法？</p>
<pre><code>（1） 减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。

（2） 前端模板 JS+数据，减少由于HTML标签导致的带宽浪费，前端用变量保存AJAX请求结果，每次操作本地变量，不用请求，减少请求次数

（3） 用innerHTML代替DOM操作，减少DOM操作次数，优化javascript性能。

（4） 当需要设置的样式很多时设置className而不是直接操作style。

（5） 少用全局变量、缓存DOM节点查找的结果。减少IO读取操作。

（6） 避免使用CSS Expression（css表达式)又称Dynamic properties(动态属性)。

（7） 图片预加载，将样式表放在顶部，将脚本放在底部  加上时间戳。

（8） 避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。
对普通的网站有一个统一的思路，就是尽量向前端优化、减少数据库操作、减少磁盘IO。向前端优化指的是，在不影响功能和体验的情况下，能在浏览器执行的不要在服务端执行，能在缓存服务器上直接返回的不要到应用服务器，程序能直接取得的结果不要到外部取得，本机内能取得的数据不要到远程取，内存能取到的不要到磁盘取，缓存中有的不要去数据库查询。减少数据库操作指减少更新次数、缓存结果减少查询次数、将数据库执行的操作尽可能的让你的程序完成（例如join查询），减少磁盘IO指尽量不使用文件系统作为缓存、减少读写文件次数等。程序优化永远要优化慢的部分，换语言是无法“优化”的。
</code></pre></li>
<li><p>http状态码有那些？分别代表是什么意思？</p>
<pre><code>  简单版
  [
      100  Continue    继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息
      200  OK         正常返回信息
      201  Created      请求成功并且服务器创建了新的资源
      202  Accepted     服务器已接受请求，但尚未处理
      301  Moved Permanently  请求的网页已永久移动到新位置。
      302 Found          临时性重定向。
      303 See Other      临时性重定向，且总是使用 GET 请求新的 URI。
      304  Not Modified 自从上次请求后，请求的网页未修改过。

      400 Bad Request  服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。
      401 Unauthorized 请求未授权。
      403 Forbidden      禁止访问。
      404 Not Found      找不到如何与 URI 相匹配的资源。

      500 Internal Server Error  最常见的服务器端错误。
      503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。
  ]

完整版
1**(信息类)：表示接收到请求并且继续处理
  100——客户必须继续发出请求
  101——客户要求服务器根据请求转换HTTP协议版本

2**(响应成功)：表示动作被成功接收、理解和接受
  200——表明该请求被成功地完成，所请求的资源发送回客户端
  201——提示知道新文件的URL
  202——接受和处理、但处理未完成
  203——返回信息不确定或不完整
  204——请求收到，但返回信息为空
  205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件
  206——服务器已经完成了部分用户的GET请求

3**(重定向类)：为了完成指定的动作，必须接受进一步处理
  300——请求的资源可在多处得到
  301——本网页被永久性转移到另一个URL
  302——请求的网页被转移到一个新的地址，但客户访问仍继续通过原始URL地址，重定向，新的URL会在response中的Location中返回，浏览器将会使用新的URL发出新的Request。
  303——建议客户访问其他URL或访问方式
  304——自从上次请求后，请求的网页未修改过，服务器返回此响应时，不会返回网页内容，代表上次的文档已经被缓存了，还可以继续使用
  305——请求的资源必须从服务器指定的地址得到
  306——前一版本HTTP中使用的代码，现行版本中不再使用
  307——申明请求的资源临时性删除

4**(客户端错误类)：请求包含错误语法或不能正确执行
  400——客户端请求有语法错误，不能被服务器所理解
  401——请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用
  HTTP 401.1 - 未授权：登录失败
  　　HTTP 401.2 - 未授权：服务器配置问题导致登录失败
  　　HTTP 401.3 - ACL 禁止访问资源
  　　HTTP 401.4 - 未授权：授权被筛选器拒绝
  HTTP 401.5 - 未授权：ISAPI 或 CGI 授权失败
  402——保留有效ChargeTo头响应
  403——禁止访问，服务器收到请求，但是拒绝提供服务
  HTTP 403.1 禁止访问：禁止可执行访问
  　　HTTP 403.2 - 禁止访问：禁止读访问
  　　HTTP 403.3 - 禁止访问：禁止写访问
  　　HTTP 403.4 - 禁止访问：要求 SSL
  　　HTTP 403.5 - 禁止访问：要求 SSL 128
  　　HTTP 403.6 - 禁止访问：IP 地址被拒绝
  　　HTTP 403.7 - 禁止访问：要求客户证书
  　　HTTP 403.8 - 禁止访问：禁止站点访问
  　　HTTP 403.9 - 禁止访问：连接的用户过多
  　　HTTP 403.10 - 禁止访问：配置无效
  　　HTTP 403.11 - 禁止访问：密码更改
  　　HTTP 403.12 - 禁止访问：映射器拒绝访问
  　　HTTP 403.13 - 禁止访问：客户证书已被吊销
  　　HTTP 403.15 - 禁止访问：客户访问许可过多
  　　HTTP 403.16 - 禁止访问：客户证书不可信或者无效
  HTTP 403.17 - 禁止访问：客户证书已经到期或者尚未生效
  404——一个404错误表明可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。eg：输入了错误的URL
  405——用户在Request-Line字段定义的方法不允许
  406——根据用户发送的Accept拖，请求资源不可访问
  407——类似401，用户必须首先在代理服务器上得到授权
  408——客户端没有在用户指定的饿时间内完成请求
  409——对当前资源状态，请求不能完成
  410——服务器上不再有此资源且无进一步的参考地址
  411——服务器拒绝用户定义的Content-Length属性请求
  412——一个或多个请求头字段在当前请求中错误
  413——请求的资源大于服务器允许的大小
  414——请求的资源URL长于服务器允许的长度
  415——请求资源不支持请求项目格式
  416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段
  417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。

5**(服务端错误类)：服务器不能正确执行一个正确的请求
  HTTP 500 - 服务器遇到错误，无法完成请求
  　　HTTP 500.100 - 内部服务器错误 - ASP 错误
  　　HTTP 500-11 服务器关闭
  　　HTTP 500-12 应用程序重新启动
  　　HTTP 500-13 - 服务器太忙
  　　HTTP 500-14 - 应用程序无效
  　　HTTP 500-15 - 不允许请求 global.asa
  　　Error 501 - 未实现
HTTP 502 - 网关错误
HTTP 503：由于超载或停机维护，服务器目前无法使用，一段时间后可能恢复正常
</code></pre></li>
<li><p>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？（流程说的越详细越好）</p>
<pre><code>注：这题胜在区分度高，知识点覆盖广，再不懂的人，也能答出几句，
而高手可以根据自己擅长的领域自由发挥，从URL规范、HTTP协议、DNS、CDN、数据库查询、
到浏览器流式解析、CSS规则构建、layout、paint、onload/domready、JS执行、JS API绑定等等；

详细版：
  1、浏览器会开启一个线程来处理这个请求，对 URL 分析判断如果是 http 协议就按照 Web 方式来处理;
  2、调用浏览器内核中的对应方法，比如 WebView 中的 loadUrl 方法;
  3、通过DNS解析获取网址的IP地址，设置 UA 等信息发出第二个GET请求;
  4、进行HTTP协议会话，客户端发送报头(请求报头);
  5、进入到web服务器上的 Web Server，如 Apache、Tomcat、Node.JS 等服务器;
  6、进入部署好的后端应用，如 PHP、Java、JavaScript、Python 等，找到对应的请求处理;
  7、处理结束回馈报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致则返回304;
  8、浏览器开始下载html文档(响应报头，状态码200)，同时使用缓存;
  9、文档树建立，根据标记请求所需指定MIME类型的文件（比如css、js）,同时设置了cookie;
  10、页面开始渲染DOM，JS根据DOM API操作DOM,执行事件绑定等，页面显示完成。

简洁版：
  浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求；
  服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）；
  浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）；
  载入解析到的资源文件，渲染页面，完成。
</code></pre></li>
<li><p>部分地区用户反应网站很卡，请问有哪些可能性的原因，以及解决方法？</p>
</li>
<li><p>从打开app到刷新出内容，整个过程中都发生了什么，如果感觉慢，怎么定位问题，怎么解决?</p>
</li>
<li><p>除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？</p>
</li>
<li><p>你用的得心应手用的熟练地编辑器&amp;开发环境是什么样子？</p>
<pre><code>Sublime Text 3 + 相关插件编写前端代码
Google chrome 、Mozilla Firefox浏览器 +firebug 兼容测试和预览页面UI、动画效果和交互功能
Node.js+Gulp
git 用于版本控制和Code Review
</code></pre></li>
<li><p>对前端工程师这个职位是怎么样理解的？它的前景会怎么样？</p>
<pre><code>前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近。
1、实现界面交互
2、提升用户体验
3、有了Node.js，前端可以实现服务端的一些事情
</code></pre></li>
</ul>
<pre><code>前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，

参与项目，快速高质量完成实现效果图，精确到1px；

与团队成员，UI设计，产品经理的沟通；

做好的页面结构，页面重构和用户体验；

处理hack，兼容、写出优美的代码格式；

针对服务器的优化、拥抱最新前端技术。
</code></pre><ul>
<li><p>你怎么看待Web App 、hybrid App、Native App？</p>
</li>
<li><p>你移动端前端开发的理解？（和 Web 前端开发的主要区别是什么？）</p>
</li>
<li><p>你对加班的看法？</p>
</li>
</ul>
<pre><code>加班就像借钱，原则应当是------救急不救穷
</code></pre><ul>
<li><p>平时如何管理你的项目？</p>
<pre><code>先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等；

编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；

标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；

页面进行标注（例如 页面 模块 开始和结束）；

CSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）；

JS 分文件夹存放 命名以该JS功能为准的英文翻译。

图片采用整合的 images.png png8 格式文件使用 尽量整合在一起使用方便将来的管理
</code></pre></li>
<li><p>如何设计突发大规模并发架构？</p>
</li>
</ul>
<ul>
<li><p>当团队人手不足，把功能代码写完已经需要加班的情况下，你会做前端代码的测试吗？</p>
</li>
<li><p>说说最近最流行的一些东西吧？常去哪些网站？</p>
<pre><code>ES6\WebAssembly\Node\MVVM\Web Components\React\React Native\Webpack 组件化
</code></pre></li>
<li><p>知道什么是SEO并且怎么优化么? 知道各种meta data的含义么?</p>
</li>
</ul>
<ul>
<li><p>移动端（Android IOS）怎么做好用户体验?</p>
<pre><code>清晰的视觉纵线、
信息的分组、极致的减法、
利用选择代替输入、
标签及文字的排布方式、
依靠明文确认密码、
合理的键盘利用、
</code></pre></li>
<li><p>简单描述一下你做过的移动APP项目研发流程？</p>
</li>
<li><p>你在现在的团队处于什么样的角色，起到了什么明显的作用？</p>
</li>
<li><p>你认为怎样才是全端工程师（Full Stack developer）？</p>
</li>
<li><p>介绍一个你最得意的作品吧？</p>
</li>
<li><p>你有自己的技术博客吗，用了哪些技术？</p>
</li>
<li><p>对前端安全有什么看法？</p>
</li>
<li><p>是否了解Web注入攻击，说下原理，最常见的两种攻击（XSS 和 CSRF）了解到什么程度？</p>
</li>
<li><p>项目中遇到国哪些印象深刻的技术难题，具体是什么问题，怎么解决？。</p>
</li>
<li><p>最近在学什么东西？</p>
</li>
<li><p>你的优点是什么？缺点是什么？</p>
</li>
<li><p>如何管理前端团队?</p>
</li>
<li><p>最近在学什么？能谈谈你未来3，5年给自己的规划吗？</p>
</li>
</ul>
<h2 id="前端学习网站推荐"><a href="#前端学习网站推荐" class="headerlink" title="前端学习网站推荐"></a><a name="web">前端学习网站推荐</a></h2><pre><code>1. 极客标签：     http://www.gbtags.com/

2. 码农周刊：     http://weekly.manong.io/issues/

3. 前端周刊：     http://www.feweekly.com/issues

4. 慕课网：       http://www.imooc.com/

5. div.io：         http://div.io

6. Hacker News： https://news.ycombinator.com/news

7. InfoQ：       http://www.infoq.com/

8. w3cplus：     http://www.w3cplus.com/

9. Stack Overflow： http://stackoverflow.com/

10.w3school：    http://www.w3school.com.cn/

11.mozilla：     https://developer.mozilla.org/zh-CN/docs/Web/JavaScript
</code></pre><h2 id="文档推荐"><a href="#文档推荐" class="headerlink" title="文档推荐"></a><a name="web">文档推荐</a></h2><ol>
<li><p><a href="http://docs.huihoo.com/jquery/jquery-fundamentals/zh-cn/index.html" title="jQuery 基本原理" target="_blank" rel="external">jQuery 基本原理</a></p>
</li>
<li><p><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="external">JavaScript 秘密花园</a></p>
</li>
<li><p><a href="http://css.doyoe.com/" target="_blank" rel="external">CSS参考手册</a></p>
</li>
<li><p><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="external">JavaScript 标准参考教程</a></p>
</li>
<li><p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6入门</a></p>
</li>
</ol>
<p><strong>备注：</strong></p>
<pre><code>根据自己需要选择性阅读，面试题是对理论知识的总结，让自己学会应该如何表达。

资料答案不够正确和全面，欢迎欢迎Star和提交issues。

格式不断修改更新中。

在 github 项目的右上角，有三个按钮,分别是 watch、star、fork，新来的同学注意不要用错了，无休止的邮件提醒会给你造成不必要的信息干扰。

当你选择Watching，表示你以后会关注这个项目的全部动态，以后只要这个项目发生变动，被别人提交了pull request、被发起了issue等情况你都会收到邮件通知。

star相当于是点赞或收藏，方便以后查找。

fork表示你想要补充完善这个项目的内容。

更新记录：

    2016年10月20日:更新一些已被发现的问题。

    2016年3月25日：新增ECMAScript6 相关问题
</code></pre><p>###更新时间:  2016年10月20日</p>
<pre><code>爱机车、爱骑行、爱旅行、爱摄影、爱阅读的前端开发攻城师。

我的微博：http://weibo.com/920802999
</code></pre>]]></content>
      
        <categories>
            
            <category> 前端面试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 前端面试，web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《重来》读书笔记]]></title>
      <url>http://yoursite.com/2016/03/15/%E9%87%8D%E6%9D%A5/</url>
      <content type="html"><![CDATA[<h1 id="《重来》读书笔记"><a href="#《重来》读书笔记" class="headerlink" title="《重来》读书笔记"></a>《重来》读书笔记</h1><h2 id="关于这本书："><a href="#关于这本书：" class="headerlink" title="关于这本书："></a>关于这本书：</h2><p>我是在看《web全栈工程师的自我修养》时，才听说这本书的。从书名《rework》（重来）来看，这本书应该讲的是一些新的思维方式。正如本书的副标题：“更为简单有效的商业思维”。本书确实在教我们这样一些思维方式。<br><a id="more"></a><br>PS：说是读书笔记，其实是书中内容的一些摘要。</p>
<h2 id="卸负篇"><a href="#卸负篇" class="headerlink" title="卸负篇"></a>卸负篇</h2><blockquote>
<p>忘了“现实世界”<br>Ignore the real world</p>
<blockquote>
<p>当你像人们介绍一个新创意时，人们总是说：“这在现实世界中完全行不通”。<br>这个“现实世界”背后其实是悲观和绝望的情绪。<br>“现实世界”只是借口，只是某些人为了开脱自己的无所作为，跟你一点关系都没有。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>哪来的从错误中学习<br>Learning from mistakes is overrated</p>
<blockquote>
<p>其他人的失败仅仅代表其他人栽了跟头而已。<br>应该从成功中汲取养分。成功是真正靠得住的教材。<br>失败并不是成功的先决条件。<br>逗留在过去的失败中是无法进化的，进化是建立在成功的基础上的。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>计划即瞎猜<br>Planing is guessing</p>
<blockquote>
<p>除非你是个预言家，否则那些所谓长期商业计划就是痴人说梦。<br>做计划就是在用过去推动未来，等于给你带上了眼罩。<br>你必须即兴发挥，你必须抓住每一个迎面而来的机遇。<br>千万不要在行动之前就做重大的决定。</p>
</blockquote>
</blockquote>
<p>依我之见：短期计划要有，不必要的是长篇大论、篇幅庞大的全年计划之类的。</p>
<hr>

<blockquote>
<p>何必壮大？<br>Why grow?</p>
<blockquote>
<p>小公司本来就是一个伟大的目标。<br>小公司在想着变大，大公司在想着变得更敏捷、更灵活。<br>无论是谁，只要他所运营的公司能够持续发展、保持盈利，不管规模大小，都是值得骄傲的。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>工作狂<br>Workaholism</p>
<blockquote>
<p>工作狂的行为不但没有必要，而且愚蠢至极。不代表更多关注或更多贡献，仅仅意味着干了更多活而已。<br>工作狂不是英雄。他们没有力挽狂澜，不过是浪费时间而已。真正的英雄早已想出办法、搞定一切，然后回家了。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>受够了“企业家”<br>Enough with “entrepreneurs”</p>
<blockquote>
<p>换一个脚踏实地的说法：不要再叫企业家，叫创始人。<br>每个创立了自己事业的都是创始人。<br>你需要的只是一个创意，加一点点自信，以及一点勇气，就可以启程了。</p>
</blockquote>
</blockquote>
<h2 id="行动篇"><a href="#行动篇" class="headerlink" title="行动篇"></a>行动篇</h2><blockquote>
<p>在宇宙中留下你的足迹<br>Make a dent in the universe</p>
<blockquote>
<p>欲成大事，就要让自己与众不同，要在宇宙中留下有意义的一笔，要让世人知道你在做的是一件重要的事情。<br>要有紧迫感。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>挠自己的痒处<br>Scratch your own itch</p>
<blockquote>
<p>想要创造一个伟大的产品或某项卓越服务，最简单直接的办法就是做你自己想用的东西。<br>设计你了解的产品——你就能很快发现它到底好不好用。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>着手做点什么<br>Start making something</p>
<blockquote>
<p>在你人生中真正有意义的是你做了什么，而不是你想过什么、说过什么或者计划过什么。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>“没时间”不是借口<br>No time is no excuse</p>
<blockquote>
<p>当你拥有某种极强烈的渴望时，你就能挤出时间来——不管你身上是否还背负着其他责任。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>画沙为界，立场明确<br>Draw a line in the sand</p>
<blockquote>
<p>起步之后，你必须一直牢记自己到底为什么要做这件事。<br>强大的主见也是要付出代价的。<br>有人喜欢你，就有人憎恨你。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>不可能的宗旨<br>Mission statement impossible</p>
<blockquote>
<p>坚守某种信念并不仅仅是把它写下来。不但要相信它，还要让它成为你的生活方式。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>万不得已不筹资<br>Outside money is plan 2</p>
</blockquote>
<hr>

<blockquote>
<p>你的需求没有想象的那么多<br>You need less than you think</p>
</blockquote>
<hr>

<blockquote>
<p>要成就事业，不能只是创业<br>Start a business,not a startup</p>
<blockquote>
<p>创业之初不要有任何依赖思想。相反，要创立真正的事业。<br>无法通往盈利之路的事业不能成为事业，只是嗜好。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>破釜沉舟<br>Building to flip is building to flop</p>
<blockquote>
<p>你需要的是承诺策略，而不是退出策略。你应该考虑的是如何把项目做起来，而不是如何跳船逃生。如果你的整个策略都是建立在逃跑的基础上，那么你一开始就不会走的太远。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>轻装上阵<br>less mass</p>
<blockquote>
<p>如果你始终保持轻装上阵，就能快速做出改变：包括你的整个业务模式、产品、特性设置或者营销手段。一旦出错，都能很快修正。</p>
</blockquote>
</blockquote>
<h2 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h2><blockquote>
<p>条件受限是好事<br>Embrace constraints</p>
<blockquote>
<p>有限的条件能激发你在现有条件下完成任务的能力。没有一点浪费的空间，一切都需要你发挥最大的创造力。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>与其做个半成品，不如做好个半个产品<br>Build half a product,not a half-assed product </p>
</blockquote>
<hr>

<blockquote>
<p>从核心出发<br>Start at the epicenter</p>
<blockquote>
<p>当你开始着手做一件事情时，总有一些力量将你拉向不同的方向。这当中包括你能做的、你想做的以及你必须做的事情。你应该从必须做的事情开始下手，即从核心出发。<br>如果有些东西即使没有了，你也能把事情干下去，那这些东西就不是事业的中心。<br>当你发现事业的中心时，你就会恍然大悟，然后把所有精力都集中在这个中心上，把它做得越强越好。这是你未来成功的基础。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>不要过早关注细节<br>Ignore the details early on</p>
<blockquote>
<p>细节会导致差异,但过早纠结于细节则会引来异议、多如牛毛的会议以及延期。<br>先把基础打牢，再去操心其他的事情。<br>你只有在真正开始后，才能认清到底哪些细节才是重要的。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>作出决定就是取得进展<br>Making the call is making  progress</p>
<blockquote>
<p>当你推迟决定时，事情就会堆积起来，最后落到被遗忘、被草草处理或是被抛开的下场。<br>主动做决定，不要苦等最佳方案，要积极决策、果断前进。<br>你不会靠一个决定过上一辈子。如果你当时的决定不合适，以后还可以改。<br>项目周期过长会打击士气。项目开发时间越长，成功的可能性越小。只要有足够的动力和士气，就要趁热打铁，积极决策，果断推进，现在就把事情做出来。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>在问题上少投入点精力<br>Throw less of the problem</p>
<blockquote>
<p>当遇到困难时，人们的本能反应都是加大投入：增加人手、延长时间、加大投资，这一切做法只是使问题变得越大。正确的方法应该是反其道而行之，削减。<br>这时，你要被迫使出雷霆手段，筛选出真正有价值的东西来。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>关注不变因素<br>Focus on what won’t change</p>
<blockquote>
<p>你的事业的核心应该建立在不变的基础上。你应该投资那些人们现在需要并且10年之后仍然需要的事物。<br>时尚会凋零。只有你聚焦于长久的功能时，你才会发现自己把握住了永不落伍的东西。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>音乐就在你的指尖流淌<br>Tone is in your finger</p>
<blockquote>
<p>人们总忍不住要执着于工具，而不关注要用这些工具去做的事情。<br>就用你现在手头有的或者能负担得起的，然后开始吧。工具不重要，就用现有的工具也可以做的一级棒，音乐就在你的指尖流淌。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>卖掉副产品<br>Sell your by-product</p>
<blockquote>
<p>软件公司不会想到要去写书，乐队也不会想到要去拍摄录音过程，汽车厂商也不会想到去卖炭。这些可能都是你还没想到但完全可以去做的事情。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>立马就上线<br>Lounch now</p>
<blockquote>
<p>一旦你的产品实现了基本的功能，就要迅速把它亮出来。<br>想象一下：如果你的业务必须在两周内推出，你会砍掉哪些部分？这样一个问题能够让你变得更专注。你一下子就意识到有许多事情是你不需要做的。而你真正要做的事就变得格外清晰了。</p>
</blockquote>
</blockquote>
<h2 id="效率篇"><a href="#效率篇" class="headerlink" title="效率篇"></a>效率篇</h2><blockquote>
<p>赞同的错觉<br>Illusions of agreement</p>
<blockquote>
<p>如果你一定要说明某事，那就务实一点。不要描述它长什么样子，直接画出来；不要解释他的声音如何，直接哼出来。要尽一切可能去掉那些抽象的东西。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>退出的理由<br>Reasons to quit</p>
<blockquote>
<p>问自己几个问题以确定你是否在做有意义的事情:</p>
<p>为什么要这么做？<br>你在解决什么问题？<br>这真的有用吗？<br>你加上去的东西有价值吗？<br>这种改变真的会起作用吗？<br>这种方法更简单吗？<br>有其他更值得做的事情吗？<br>这样做值吗？</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>打岔是效率的敌人<br>Interruotion is the enemy of productivity</p>
</blockquote>
<hr>

<blockquote>
<p>会议有毒<br>Meeting are toxic</p>
</blockquote>
<hr>

<blockquote>
<p>刚刚好就是真的好<br>Good enough is fine </p>
<blockquote>
<p>当找到合适的解决办法后，就用它了。总比浪费资源、甚至因为无法承担复杂的解决方案而在那干等要强。记住，以后你随时都可以把“刚刚好”变成“特别棒”。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>速战速决<br>Quick Wins</p>
<blockquote>
<p>乘势而为才能动力十足。良好的发展态势能让你坚持下去，能驱动你成长。<br>积累动力的方法就是完成一项任务，然后紧接着去完成下一项任务。<br>想要保持良好的势头和持续的动力，就要养成“积跬步以致千里”的习惯。哪怕是微小的进步也能让你士气大振。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>不要逞英雄<br>Don’t be a hero</p>
<blockquote>
<p>很多时候，知难而退比逞英雄实在。<br>最明显的解决方案有可能就是适时退出<br>如果你已经在不值得做的事情上浪费了很多时间，那就赶快走开。失去的时间是再也找不回来了。现在最糟糕的事莫过于继续浪费时间。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>该睡觉时就睡觉<br>Go to sleep</p>
<blockquote>
<p>人在困倦的时候，很容易执著于眼前的错误方案，不愿意重新思考新的途径。于是终点成了海市蜃楼，而你最终深陷沙漠，无法自拔。<br>缺少睡眠的人是难以有创意的。<br>士气低落<br>情绪失控</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>预估都是垃圾<br>Your estimates suck</p>
<blockquote>
<p>我们把一切都看成是按最佳方案进行，意识不到现实中总难免有突发事件会耽搁进度。<br>把大项目分解成小任务。越小的任务越容易预计。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>罗列问题，不得解决<br>Long lists dont’t get done</p>
<blockquote>
<p>只要有可能，就把问题拆解成一个一个的小片段，直到你能够完全迅速地解决每一个小问题。<br>要把看起来最重要的事情放在清单的上端。然后把第二重要的事情放在清单中挨着上端的位置。这样一来，你就能够按照事情的轻重缓急来进行排序，这样就足够了。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>决策宜小不宜大<br>Make thing decisions</p>
<blockquote>
<p>重大决策很难落实，也很难修正。一旦作出重大决策，你倾向于认为自己的选择是对的，即使错了，你也无法对其作出客观判断。<br>易于实现的目标就是最好的目标。<br>和那些虚幻的梦想相比，这样的小胜利带来的满足感要强得多。</p>
</blockquote>
</blockquote>
<h2 id="对手篇"><a href="#对手篇" class="headerlink" title="对手篇"></a>对手篇</h2><blockquote>
<p>拒绝照搬<br>Don’t copy </p>
<blockquote>
<p>简单复制扼杀了深层的理解——而理解才能激发成长。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>将你的产品去商品化<br>Decommoditize your product                 </p>
<blockquote>
<p>在你的特点融入你的产品以及和你的产品有关的一切事物当中去：你的销售方式、支持模式、说明方式、递送方式。竞争者们是无法复制你的产品中的独特性的。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>向对手挑战<br>Pick a fight</p>
<blockquote>
<p>眼里有目标，心中就有方向，出手才有力量。<br>拥有对手，就等于为客户制造出了讲故事的素材。驻足观望者只能站在外围，人们热衷于看到冲突，喜欢偏袒一方，乐于被点燃激情。而这正是吸引人们眼球的绝佳办法。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>给竞争力做减法<br>Underdo your competition</p>
<blockquote>
<p>解决最简单的问题，把那些纠结的、困难的、令人厌恶的难题留给他们去解决。<br>不要总想着胜人一筹，试试退一步海阔天空。<br>不要逞强，要适当示弱。<br>不要因为你的产品或服务不如别人而自惭形秽。要高调一些，要引以为豪。<br>要想你的对手推广他们的多功能产品一样充满激情的推销你的简约产品。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>谁管他们在做什么？<br>Who cares what they’re doing</p>
<blockquote>
<p>对方的每一个小动作都落入你的精密计算之中，这种心态很恐怖，会让人沉浸在紧张和焦虑之中。<br>把目光放在你自己身上。<br>过多关注竞争对手会分散你的视线。</p>
</blockquote>
</blockquote>
<h2 id="进化篇"><a href="#进化篇" class="headerlink" title="进化篇"></a>进化篇</h2><blockquote>
<p>养成对顾客说“不”的习惯<br>Say no by default</p>
<blockquote>
<p>唯唯诺诺很容易。人们很容易同意添加一项新功能、接受一个过于乐观的最后期限、笑纳一个平庸的设计。很快，这些轻易过关的事物堆积起来，在你眼前越堆越高，你甚至都看不到现在该做的事情了<br>人们很少会因为拒绝而后悔，却常常宁愿自己当初没有答应别人。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>不要攀客户的高枝<br>Let your customers outgrow you</p>
<blockquote>
<p>我们宁可让客户最后放弃我们的产品，也不愿意一开始让他们不能上手使用。<br>吓跑新客户比失去老客户更糟。<br>没有用过你们产品的客户永远比用过的多。要确保你的产品让这些人容易上手。这就是你持续成长的潜力所在。<br>公司要对某一类型的客户全情投入，而不是对某一个善变的客户唯唯诺诺。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>头脑发热不等于当务之急<br>Don’t confuse enthusiasm with priority</p>
<blockquote>
<p>要想尽一切办法找出所有伟大的创意，让自己激情澎湃一把，但是不要轻举妄动。把它们都写下来，然后放上几天，再用冷静下来的思路去为它们安排优先顺序吧。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>家用遍历就是好<br>Be at-home good</p>
<blockquote>
<p>一个新创意的撩人程度并不代表其真实价值。有些东西现在看上去是“非要不可”，但是到了第二天早上，可能就会降级为“可有可无”。<br>一个能够完美演绎基本功能的产品，势必在花哨程度上要略逊对手一筹。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>不必逐字记下客户需求<br>Don’t write it down</p>
<blockquote>
<p>真正有意义的需求，客户会一次又一次地跟在你屁股后面提出来。你根本就不可能忘记。你的客户就是你的记事本，他们会反复提醒你，会展示给你哪些事情是真正需要去考虑的。</p>
</blockquote>
</blockquote>
<h2 id="推广篇"><a href="#推广篇" class="headerlink" title="推广篇"></a>推广篇</h2><blockquote>
<p>敢于低微<br>Welcome obscurity</p>
<blockquote>
<p>要保持低调，你可以利用这段时间继续调整你的策略，解决纠结的问题、测试各种创意、尝试新事物。没有人认识你，所以弄砸了也没关系，起于浮萍之末，能最大限度地保住你的自尊和自信。<br>现在就是毫无顾忌地进行冒险的绝佳机会。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>培养自己的拥趸（dun 3声）<br>Build on oudience</p>
<blockquote>
<p>大方地分享有价值的信息，你就会慢慢建立起忠实的观众群体。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>普及知识，赢得竞争<br>Out-teach your competition</p>
<blockquote>
<p>传道授业能为你建立起凝聚力，这是传统市场策略不可望其项背的。通过杂志或网络广告去赚取眼球是一回事；通过讲授知识来赢得人们的忠诚则建立起了一种截然不同的关系。后者会更加相信你、尊重你。即使他们不使用你的产品，也仍然是你的粉丝。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>转到幕后看看<br>Go behind the scenes</p>
<blockquote>
<p>让人们走入幕后，能改善你和他们之间的关系。他们会感到与你亲近起来，将你视为一个常人，而不是一个面目模糊的公司。他们将在你的产品中看到你在后台淌下的汗水和付出的努力。他们会对你的工作产生更深刻的理解和更诚挚的感激。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>没人喜欢塑料花<br>Nobody likes plastic flowers</p>
<blockquote>
<p>不要害怕让人看到你的缺点。不完美才真实，真实才能激起人们的共鸣。<br>“保留原有的韵致”是一种美丽的行事方法。过度的雕琢会使事物失去灵魂，变得机械乏味。<br>不完美也是一种美。<br>你大可直言不讳，畅谈那些别人不愿意讨论的东西。直面你的弱点，向人们展示你最近的工作状况，即使你还没完全搞定它。不完美没关系，也许你看起来不专业，但你却更真实。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>媒体发布就是垃圾邮件<br>Press releases are spam</p>
<blockquote>
<p>如果你想吸引他人的注意，却做着和其他人毫无差别的事情，绝对是愚蠢之极。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>药贩子最精明<br>Drug dealers get it right</p>
<blockquote>
<p>要效法药贩子，把你的产品包装成完美的、令人上瘾的、“不能错过”的灵丹，让人浅尝之后都忍不住要拿着真金白银回来向你购买。<br>只要你有东西可卖，就不要怕给人一点点让其试用。要对自己的产品抱有信心。你应该知道人们会回来购买更多，如果你连这样的信心都没有，只能说明你的产品做得不够好。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>市场营销不是一个部门的事<br>Marketing is not a department</p>
<blockquote>
<p>人不能不交流，同理，人也不能不去做营销工作。<br>在小细节上的优秀表现，比为客户选择会议小礼品要重要得多。<br>市场营销不是几个人的工作，它是你做的所有工作的总和。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>一夜成名只是传说<br>The myth of the overnight sensation</p>
<blockquote>
<p>这些成功人士在到达引爆点之前，都已经在这个方向苦熬了很长时间。</p>
</blockquote>
</blockquote>
<h2 id="招聘篇"><a href="#招聘篇" class="headerlink" title="招聘篇"></a>招聘篇</h2><blockquote>
<p>亲力亲为<br>Do it yourself first</p>
<blockquote>
<p>在你亲自尝试这份工作之前，永远不要雇人去做。只有这样，你才能了解这项工作的本质。<br>你应该让自己密切融入业务的方方面面。否则你会陷入一片茫然，把自己的命运交到别人手上，这是非常危险的。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>受不了时再招人<br>Hire when it hurts</p>
</blockquote>
<hr>

<blockquote>
<p>放弃牛人<br>Pass on great people</p>
<blockquote>
<p>放弃那些你并不需要的牛人，即使你觉得这是个人才。<br>牛与不牛并没有任何意义，不需要就是不需要。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>可笑的求职简历<br>Resumes are ridiculous</p>
<blockquote>
<p>你要招的是一个特别的人，这个人要特别关心你的公司、你的产品、你的客户，以及你提供的职位。<br>在求职信里你能看到真正的交流，而不是一堆技巧、动词以及无关经历的罗列。<br>你能在求职信里看到人们的真实想法，能够鉴别他们的理念是否和你以及你的公司合拍。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>多年的无关经验<br>Years of irrelevance</p>
<blockquote>
<p>现在已经不是以时间长短论英雄的时候了，真正重要的是他们到底做的多好。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>常规教育不值一提<br>Forget about formal education</p>
</blockquote>
<hr>

<blockquote>
<p>人人都得干活<br>Everybody works</p>
<blockquote>
<p>一个团队里面需要的是干活的人，而不是监工。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>聘用独当一面的经理人<br>Hire managers of one </p>
</blockquote>
<hr>

<blockquote>
<p>聘用笔杆子<br>Hire great writers</p>
<blockquote>
<p>会写代表会思考。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>高手遍布世界各地<br>The best are everywhere</p>
</blockquote>
<hr>

<blockquote>
<p>试用期必不可少<br>Test-drive employees</p>
</blockquote>
<h2 id="救灾篇"><a href="#救灾篇" class="headerlink" title="救灾篇"></a>救灾篇</h2><blockquote>
<p>主动掌控负面新闻<br>Own your bad news</p>
<blockquote>
<p>一旦出了事故，就会有人出来爆料。但如果是由你自己来说，结果会好得多。<br>如果你够坦荡，够诚实，够公开，危机应变速度够快，人们就会更加尊重你。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>速度改变一切<br>Speed changes everything</p>
<blockquote>
<p>在客户服务这一领域，最重要的事情就是快速响应。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>如何道歉<br>How to say you’re sorry</p>
<blockquote>
<p>一句真诚的道歉，是要承担责任的。<br>道歉要详细解释发生的一切，要说明你将采取什么措施来防止这样的事情再次发生。<br>道歉时的第一原则：如果换做是你，你会是什么感觉？如果有人对你说这些话，你会相信他们吗？</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>让每个人都上前线<br>Put everyone on the front lines</p>
<blockquote>
<p>团队中每一个人都应该直接与客户联系——也许不需要每天如此，但至少每年得联系几次。这是让你的团队直接了解客户内心感受的唯一途径。<br>感同身受的团队才有动力去解决问题。<br>帮助客户解决问题后的愉悦感和成就感，也能大大提高队员士气。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>深深深呼吸<br>Take a deep breath</p>
<blockquote>
<p>当你改变现状的时候，就会激起波浪。当你推出新功能、改换新政策或去掉什么东西时，就会引发膝跳式思维反应。一定要克制恐慌或马上应对的冲动。<br>当听到人们的抱怨时，可以搁置一会儿。<br>让人们知道你在倾听，让他们明白你了解它们的想法，让他们清楚你理解他们的不满。但要告诉他们，你打算继续一段时间，看看会发生什么。</p>
</blockquote>
</blockquote>
<h2 id="文化篇"><a href="#文化篇" class="headerlink" title="文化篇"></a>文化篇</h2><blockquote>
<p>文化不是由谁创造的<br>You don’t create a culture</p>
<blockquote>
<p>企业文化是自然形成的。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>决策都是临时性的<br>Decisions are temporary</p>
<blockquote>
<p>环境变了，决策也会随之改变，决策都是临时性的。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>员工不止13岁<br>They’re not thirteen</p>
<blockquote>
<p>当你把员工当孩子看时，人们就会像孩子一样行事。<br>对员工的不信任是最大的开销。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>5点准时放人<br>Send people home at 5</p>
</blockquote>
<hr>

<blockquote>
<p>不要听风就是雨<br>Don’t scar on the first cut </p>
</blockquote>
<hr>

<blockquote>
<p>发出你的心声<br>Sound like you</p>
<blockquote>
<p>写东西的时候，不要觉得这是写给天下所有人看的，只要想着一个人，就为这个人写。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>需要避开的词汇<br>Four-letter words</p>
<blockquote>
<p>“得”、“必须”、“不能”、“简单”、“只要”、“只有”以及赶快。这些词会损害交流。</p>
</blockquote>
</blockquote>
<hr>

<blockquote>
<p>越快越好是毒药<br>ASAP is poison</p>
</blockquote>
<h2 id="总结篇"><a href="#总结篇" class="headerlink" title="总结篇"></a>总结篇</h2><blockquote>
<p>灵感稍纵即逝</p>
<blockquote>
<p>我们都有想法，想法是不朽的，一直都会存在。<br>最不可能长存的就是灵感。灵感就像新鲜水果或牛奶：有一定的保质期。<br>如果你想去做一件事，就得马上下手。不能把这事搁置起来过两个月再考虑。不要对自己说“以后再说吧”。以后，你压根儿不会再提这件事了。<br>如果你的灵感是在周五驾临，那就放弃周末，直奔主题。当你为了这个灵感而亢奋时，就能够在24小时内做完两个星期的工作。从这一点来讲，灵感就是时光机。<br>灵感是个奇妙的东西，是效率放大器，是推进器。但是它不会停下来等你。灵感转瞬即逝，当它来找你时，要立即把它捕捉住，将其投入工作中去。</p>
</blockquote>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> other </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[《web全栈工程师的自我修养》读书笔记]]></title>
      <url>http://yoursite.com/2016/03/14/web%E5%85%A8%E6%A0%88%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</url>
      <content type="html"><![CDATA[<h1 id="《web全栈工程师的自我修养》读书笔记"><a href="#《web全栈工程师的自我修养》读书笔记" class="headerlink" title="《web全栈工程师的自我修养》读书笔记"></a>《web全栈工程师的自我修养》读书笔记</h1><p>说起来还真的是惭愧，这本书是我在寒假之前就从图书馆里借到的，处在职业迷茫期的我看见这本书的书名，如获珍宝。但是拖延症使我在开学后才开始看，但是由于时间充沛，我终于在接下来的的三周内看完了这本书。<br>以下是笔记：以备回顾。<br><a id="more"></a></p>
<h3 id="一、什么是全栈工程师"><a href="#一、什么是全栈工程师" class="headerlink" title="一、什么是全栈工程师"></a>一、什么是全栈工程师</h3><blockquote>
<ol>
<li>定义<br>• 一个能处理数据库、服务器、系统工程和客户端的所有工作的工程师。<br>• 全能的“大神”。</li>
<li>web开发流程<br>• 产品经理→交互设计→视觉设计→前端开发/后端开发→测试→发布</li>
<li>全栈工程师<br>• 需求不断上升<br>• 代表性全端框架–MEAN（MongoDB-Express-AngularJs-Node.js）<br>• 提供PaaS（Platform as a Service 平台即服务）服务的平台越来越多。</li>
<li>权杖工程师发展前景<br>• 一专多长<br>• 解决问题，而不是醉心技术<br>• Done is better than Perfect !</li>
</ol>
</blockquote>
<h3 id="二、如何成为全栈工程师"><a href="#二、如何成为全栈工程师" class="headerlink" title="二、如何成为全栈工程师"></a>二、如何成为全栈工程师</h3><blockquote>
<ol>
<li>先精后广，一专多长<br>• 先在一个特定的方向上有比较深入的钻研，然后再将学习的目标渐渐推广开来<br>• 掌握了基本的html、CSS、JavaScript之后，不要转头向服务器端语言或者APP方向发展，而是深入到性能优化、SEO（Search Engine Optimization 搜索引擎优化）、多种框架、响应式页面等前端细节中去。<br>• 在招聘要求的方向上以200%的能力来得到这个职位。<br>• 作为求职者，一定要在某个特定方向上有非常深入的理解。</li>
<li>围绕商业目标<br>• 把关注点放在商业目标而不是技术上，就能选择出更适合完成商业目标的技术，这样才能做出更客观的决定。这个过程中学到的是一种潜在的思维方式。</li>
<li>关注用户体验<br>• 每一个糟糕的体验背后都蕴含着商机。<br>• 用户：所有你为之服务的人。<br>•大巧若愚：真正聪明的人，不会显露自己，反而从表面上看好像还很笨。</li>
</ol>
</blockquote>
<h3 id="三、从学生到工程师"><a href="#三、从学生到工程师" class="headerlink" title="三、从学生到工程师"></a>三、从学生到工程师</h3><blockquote>
<ol>
<li>校园招聘<br>• 前端工程师的基本常识：结构、表现和行为要分离。技术层面上讲，网站的内容使用语义化的HTML标签，而不参杂任何表现和逻辑；网站样式表现用CSS来描述，既能在多个页面之间复用，也可以根据不同的用户来分别定义外观；页面行为逻辑用JavaScript来实现，这样保证浏览器在禁用JavaScript的时候，页面也能进行渲染和使用。<br>• 如果你的学校不是顶级，你的成绩不是学霸，那就要走不寻常的道路。</li>
<li>获得面试机会<br>• 学习能力<br>• 第一份简历：确定求职意向，不要使用简历模板，把简历发送到真正招人的企业主管那里。</li>
<li>实习<br>• 实习能提升自己的实践能力，是学生到社会人士的一个身份过渡。<br>• 记住团队的每一个人；有任何问题，主动问导师；主动介绍自己，告诉大家自己是新人，请多关照；每周发邮件记录心得总结、经验教训、学习成长；实习结束时，用邮件总结所有项目，给出交接文档，并向大家致谢。<br>• 主动性是全栈工程师必须的一个特质，没有一个全栈工程师是别人逼出来的。</li>
</ol>
</blockquote>
<h3 id="四、野生程序员"><a href="#四、野生程序员" class="headerlink" title="四、野生程序员"></a>四、野生程序员</h3><blockquote>
<ol>
<li>web性能优化（页面加载速度，页面渲染性能）<br>• 压缩原码和图片：JavaScript混淆压缩；CSS普通压缩。<br>• 选择合适的图片格式：颜色多：JPG；颜色少：PNG；WebP、SVG…<br>• 合并静态资源：包括CSS、JavaScript和小图片，减少http请求。<br>• 开启服务端的Gzip压缩：对文本最有效<br>• 使用CDN：<br>• 延长静态资源缓存时间<br>• 把CSS放在页面头部，吧JavaScript放在页面底部。</li>
<li>选择大公司<br>• 较小的风险、技术最佳实践、垂直专精的技能、服务海量用户的经验、软技能、人脉、心态。</li>
</ol>
</blockquote>
<h3 id="五、工程师事业指南"><a href="#五、工程师事业指南" class="headerlink" title="五、工程师事业指南"></a>五、工程师事业指南</h3><blockquote>
<ol>
<li>3个核心词：技术、成长、声望<br>• 技术是武器，成长就是好好打磨武器，声望是一生的积累。<br>• 获得良好的声望—答应做的事，全部都要完成。<br>• 如果上司真的给出了一个非常棘手的问题，不能直接拒绝，也不能完全答应。应该讲出事实。</li>
<li>积累作品集<br>• 做任何事情之前必须有一个问题要回答：我做这件事的目标用户是谁？<br>• GitHub</li>
</ol>
</blockquote>
<h3 id="六、全栈工程师眼中的http"><a href="#六、全栈工程师眼中的http" class="headerlink" title="六、全栈工程师眼中的http"></a>六、全栈工程师眼中的http</h3><blockquote>
<ol>
<li>http简介<br>• OSI模型（开放式系统互联通信参考模型）<br><img src="http://7xrp5z.com1.z0.glb.clouddn.com/OSI%E6%A8%A1%E5%9E%8B.png" alt="OSI模型 来源：维基百科"></li>
<li>前端视角<br>• 职责：让网站又快又好地展现在用户的浏览器中。<br>• 尽量减少同一域下的http的请求数。<br>• 把静态资源放在非主域名下，可以增加浏览器并发，还可以减少http请求中携带的不必要的cookie数据。cookie的作用域是整个域名。<br>• 合并同一域名下的资源，如把多个CSS合并成一个CSS，或者将图片组合为CSS贴图（sprite image）。<br>• 尽量减少每一个资源的体积<br>• 图片格式<br>• 较大的文本资源必须开启gzip压缩</li>
<li>后台视角<br>• 关注在于让服务器尽快响应请求,减少请求对服务器的开销.<br>• 浏览器限定对某个域的并发数。</li>
</ol>
</blockquote>
<h3 id="七、高性能网站的关键—缓存"><a href="#七、高性能网站的关键—缓存" class="headerlink" title="七、高性能网站的关键—缓存"></a>七、高性能网站的关键—缓存</h3><blockquote>
<ol>
<li>什么是缓存<br>• 存储频繁访问的数据<br>• 内存缓存减少磁盘I/O<br>• 保存耗时的操作，以便下次使用</li>
<li>服务器缓存<br>• 可以开启MySQL查询缓存来提高速度<br>• 扩展数据库缓存memcached：高性能分布式内存对象缓存系统，用于减轻数据库负担。<br>• 再加一层文件缓存：除了可以将数据库查询结果缓存在内存中，还可以将频繁造访的数据缓存在文件中。</li>
<li>浏览器缓存<br>• 对于动态生成的HTML页面使用HTTPS头：Cache-Control：no-cache。<br>• 对于静态HTML页面使用HTTPS头：Last-Modified。<br>• 其他所有的文件类型都设置Expires头，并且在文件内容有所修改的时候修改Query String。（并且在文件内容有所修改的的时候修改文件名）</li>
</ol>
</blockquote>
<h3 id="八、大前端"><a href="#八、大前端" class="headerlink" title="八、大前端"></a>八、大前端</h3><blockquote>
<ol>
<li>前端工程师：一个需要终身学习的行业</li>
<li>知识体系<br>①   初级工程师：<br>• 对浏览器兼容性的了解<br>• 对HTML/CSS/JavaScript语法和原理的理解<br>• 对编辑器和插件的熟悉程度<br>• 对调试工具的了解程度<br>• 对版本管理软件的熟悉和应用经验<br>• 对前端库/框架的使用。<br>• 标准/规范<br>②   中级工程师<br>• 对代码质量、代码规范的理解<br>• 对JavaScript单元测试的熟悉<br>• 对性能优化的应用和理解<br>• 对SEO的应用和理解<br>• 代码部署<br>• 移动web<br>③   高级工程师<br>• 代码架构<br>• 安全<br>• 对自动化测试的理解</li>
</ol>
</blockquote>
<h3 id="九、向移动端转型"><a href="#九、向移动端转型" class="headerlink" title="九、向移动端转型"></a>九、向移动端转型</h3><blockquote>
<ol>
<li>大势所趋<br>• 前端工程师是直接针对用户的客户端来编程的，当用户的客户端变成了手机浏览器和手机APP，前端工程师自然要转移战场。</li>
<li>一定要是自己的产品的用户<br>• 客户需求只有在实际使用中才能辨明,再多的前期调研也只能发现客户认为他们想要什么,而不是客户实际上想要什么。因此在不了解客户真实需求的情况下，只会多做多错。</li>
<li>有那些方向<br>• Android 原生APP<br>• Web APP<br>• 微信公众号平台<br>• 混合模式APP：即原生技术和web技术相结合的一种APP，兼具原生APP良好的用户交互体验的优势和web APP跨平台开发的优势。<br>• 把webview的部分或者所有资源打包在APP中。<br>• 把需要加载的资源设置好预先加载。<br>• 使用HTML5 Manifest技术实现资源缓存<br>• 不要把整个APP的主要逻辑都使用webview来实现。<br>• 设计的像一个APP，而不是一个网页。</li>
</ol>
</blockquote>
<h3 id="十、持续集成"><a href="#十、持续集成" class="headerlink" title="十、持续集成"></a>十、持续集成</h3><blockquote>
<ol>
<li>版本控制<br>• 利用版本控制工具来管理项目从开始到定案的过程。<br>• SVN<br>• Git</li>
<li>版本控制最佳实践<br>• 鼓励频繁的提交<br>• 确定分支流程<br>• 定义主干原则，并坚守它<br>• 不要把逻辑的修改和代码格式化操作混在一起<br>• 不想干的代码要分开提交<br>• 保持工作代码库的干净。</li>
<li>包管理<br>• Node.js<br>• Bower</li>
<li>好的架构<br>• 有合适的分离粒度<br>• 最小知识原则：一个组件或者对象不应该知道其他组件或者对象的内部实现细节。<br>• DRY（Don&apos;t Repeat Yourself）：特殊的功能只能在一个组件中实现，在其他组件中不应该有副本。<br>• 最小化预先设计，只设计必须的内容<br>• 通过良好的层级，让文件容易找到<br>• 在代码层面，有一致且可执行的命名规则。</li>
<li>Make</li>
<li>依赖关系</li>
<li>Grunt和Gulp</li>
</ol>
</blockquote>
<h3 id="十一、理解编程语言"><a href="#十一、理解编程语言" class="headerlink" title="十一、理解编程语言"></a>十一、理解编程语言</h3><blockquote>
<ol>
<li>语言的进化<br>• PHP已经转变为一种胶水语言，连接前端HTML和C++应用逻辑。</li>
<li>首选语言<br>• Java<br>• JavaScript</li>
<li>全栈工程师最佳实践<br>• 框架和库扩展了语言：Ruby on Rails。<br>• 全栈工程师的目标往往是解决商业问题，不一定需要长期完美的方案。<br>• 先选择框架，然后选择语言。</li>
<li>脚本语言的优势<br>• 脚本语言（script language）是指支持用脚本的方式编写程序的语言，它无需编译即可直接在运行环境中解析。<br>• 开发效率高，执行效率低<br>• 不需要编译<br>• 常常不用关心清理内存<br>• 常常针对特定领域优化<br>• 常常是动态类型语言<br>• 抽象层常常更高<br>• 常常有包管理器</li>
</ol>
</blockquote>
<h3 id="十二、全栈游乐场"><a href="#十二、全栈游乐场" class="headerlink" title="十二、全栈游乐场"></a>十二、全栈游乐场</h3><blockquote>
<ol>
<li>VPS（虚拟专用服务器）是把一台服务器分割成多个虚拟专享服务器的优质服务。每个VPS都可分配独立公网IP地址、独立操作系统、磁盘空间、内存、CPU资源、进程和系统设置，模拟出“独占”使用计算机资源的体验。</li>
<li>有钱了再说（580元一年）</li>
</ol>
</blockquote>
<h3 id="十三、软件设计方法"><a href="#十三、软件设计方法" class="headerlink" title="十三、软件设计方法"></a>十三、软件设计方法</h3><blockquote>
<ol>
<li>设计模式：详见《设计模式》<br>• 创建型模式：用来创建对象的模式，对实例化的过程进行了抽象。<br>• 结构型模式：主要解决类、对象、模块之间的耦合关系。<br>• 行为型模式：用来识别对象之间的常用交流模式并加以实现。</li>
<li>架构模式<br>• MVC模式：架构模式之王。3个基本部分：模型（model）、视图（view）和控制器（Controller）。<br>• 在目前在用的语言后面加上mvc framework去搜索：比如JavaScript mvc framework：AngularJS 、backbone.js ···</li>
<li>设计原则<br>• DRY（Don&apos;t Repeat Yourself）：在一个系统里，对于任何数据或者变量，都应该配置在有且只有一个地方，其他地方都应该引用这里的数据。这样，需要改动数据的时候，只需要调整这一处，所有的地方就都变更过来了。三次法则：相同代码重复出现三次以上，做成子程序。<br>• 惯例优于设置<br>• KISS原则（Keep it simple，stupid）<br>• 最少知道原则：每一个单元都应该知道关于其他单元的有效信息：那些与自己密切相关的单元。每一个单元应该和自己的朋友讲话；不和陌生人说话。</li>
</ol>
</blockquote>
<h3 id="十四、高效工程师"><a href="#十四、高效工程师" class="headerlink" title="十四、高效工程师"></a>十四、高效工程师</h3><blockquote>
<ol>
<li>阅读英文资料<br>• 英文的技术资料更多<br>• stackoverflow有完善的鼓励机制<br>• google的搜索能力非常强<br>• 英语世界的语言风格比较严谨</li>
<li>时间管理四象限</li>
<li>消除重复工作</li>
<li>给自己留出不被打扰的时间</li>
<li>番茄工作法</li>
<li>跨界思考</li>
<li>纸上头脑风暴</li>
<li>使用版本控制工具和构建系统</li>
</ol>
</blockquote>
<h3 id="十五、设计基础"><a href="#十五、设计基础" class="headerlink" title="十五、设计基础"></a>十五、设计基础</h3><blockquote>
<ol>
<li>设计的四大基本理论《写给大家看的设计书》<br>• 亲密性<br>• 对齐<br>• 重复<br>• 对比</li>
<li>设计工具：<br>• Axure<br>• Sketch<br>• Quart Composer<br>• 代码</li>
</ol>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[添加图片]]></title>
      <url>http://yoursite.com/2016/03/10/%E5%B0%9D%E8%AF%95%E7%9D%80%E5%8A%A0%E4%BA%86%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<p>我尝试了在博客中添加图片，但不得要领。<br><a id="more"></a><br>搞了几个小时，终于弄得差不多了。但是博客不能只有文字，于是我又申请了“七牛云”的账号，作为“图床”!<br><img src="http://7xrp5z.com1.z0.glb.clouddn.com/%E5%BA%B7%E5%AD%99%E7%A3%8A.jpg" alt="我自己的照片" width="30%" height="30%"><br>顺便加上我的邀请链接，也许就有人看到了呢! <a href="https://portal.qiniu.com/signup?code=3lnwlddf78rwy" target="_blank" rel="external">七牛云</a>。</p>
]]></content>
      
        <categories>
            
            <category> other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> other </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的第一篇博客]]></title>
      <url>http://yoursite.com/2016/03/09/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p>今天是2016年3月9日。<br><a id="more"></a><br>我根据网上的教程，用hexo和github建立了我的第一个站点：<a href="http://kangsunlei.github.io" target="_blank" rel="external">http://kangsunlei.github.io</a>。</p>
]]></content>
      
        <categories>
            
            <category> other </category>
            
        </categories>
        
        
        <tags>
            
            <tag> other </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
